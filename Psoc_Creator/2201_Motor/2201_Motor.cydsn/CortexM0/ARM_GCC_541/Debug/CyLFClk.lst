ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CyLFClk.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CySysClkIloStart,"ax",%progbits
  20              		.align	2
  21              		.global	CySysClkIloStart
  22              		.code	16
  23              		.thumb_func
  24              		.type	CySysClkIloStart, %function
  25              	CySysClkIloStart:
  26              	.LFB0:
  27              		.file 1 "Generated_Source\\PSoC4\\CyLFClk.c"
   1:Generated_Source\PSoC4/CyLFClk.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/CyLFClk.c **** * \file .c
   3:Generated_Source\PSoC4/CyLFClk.c **** * \version 1.20
   4:Generated_Source\PSoC4/CyLFClk.c **** *
   5:Generated_Source\PSoC4/CyLFClk.c **** * \brief
   6:Generated_Source\PSoC4/CyLFClk.c **** *  This file provides the source code for configuring watchdog timers WDTs, 
   7:Generated_Source\PSoC4/CyLFClk.c **** *  low frequency clocks (LFCLK) and the Real-time Clock (RTC) component in
   8:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC Creator for the PSoC 4 families.
   9:Generated_Source\PSoC4/CyLFClk.c **** *
  10:Generated_Source\PSoC4/CyLFClk.c **** ********************************************************************************
  11:Generated_Source\PSoC4/CyLFClk.c **** * \copyright
  12:Generated_Source\PSoC4/CyLFClk.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/CyLFClk.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/CyLFClk.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/CyLFClk.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/CyLFClk.c **** 
  18:Generated_Source\PSoC4/CyLFClk.c **** 
  19:Generated_Source\PSoC4/CyLFClk.c **** #include "CyLFClk.h"
  20:Generated_Source\PSoC4/CyLFClk.c **** #include "CyLib.h"
  21:Generated_Source\PSoC4/CyLFClk.c **** 
  22:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO && CY_IP_SRSSV2)
  23:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetLfclkSource(void);
  24:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_WCO && CY_IP_SRSSV2) */
  25:Generated_Source\PSoC4/CyLFClk.c **** 
  26:Generated_Source\PSoC4/CyLFClk.c **** 
  27:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!CY_IP_CPUSS))
  28:Generated_Source\PSoC4/CyLFClk.c ****     /* Default Ilo Trim Register value for ILO trimming*/
  29:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint16 defaultIloTrimRegValue = CY_SYS_CLK_ILO_TRIM_DEFAULT_VALUE;
  30:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!CY_IP_CPUSS)) */
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 2


  31:Generated_Source\PSoC4/CyLFClk.c **** 
  32:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
  33:Generated_Source\PSoC4/CyLFClk.c ****     /* CySysClkLfclkPosedgeCatch() / CySysClkLfclkPosedgeRestore() */
  34:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 lfclkPosedgeWdtCounter0Enabled = 0u;
  35:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 lfclkPosedgeWdtCounter0Mode    = CY_SYS_WDT_MODE_NONE;
  36:Generated_Source\PSoC4/CyLFClk.c **** 
  37:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 disableServicedIsr = 0uL;
  38:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 wdtIsrMask = CY_SYS_WDT_COUNTER0_INT |\
  39:Generated_Source\PSoC4/CyLFClk.c ****                                         CY_SYS_WDT_COUNTER1_INT |\
  40:Generated_Source\PSoC4/CyLFClk.c ****                                         CY_SYS_WDT_COUNTER2_INT;
  41:Generated_Source\PSoC4/CyLFClk.c **** 
  42:Generated_Source\PSoC4/CyLFClk.c ****     static const uint32 counterIntMaskTbl[CY_WDT_NUM_OF_WDT] = {CY_SYS_WDT_COUNTER0_INT,
  43:Generated_Source\PSoC4/CyLFClk.c ****                                                                 CY_SYS_WDT_COUNTER1_INT,
  44:Generated_Source\PSoC4/CyLFClk.c ****                                                                 CY_SYS_WDT_COUNTER2_INT};
  45:Generated_Source\PSoC4/CyLFClk.c **** 
  46:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeCatch(void);
  47:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeRestore(void);
  48:Generated_Source\PSoC4/CyLFClk.c **** 
  49:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysWdtLocked(void);
  50:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkIloEnabled(void);
  51:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
  52:Generated_Source\PSoC4/CyLFClk.c **** 
  53:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN)
  54:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetTimerSource(void);
  55:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 disableTimerServicedIsr = 0uL;
  56:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 timerIsrMask = CY_SYS_TIMER0_INT |\
  57:Generated_Source\PSoC4/CyLFClk.c ****                                           CY_SYS_TIMER1_INT |\
  58:Generated_Source\PSoC4/CyLFClk.c ****                                           CY_SYS_TIMER2_INT;
  59:Generated_Source\PSoC4/CyLFClk.c **** 
  60:Generated_Source\PSoC4/CyLFClk.c ****     static const uint32 counterTimerIntMaskTbl[CY_SYS_NUM_OF_TIMERS] = {CY_SYS_TIMER0_INT,
  61:Generated_Source\PSoC4/CyLFClk.c ****                                                                         CY_SYS_TIMER1_INT,
  62:Generated_Source\PSoC4/CyLFClk.c ****                                                                         CY_SYS_TIMER2_INT};
  63:Generated_Source\PSoC4/CyLFClk.c **** 
  64:Generated_Source\PSoC4/CyLFClk.c ****     static cyTimerCallback cySysTimerCallback[CY_SYS_NUM_OF_TIMERS] = {(void *)0, (void *)0, (void 
  65:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_DWT_EN) */
  66:Generated_Source\PSoC4/CyLFClk.c **** 
  67:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
  68:Generated_Source\PSoC4/CyLFClk.c ****     static cyWdtCallback cySysWdtCallback[CY_WDT_NUM_OF_WDT] = {(void *)0, (void *)0, (void *)0};
  69:Generated_Source\PSoC4/CyLFClk.c **** #else
  70:Generated_Source\PSoC4/CyLFClk.c ****     static cyWdtCallback cySysWdtCallback = (void *)0;
  71:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
  72:Generated_Source\PSoC4/CyLFClk.c **** 
  73:Generated_Source\PSoC4/CyLFClk.c **** 
  74:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
  75:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStart
  76:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
  77:Generated_Source\PSoC4/CyLFClk.c **** * \brief
  78:Generated_Source\PSoC4/CyLFClk.c **** *  Enables ILO.
  79:Generated_Source\PSoC4/CyLFClk.c **** *
  80:Generated_Source\PSoC4/CyLFClk.c **** *  Refer to the device datasheet for the ILO startup time.
  81:Generated_Source\PSoC4/CyLFClk.c **** *
  82:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
  83:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStart(void)
  84:Generated_Source\PSoC4/CyLFClk.c **** {
  28              		.loc 1 84 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 3


  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  85:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_ILO_CONFIG_REG |= CY_SYS_CLK_ILO_CONFIG_ENABLE;
  33              		.loc 1 85 0
  34 0000 034A     		ldr	r2, .L2
  35 0002 1368     		ldr	r3, [r2]
  36 0004 8021     		movs	r1, #128
  37 0006 0906     		lsls	r1, r1, #24
  38 0008 0B43     		orrs	r3, r1
  39 000a 1360     		str	r3, [r2]
  86:Generated_Source\PSoC4/CyLFClk.c **** }
  40              		.loc 1 86 0
  41              		@ sp needed
  42 000c 7047     		bx	lr
  43              	.L3:
  44 000e C046     		.align	2
  45              	.L2:
  46 0010 2C000340 		.word	1073938476
  47              		.cfi_endproc
  48              	.LFE0:
  49              		.size	CySysClkIloStart, .-CySysClkIloStart
  50              		.section	.text.CySysClkIloStop,"ax",%progbits
  51              		.align	2
  52              		.global	CySysClkIloStop
  53              		.code	16
  54              		.thumb_func
  55              		.type	CySysClkIloStop, %function
  56              	CySysClkIloStop:
  57              	.LFB1:
  87:Generated_Source\PSoC4/CyLFClk.c **** 
  88:Generated_Source\PSoC4/CyLFClk.c **** 
  89:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
  90:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStop
  91:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
  92:Generated_Source\PSoC4/CyLFClk.c **** * \brief
  93:Generated_Source\PSoC4/CyLFClk.c **** *  Disables the ILO.
  94:Generated_Source\PSoC4/CyLFClk.c **** *
  95:Generated_Source\PSoC4/CyLFClk.c **** *  This function has no effect if WDT is locked (CySysWdtLock() is
  96:Generated_Source\PSoC4/CyLFClk.c **** *  called). Call CySysWdtUnlock() to unlock WDT and stop ILO.
  97:Generated_Source\PSoC4/CyLFClk.c **** *
  98:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4100 / PSoC 4200: Note that ILO is required for WDT's operation.
  99:Generated_Source\PSoC4/CyLFClk.c **** *
 100:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L / PSoC 4100M / 
 101:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4200M:
 102:Generated_Source\PSoC4/CyLFClk.c **** *  Stopping ILO affects the peripheral clocked by LFCLK, if
 103:Generated_Source\PSoC4/CyLFClk.c **** *  LFCLK is configured to be sourced by ILO.
 104:Generated_Source\PSoC4/CyLFClk.c **** *
 105:Generated_Source\PSoC4/CyLFClk.c **** *  If the ILO is disabled, all blocks run by ILO will stop functioning.
 106:Generated_Source\PSoC4/CyLFClk.c **** *
 107:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 108:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStop(void)
 109:Generated_Source\PSoC4/CyLFClk.c **** {
  58              		.loc 1 109 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 4


 110:Generated_Source\PSoC4/CyLFClk.c ****     #if(CY_IP_SRSSV2)
 111:Generated_Source\PSoC4/CyLFClk.c ****         uint8  interruptState;
 112:Generated_Source\PSoC4/CyLFClk.c **** 
 113:Generated_Source\PSoC4/CyLFClk.c ****         /* Do nothing if WDT is locked or ILO is disabled */
 114:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == CySysWdtLocked())
 115:Generated_Source\PSoC4/CyLFClk.c ****         {
 116:Generated_Source\PSoC4/CyLFClk.c ****             if (0u != CySysClkIloEnabled())
 117:Generated_Source\PSoC4/CyLFClk.c ****             {
 118:Generated_Source\PSoC4/CyLFClk.c **** 
 119:Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_WCO)
 120:Generated_Source\PSoC4/CyLFClk.c ****                 if (CY_SYS_CLK_LFCLK_SRC_ILO == CySysClkGetLfclkSource())
 121:Generated_Source\PSoC4/CyLFClk.c ****                 {
 122:Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_WCO) */
 123:Generated_Source\PSoC4/CyLFClk.c **** 
 124:Generated_Source\PSoC4/CyLFClk.c ****                 interruptState = CyEnterCriticalSection();
 125:Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkLfclkPosedgeCatch();
 126:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_ILO_CONFIG_REG &= (uint32) ( ~(uint32)CY_SYS_CLK_ILO_CONFIG_ENABLE);
 127:Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkLfclkPosedgeRestore();
 128:Generated_Source\PSoC4/CyLFClk.c ****                 CyExitCriticalSection(interruptState);
 129:Generated_Source\PSoC4/CyLFClk.c **** 
 130:Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_WCO)
 131:Generated_Source\PSoC4/CyLFClk.c ****                 }
 132:Generated_Source\PSoC4/CyLFClk.c ****                 else /* Safe to disable - shortened pulse does not impact peripheral */
 133:Generated_Source\PSoC4/CyLFClk.c ****                 {
 134:Generated_Source\PSoC4/CyLFClk.c ****                     CY_SYS_CLK_ILO_CONFIG_REG &= (uint32) ( ~(uint32)CY_SYS_CLK_ILO_CONFIG_ENABLE);
 135:Generated_Source\PSoC4/CyLFClk.c ****                 }
 136:Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_WCO) */
 137:Generated_Source\PSoC4/CyLFClk.c **** 
 138:Generated_Source\PSoC4/CyLFClk.c ****             }
 139:Generated_Source\PSoC4/CyLFClk.c ****         }
 140:Generated_Source\PSoC4/CyLFClk.c ****     #else
 141:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_ILO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_ILO_CONFIG_ENABLE);
  63              		.loc 1 141 0
  64 0000 024A     		ldr	r2, .L5
  65 0002 1368     		ldr	r3, [r2]
  66 0004 5B00     		lsls	r3, r3, #1
  67 0006 5B08     		lsrs	r3, r3, #1
  68 0008 1360     		str	r3, [r2]
 142:Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSV2) */
 143:Generated_Source\PSoC4/CyLFClk.c **** }
  69              		.loc 1 143 0
  70              		@ sp needed
  71 000a 7047     		bx	lr
  72              	.L6:
  73              		.align	2
  74              	.L5:
  75 000c 2C000340 		.word	1073938476
  76              		.cfi_endproc
  77              	.LFE1:
  78              		.size	CySysClkIloStop, .-CySysClkIloStop
  79              		.section	.text.CySysClkIloStartMeasurement,"ax",%progbits
  80              		.align	2
  81              		.global	CySysClkIloStartMeasurement
  82              		.code	16
  83              		.thumb_func
  84              		.type	CySysClkIloStartMeasurement, %function
  85              	CySysClkIloStartMeasurement:
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 5


  86              	.LFB2:
 144:Generated_Source\PSoC4/CyLFClk.c **** 
 145:Generated_Source\PSoC4/CyLFClk.c **** 
 146:Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 147:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStartMeasurement
 148:Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 149:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 150:Generated_Source\PSoC4/CyLFClk.c **** * Starts the ILO accuracy measurement.
 151:Generated_Source\PSoC4/CyLFClk.c **** *
 152:Generated_Source\PSoC4/CyLFClk.c **** * This function is non-blocking and needs to be called before using the 
 153:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloTrim() and CySysClkIloCompensate() API.
 154:Generated_Source\PSoC4/CyLFClk.c **** *
 155:Generated_Source\PSoC4/CyLFClk.c **** * This API configures measurement counters to be sourced by SysClk (Counter 1)
 156:Generated_Source\PSoC4/CyLFClk.c **** * and ILO (Counter 2). 
 157:Generated_Source\PSoC4/CyLFClk.c **** *
 158:Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 159:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 160:Generated_Source\PSoC4/CyLFClk.c **** *
 161:Generated_Source\PSoC4/CyLFClk.c **** * In addition, this API stores the factory ILO trim settings on the first call 
 162:Generated_Source\PSoC4/CyLFClk.c **** * after reset. This stored factory setting is used by the 
 163:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloRestoreFactoryTrim() API to restore the ILO factory trim. 
 164:Generated_Source\PSoC4/CyLFClk.c **** * Hence, it is important to call this API before restoring the ILO 
 165:Generated_Source\PSoC4/CyLFClk.c **** * factory trim settings.
 166:Generated_Source\PSoC4/CyLFClk.c **** *
 167:Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 168:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStartMeasurement(void)
 169:Generated_Source\PSoC4/CyLFClk.c **** {
  87              		.loc 1 169 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
 170:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!CY_IP_CPUSS))
 171:Generated_Source\PSoC4/CyLFClk.c ****     static uint8 iloTrimTrig = 0u;
 172:Generated_Source\PSoC4/CyLFClk.c **** 
 173:Generated_Source\PSoC4/CyLFClk.c ****     /* Write default ILO trim value while ILO starting ( Cypress ID 225244 )*/
 174:Generated_Source\PSoC4/CyLFClk.c ****     if (0u == iloTrimTrig)
 175:Generated_Source\PSoC4/CyLFClk.c ****     {
 176:Generated_Source\PSoC4/CyLFClk.c ****         defaultIloTrimRegValue = ((uint8)(CY_SYS_CLK_ILO_TRIM_REG & CY_SYS_CLK_ILO_TRIM_MASK));
 177:Generated_Source\PSoC4/CyLFClk.c ****         iloTrimTrig = 1u;
 178:Generated_Source\PSoC4/CyLFClk.c ****     }
 179:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!CY_IP_CPUSS)) */
 180:Generated_Source\PSoC4/CyLFClk.c **** 
 181:Generated_Source\PSoC4/CyLFClk.c ****     /* Configure measurement counters to source by SysClk (Counter 1) and ILO (Counter 2)*/
 182:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_DFT_REG = (CY_SYS_CLK_DFT_REG & (uint32) ~CY_SYS_CLK_DFT_SELECT_DEFAULT_MASK) |
  92              		.loc 1 182 0
  93 0000 074A     		ldr	r2, .L8
  94 0002 1168     		ldr	r1, [r2]
  95 0004 074B     		ldr	r3, .L8+4
  96 0006 0B40     		ands	r3, r1
  97 0008 8021     		movs	r1, #128
  98 000a 4900     		lsls	r1, r1, #1
  99 000c 0B43     		orrs	r3, r1
 100 000e 1360     		str	r3, [r2]
 183:Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_CLK_SEL_ILO_DFT_SOURCE; 
 184:Generated_Source\PSoC4/CyLFClk.c **** 
 185:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_TST_DDFT_CTRL_REG = (CY_SYS_TST_DDFT_CTRL_REG & (uint32) ~ CY_SYS_TST_DDFT_CTRL_REG_DEFA
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 6


 101              		.loc 1 185 0
 102 0010 054A     		ldr	r2, .L8+8
 103 0012 1168     		ldr	r1, [r2]
 104 0014 054B     		ldr	r3, .L8+12
 105 0016 0B40     		ands	r3, r1
 106 0018 0549     		ldr	r1, .L8+16
 107 001a 0B43     		orrs	r3, r1
 108 001c 1360     		str	r3, [r2]
 186:Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1;
 187:Generated_Source\PSoC4/CyLFClk.c **** }
 109              		.loc 1 187 0
 110              		@ sp needed
 111 001e 7047     		bx	lr
 112              	.L9:
 113              		.align	2
 114              	.L8:
 115 0020 34000340 		.word	1073938484
 116 0024 FFF0FFFF 		.word	-3841
 117 0028 18000340 		.word	1073938456
 118 002c F0F0FFFF 		.word	-3856
 119 0030 08090000 		.word	2312
 120              		.cfi_endproc
 121              	.LFE2:
 122              		.size	CySysClkIloStartMeasurement, .-CySysClkIloStartMeasurement
 123              		.section	.text.CySysClkIloStopMeasurement,"ax",%progbits
 124              		.align	2
 125              		.global	CySysClkIloStopMeasurement
 126              		.code	16
 127              		.thumb_func
 128              		.type	CySysClkIloStopMeasurement, %function
 129              	CySysClkIloStopMeasurement:
 130              	.LFB3:
 188:Generated_Source\PSoC4/CyLFClk.c **** 
 189:Generated_Source\PSoC4/CyLFClk.c **** 
 190:Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 191:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStopMeasurement
 192:Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 193:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 194:Generated_Source\PSoC4/CyLFClk.c **** * Stops the ILO accuracy measurement.
 195:Generated_Source\PSoC4/CyLFClk.c **** *
 196:Generated_Source\PSoC4/CyLFClk.c **** * Calling this function immediately stops the the ILO frequency measurement.
 197:Generated_Source\PSoC4/CyLFClk.c **** * This function should be called before placing the device to deepsleep, if 
 198:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloStartMeasurement() API was called before. 
 199:Generated_Source\PSoC4/CyLFClk.c **** *
 200:Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 201:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStopMeasurement(void)
 202:Generated_Source\PSoC4/CyLFClk.c **** {
 131              		.loc 1 202 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		@ link register save eliminated.
 203:Generated_Source\PSoC4/CyLFClk.c ****     /* Set default configurations in 11...8 DFT register bits to zero */
 204:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_DFT_REG &= ~CY_SYS_CLK_DFT_SELECT_DEFAULT_MASK;
 136              		.loc 1 204 0
 137 0000 054A     		ldr	r2, .L11
 138 0002 1168     		ldr	r1, [r2]
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 7


 139 0004 054B     		ldr	r3, .L11+4
 140 0006 0B40     		ands	r3, r1
 141 0008 1360     		str	r3, [r2]
 205:Generated_Source\PSoC4/CyLFClk.c ****     #if(CY_IP_SRSSLT)
 206:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_TST_DDFT_CTRL_REG &= ((uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 142              		.loc 1 206 0
 143 000a 054A     		ldr	r2, .L11+8
 144 000c 1168     		ldr	r1, [r2]
 145 000e 054B     		ldr	r3, .L11+12
 146 0010 0B40     		ands	r3, r1
 147 0012 1360     		str	r3, [r2]
 207:Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSLT) */
 208:Generated_Source\PSoC4/CyLFClk.c **** }
 148              		.loc 1 208 0
 149              		@ sp needed
 150 0014 7047     		bx	lr
 151              	.L12:
 152 0016 C046     		.align	2
 153              	.L11:
 154 0018 34000340 		.word	1073938484
 155 001c FFF0FFFF 		.word	-3841
 156 0020 18000340 		.word	1073938456
 157 0024 0F0F0000 		.word	3855
 158              		.cfi_endproc
 159              	.LFE3:
 160              		.size	CySysClkIloStopMeasurement, .-CySysClkIloStopMeasurement
 161              		.global	__aeabi_uidiv
 162              		.section	.text.CySysClkIloCompensate,"ax",%progbits
 163              		.align	2
 164              		.global	CySysClkIloCompensate
 165              		.code	16
 166              		.thumb_func
 167              		.type	CySysClkIloCompensate, %function
 168              	CySysClkIloCompensate:
 169              	.LFB4:
 209:Generated_Source\PSoC4/CyLFClk.c **** 
 210:Generated_Source\PSoC4/CyLFClk.c **** 
 211:Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 212:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloCompensate
 213:Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 214:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 215:Generated_Source\PSoC4/CyLFClk.c **** * This API measures the current ILO accuracy.
 216:Generated_Source\PSoC4/CyLFClk.c **** *
 217:Generated_Source\PSoC4/CyLFClk.c **** * Basing on the measured frequency the required number of ILO cycles for a 
 218:Generated_Source\PSoC4/CyLFClk.c **** * given delay (in microseconds) is obtained. The desired delay that needs to 
 219:Generated_Source\PSoC4/CyLFClk.c **** * be compensated is passed through the desiredDelay parameter. The compensated 
 220:Generated_Source\PSoC4/CyLFClk.c **** * cycle count is returned through the compesatedCycles pointer.
 221:Generated_Source\PSoC4/CyLFClk.c **** * The compensated ILO cycles can then be used to define the WDT period value, 
 222:Generated_Source\PSoC4/CyLFClk.c **** * effectively compensating for the ILO inaccuracy and allowing a more 
 223:Generated_Source\PSoC4/CyLFClk.c **** * accurate WDT interrupt generation.
 224:Generated_Source\PSoC4/CyLFClk.c **** *
 225:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloStartMeasurement() API should be called prior to calling this API. 
 226:Generated_Source\PSoC4/CyLFClk.c **** *
 227:Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 228:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 229:Generated_Source\PSoC4/CyLFClk.c **** *
 230:Generated_Source\PSoC4/CyLFClk.c **** * \note If the System clock frequency is changed in runtime, the CyDelayFreq() 
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 8


 231:Generated_Source\PSoC4/CyLFClk.c **** * with the appropriate parameter (Frequency of bus clock in Hertz) should be 
 232:Generated_Source\PSoC4/CyLFClk.c **** * called before calling a next CySysClkIloCompensate().
 233:Generated_Source\PSoC4/CyLFClk.c **** *
 234:Generated_Source\PSoC4/CyLFClk.c **** * \warning Do not enter deep sleep mode until the function returns CYRET_SUCCESS.
 235:Generated_Source\PSoC4/CyLFClk.c **** *
 236:Generated_Source\PSoC4/CyLFClk.c **** * \param desiredDelay Required delay in microseconds.
 237:Generated_Source\PSoC4/CyLFClk.c **** *
 238:Generated_Source\PSoC4/CyLFClk.c **** * \param *compensatedCycles The pointer to the variable in which the required
 239:Generated_Source\PSoC4/CyLFClk.c **** * number of ILO cycles for the given delay will be returned.
 240:Generated_Source\PSoC4/CyLFClk.c **** *
 241:Generated_Source\PSoC4/CyLFClk.c **** * \details
 242:Generated_Source\PSoC4/CyLFClk.c **** * The value returned in *compensatedCycles pointer is not valid until the 
 243:Generated_Source\PSoC4/CyLFClk.c **** * function returns CYRET_SUCCESS.
 244:Generated_Source\PSoC4/CyLFClk.c **** *
 245:Generated_Source\PSoC4/CyLFClk.c **** * The desiredDelay parameter value should be in next range: <br>From 100 to 
 246:Generated_Source\PSoC4/CyLFClk.c **** * 2 000 000 microseconds for PSoC 4000 / PSoC 4000S / PSoC 4100S / PSoC Analog 
 247:Generated_Source\PSoC4/CyLFClk.c **** * Coprocessor devices.<br>From 100 to 4 000 000 000 microseconds for 
 248:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4100 / PSoC 4200 / PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE /
 249:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4200L / PSoC 4100M /PSoC 4200M devices.
 250:Generated_Source\PSoC4/CyLFClk.c **** *
 251:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - The compensation process is complete and the 
 252:Generated_Source\PSoC4/CyLFClk.c **** * compensated cycles value is returned in the compensatedCycles pointer.
 253:Generated_Source\PSoC4/CyLFClk.c **** *
 254:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_STARTED - Indicates measurement is in progress. It is 
 255:Generated_Source\PSoC4/CyLFClk.c **** * strongly recommended to do not make pauses between API calling. The 
 256:Generated_Source\PSoC4/CyLFClk.c **** * function should be called repeatedly until the API returns CYRET_SUCCESS.
 257:Generated_Source\PSoC4/CyLFClk.c **** *
 258:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates that measurement not started. 
 259:Generated_Source\PSoC4/CyLFClk.c **** * The user should call CySysClkIloStartMeasurement() API before calling 
 260:Generated_Source\PSoC4/CyLFClk.c **** * this API.
 261:Generated_Source\PSoC4/CyLFClk.c **** *
 262:Generated_Source\PSoC4/CyLFClk.c **** * \note For a correct WDT or DeepSleep Timers functioning with ILO compensating 
 263:Generated_Source\PSoC4/CyLFClk.c **** * the CySysClkIloCompensate() should be called before WDT or DeepSleep Timers 
 264:Generated_Source\PSoC4/CyLFClk.c **** * enabling.
 265:Generated_Source\PSoC4/CyLFClk.c **** *
 266:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 267:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloCompensate(uint32 desiredDelay , uint32* compensatedCycles)
 268:Generated_Source\PSoC4/CyLFClk.c **** {
 170              		.loc 1 268 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              	.LVL0:
 175 0000 70B5     		push	{r4, r5, r6, lr}
 176              		.cfi_def_cfa_offset 16
 177              		.cfi_offset 4, -16
 178              		.cfi_offset 5, -12
 179              		.cfi_offset 6, -8
 180              		.cfi_offset 14, -4
 181 0002 0C00     		movs	r4, r1
 269:Generated_Source\PSoC4/CyLFClk.c ****     uint32 iloCompensatedCycles;
 270:Generated_Source\PSoC4/CyLFClk.c ****     uint32 desiredDelayInCounts;
 271:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 272:Generated_Source\PSoC4/CyLFClk.c ****     uint32 checkStatus;
 273:Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus;
 274:Generated_Source\PSoC4/CyLFClk.c **** 
 275:Generated_Source\PSoC4/CyLFClk.c ****     checkStatus = (uint32) (CY_SYS_CLK_DFT_REG & (uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 9


 182              		.loc 1 275 0
 183 0004 334B     		ldr	r3, .L25
 184 0006 1A68     		ldr	r2, [r3]
 185 0008 334B     		ldr	r3, .L25+4
 186 000a 1340     		ands	r3, r2
 187              	.LVL1:
 276:Generated_Source\PSoC4/CyLFClk.c **** 
 277:Generated_Source\PSoC4/CyLFClk.c ****     /* Check if CySysStartMeasurement was called before */
 278:Generated_Source\PSoC4/CyLFClk.c ****     if((checkStatus == CY_SYS_CLK_SEL_ILO_DFT_SOURCE) && 
 188              		.loc 1 278 0
 189 000c 8022     		movs	r2, #128
 190 000e 5200     		lsls	r2, r2, #1
 191 0010 9342     		cmp	r3, r2
 192 0012 50D1     		bne	.L18
 279:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 193              		.loc 1 279 0 discriminator 1
 194 0014 314B     		ldr	r3, .L25+8
 195              	.LVL2:
 196 0016 1A68     		ldr	r2, [r3]
 278:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 197              		.loc 1 278 0 discriminator 1
 198 0018 314B     		ldr	r3, .L25+12
 199 001a 9A42     		cmp	r2, r3
 200 001c 4DD1     		bne	.L19
 201              		.loc 1 279 0
 202 001e 314B     		ldr	r3, .L25+16
 203 0020 9842     		cmp	r0, r3
 204 0022 4CD8     		bhi	.L20
 280:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_CLK_MAX_DELAY_US >= desiredDelay) &&
 205              		.loc 1 280 0
 206 0024 6328     		cmp	r0, #99
 207 0026 4CD9     		bls	.L21
 281:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_CLK_MIN_DELAY_US <= desiredDelay) &&
 208              		.loc 1 281 0
 209 0028 0029     		cmp	r1, #0
 210 002a 4CD0     		beq	.L22
 282:Generated_Source\PSoC4/CyLFClk.c ****        (compensatedCycles !=  NULL))
 283:Generated_Source\PSoC4/CyLFClk.c ****     {
 284:Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_TRIM_OR_COMP_FINISHED != compensateRunningStatus)
 211              		.loc 1 284 0
 212 002c 2E4B     		ldr	r3, .L25+20
 213 002e 1B68     		ldr	r3, [r3]
 214 0030 002B     		cmp	r3, #0
 215 0032 36D0     		beq	.L15
 285:Generated_Source\PSoC4/CyLFClk.c ****         {
 286:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait until counter 1 stopped counting and after it calculate compensated cycles */
 287:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 216              		.loc 1 287 0
 217 0034 2D4B     		ldr	r3, .L25+24
 218 0036 1B68     		ldr	r3, [r3]
 219 0038 002B     		cmp	r3, #0
 220 003a 46DA     		bge	.L23
 288:Generated_Source\PSoC4/CyLFClk.c ****             {
 289:Generated_Source\PSoC4/CyLFClk.c ****                 if (0u != CY_SYS_CNT_REG2_REG)
 221              		.loc 1 289 0
 222 003c 2C4B     		ldr	r3, .L25+28
 223 003e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 10


 224 0040 002B     		cmp	r3, #0
 225 0042 44D0     		beq	.L24
 290:Generated_Source\PSoC4/CyLFClk.c ****                 {
 291:Generated_Source\PSoC4/CyLFClk.c ****                     /* Calculate required number of ILO cycles for given delay */
 292:Generated_Source\PSoC4/CyLFClk.c ****                     #if(CY_IP_SRSSV2)
 293:Generated_Source\PSoC4/CyLFClk.c ****                         if (CY_SYS_CLK_DELAY_COUNTS_LIMIT < desiredDelay)
 294:Generated_Source\PSoC4/CyLFClk.c ****                         {
 295:Generated_Source\PSoC4/CyLFClk.c ****                             desiredDelayInCounts = (desiredDelay / CY_SYS_CLK_ILO_PERIOD);
 296:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = 
 297:Generated_Source\PSoC4/CyLFClk.c ****                             (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydelayFreqHz >> CY_SYS_CLK_
 298:Generated_Source\PSoC4/CyLFClk.c ****                                 CY_SYS_CLK_ILO_FREQ_2MSB) * (desiredDelayInCounts / CY_SYS_CLK_ILO_
 299:Generated_Source\PSoC4/CyLFClk.c ****                         }
 300:Generated_Source\PSoC4/CyLFClk.c ****                         else
 301:Generated_Source\PSoC4/CyLFClk.c ****                         {
 302:Generated_Source\PSoC4/CyLFClk.c ****                             desiredDelayInCounts = ((desiredDelay * CY_SYS_CLK_COEF_PHUNDRED) + 
 303:Generated_Source\PSoC4/CyLFClk.c ****                                                      CY_SYS_CLK_HALF_OF_CLOCK) / CY_SYS_CLK_ILO_PER
 304:Generated_Source\PSoC4/CyLFClk.c **** 
 305:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / 
 306:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 307:Generated_Source\PSoC4/CyLFClk.c ****                                                      desiredDelayInCounts) / CY_SYS_CLK_ILO_DESIRED
 308:Generated_Source\PSoC4/CyLFClk.c ****                         }
 309:Generated_Source\PSoC4/CyLFClk.c ****                     #else /* (CY_IP_SRSSLT) */
 310:Generated_Source\PSoC4/CyLFClk.c ****                         desiredDelayInCounts = ((desiredDelay * CY_SYS_CLK_COEF_PHUNDRED) + CY_SYS_
 226              		.loc 1 310 0
 227 0044 6425     		movs	r5, #100
 228 0046 6843     		muls	r0, r5
 229              	.LVL3:
 230 0048 2A4B     		ldr	r3, .L25+32
 231 004a C518     		adds	r5, r0, r3
 232 004c 2A49     		ldr	r1, .L25+36
 233              	.LVL4:
 234 004e 2800     		movs	r0, r5
 235 0050 FFF7FEFF 		bl	__aeabi_uidiv
 236              	.LVL5:
 237 0054 0600     		movs	r6, r0
 238              	.LVL6:
 311:Generated_Source\PSoC4/CyLFClk.c ****                                                                                            CY_SYS_C
 312:Generated_Source\PSoC4/CyLFClk.c ****                         if(CY_SYS_CLK_MAX_LITE_NUMBER < desiredDelayInCounts)
 239              		.loc 1 312 0
 240 0056 294B     		ldr	r3, .L25+40
 241 0058 9842     		cmp	r0, r3
 242 005a 11D9     		bls	.L16
 313:Generated_Source\PSoC4/CyLFClk.c ****                         {
 314:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydel
 243              		.loc 1 314 0
 244 005c 244B     		ldr	r3, .L25+28
 245 005e 1868     		ldr	r0, [r3]
 246              	.LVL7:
 247 0060 274B     		ldr	r3, .L25+44
 248 0062 1968     		ldr	r1, [r3]
 249 0064 4843     		muls	r0, r1
 250 0066 890A     		lsrs	r1, r1, #10
 251 0068 FFF7FEFF 		bl	__aeabi_uidiv
 252              	.LVL8:
 315:Generated_Source\PSoC4/CyLFClk.c ****                                                    CY_SYS_CLK_SYS_CLK_DEVIDER)) / CY_SYS_CLK_ILO_FR
 253              		.loc 1 315 0
 254 006c 2821     		movs	r1, #40
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 11


 255 006e FFF7FEFF 		bl	__aeabi_uidiv
 256              	.LVL9:
 257 0072 0600     		movs	r6, r0
 258              	.LVL10:
 316:Generated_Source\PSoC4/CyLFClk.c ****                                                    (desiredDelayInCounts / CY_SYS_CLK_ILO_FREQ_3LSB
 259              		.loc 1 316 0
 260 0074 2349     		ldr	r1, .L25+48
 261 0076 2800     		movs	r0, r5
 262 0078 FFF7FEFF 		bl	__aeabi_uidiv
 263              	.LVL11:
 314:Generated_Source\PSoC4/CyLFClk.c ****                                                    CY_SYS_CLK_SYS_CLK_DEVIDER)) / CY_SYS_CLK_ILO_FR
 264              		.loc 1 314 0
 265 007c 7043     		muls	r0, r6
 266              	.LVL12:
 267 007e 0BE0     		b	.L17
 268              	.LVL13:
 269              	.L16:
 317:Generated_Source\PSoC4/CyLFClk.c ****                         }
 318:Generated_Source\PSoC4/CyLFClk.c ****                         else
 319:Generated_Source\PSoC4/CyLFClk.c ****                         {
 320:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / 
 270              		.loc 1 320 0
 271 0080 1B4B     		ldr	r3, .L25+28
 272 0082 1868     		ldr	r0, [r3]
 273              	.LVL14:
 274 0084 1E4B     		ldr	r3, .L25+44
 275 0086 1968     		ldr	r1, [r3]
 276 0088 4843     		muls	r0, r1
 321:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 277              		.loc 1 321 0
 278 008a 890A     		lsrs	r1, r1, #10
 320:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 279              		.loc 1 320 0
 280 008c FFF7FEFF 		bl	__aeabi_uidiv
 281              	.LVL15:
 282              		.loc 1 321 0
 283 0090 7043     		muls	r0, r6
 320:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 284              		.loc 1 320 0
 285 0092 1D49     		ldr	r1, .L25+52
 286 0094 FFF7FEFF 		bl	__aeabi_uidiv
 287              	.LVL16:
 288              	.L17:
 322:Generated_Source\PSoC4/CyLFClk.c ****                                                      desiredDelayInCounts) / CY_SYS_CLK_ILO_DESIRED
 323:Generated_Source\PSoC4/CyLFClk.c ****                         }
 324:Generated_Source\PSoC4/CyLFClk.c ****                     #endif /* (CY_IP_SRSSV2) */
 325:Generated_Source\PSoC4/CyLFClk.c **** 
 326:Generated_Source\PSoC4/CyLFClk.c ****                     *compensatedCycles = iloCompensatedCycles;
 289              		.loc 1 326 0
 290 0098 2060     		str	r0, [r4]
 327:Generated_Source\PSoC4/CyLFClk.c ****                     compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 291              		.loc 1 327 0
 292 009a 0020     		movs	r0, #0
 293              	.LVL17:
 294 009c 124B     		ldr	r3, .L25+20
 295 009e 1860     		str	r0, [r3]
 296              	.LVL18:
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 12


 297 00a0 16E0     		b	.L14
 298              	.LVL19:
 299              	.L15:
 328:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_SUCCESS;
 329:Generated_Source\PSoC4/CyLFClk.c ****                 }
 330:Generated_Source\PSoC4/CyLFClk.c ****                 else
 331:Generated_Source\PSoC4/CyLFClk.c ****                 {
 332:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus  = CYRET_INVALID_STATE;
 333:Generated_Source\PSoC4/CyLFClk.c ****                 }
 334:Generated_Source\PSoC4/CyLFClk.c ****             }
 335:Generated_Source\PSoC4/CyLFClk.c ****             else
 336:Generated_Source\PSoC4/CyLFClk.c ****             {
 337:Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_STARTED;
 338:Generated_Source\PSoC4/CyLFClk.c ****             }
 339:Generated_Source\PSoC4/CyLFClk.c ****         }
 340:Generated_Source\PSoC4/CyLFClk.c ****         else
 341:Generated_Source\PSoC4/CyLFClk.c ****         {
 342:Generated_Source\PSoC4/CyLFClk.c ****             /* Reload CNTR 1 count value for next measurement cycle*/
 343:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CNT_REG1_REG = (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER);
 300              		.loc 1 343 0
 301 00a2 174B     		ldr	r3, .L25+44
 302 00a4 1B68     		ldr	r3, [r3]
 303 00a6 9B0A     		lsrs	r3, r3, #10
 304 00a8 104A     		ldr	r2, .L25+24
 305 00aa 1360     		str	r3, [r2]
 344:Generated_Source\PSoC4/CyLFClk.c ****             compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_STARTED;
 306              		.loc 1 344 0
 307 00ac 0122     		movs	r2, #1
 308 00ae 0E4B     		ldr	r3, .L25+20
 309 00b0 1A60     		str	r2, [r3]
 310              	.LVL20:
 345:Generated_Source\PSoC4/CyLFClk.c ****             returnStatus = CYRET_STARTED;
 311              		.loc 1 345 0
 312 00b2 0720     		movs	r0, #7
 313              	.LVL21:
 314 00b4 0CE0     		b	.L14
 315              	.LVL22:
 316              	.L18:
 346:Generated_Source\PSoC4/CyLFClk.c ****         }
 347:Generated_Source\PSoC4/CyLFClk.c ****     }
 348:Generated_Source\PSoC4/CyLFClk.c ****     else
 349:Generated_Source\PSoC4/CyLFClk.c ****     {
 350:Generated_Source\PSoC4/CyLFClk.c ****         returnStatus = CYRET_INVALID_STATE;
 317              		.loc 1 350 0
 318 00b6 1120     		movs	r0, #17
 319              	.LVL23:
 320 00b8 0AE0     		b	.L14
 321              	.LVL24:
 322              	.L19:
 323 00ba 1120     		movs	r0, #17
 324              	.LVL25:
 325 00bc 08E0     		b	.L14
 326              	.LVL26:
 327              	.L20:
 328 00be 1120     		movs	r0, #17
 329              	.LVL27:
 330 00c0 06E0     		b	.L14
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 13


 331              	.LVL28:
 332              	.L21:
 333 00c2 1120     		movs	r0, #17
 334              	.LVL29:
 335 00c4 04E0     		b	.L14
 336              	.LVL30:
 337              	.L22:
 338 00c6 1120     		movs	r0, #17
 339              	.LVL31:
 340 00c8 02E0     		b	.L14
 341              	.LVL32:
 342              	.L23:
 337:Generated_Source\PSoC4/CyLFClk.c ****             }
 343              		.loc 1 337 0
 344 00ca 0720     		movs	r0, #7
 345              	.LVL33:
 346 00cc 00E0     		b	.L14
 347              	.LVL34:
 348              	.L24:
 332:Generated_Source\PSoC4/CyLFClk.c ****                 }
 349              		.loc 1 332 0
 350 00ce 1120     		movs	r0, #17
 351              	.LVL35:
 352              	.L14:
 351:Generated_Source\PSoC4/CyLFClk.c ****     }
 352:Generated_Source\PSoC4/CyLFClk.c **** 
 353:Generated_Source\PSoC4/CyLFClk.c ****     return (returnStatus);
 354:Generated_Source\PSoC4/CyLFClk.c **** }
 353              		.loc 1 354 0
 354              		@ sp needed
 355              	.LVL36:
 356 00d0 70BD     		pop	{r4, r5, r6, pc}
 357              	.L26:
 358 00d2 C046     		.align	2
 359              	.L25:
 360 00d4 34000340 		.word	1073938484
 361 00d8 0F0F0000 		.word	3855
 362 00dc 18000340 		.word	1073938456
 363 00e0 08090000 		.word	2312
 364 00e4 80841E00 		.word	2000000
 365 00e8 00000000 		.word	.LANCHOR0
 366 00ec 1C000340 		.word	1073938460
 367 00f0 20000340 		.word	1073938464
 368 00f4 71020000 		.word	625
 369 00f8 C4090000 		.word	2500
 370 00fc 60D10000 		.word	53600
 371 0100 00000000 		.word	cydelayFreqHz
 372 0104 A0252600 		.word	2500000
 373 0108 409C0000 		.word	40000
 374              		.cfi_endproc
 375              	.LFE4:
 376              		.size	CySysClkIloCompensate, .-CySysClkIloCompensate
 377              		.section	.text.CySysWdtGetEnabledStatus,"ax",%progbits
 378              		.align	2
 379              		.global	CySysWdtGetEnabledStatus
 380              		.code	16
 381              		.thumb_func
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 14


 382              		.type	CySysWdtGetEnabledStatus, %function
 383              	CySysWdtGetEnabledStatus:
 384              	.LFB5:
 355:Generated_Source\PSoC4/CyLFClk.c **** 
 356:Generated_Source\PSoC4/CyLFClk.c **** 
 357:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
 358:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 359:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkIloEnabled
 360:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 361:Generated_Source\PSoC4/CyLFClk.c ****     *
 362:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
 363:Generated_Source\PSoC4/CyLFClk.c ****     * Reports the ILO enable state.
 364:Generated_Source\PSoC4/CyLFClk.c ****     *
 365:Generated_Source\PSoC4/CyLFClk.c ****     * \return
 366:Generated_Source\PSoC4/CyLFClk.c ****     * 1 if ILO is enabled, and 0 if ILO is disabled.
 367:Generated_Source\PSoC4/CyLFClk.c ****     *
 368:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 369:Generated_Source\PSoC4/CyLFClk.c ****     ********************************************************************************/
 370:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkIloEnabled(void)
 371:Generated_Source\PSoC4/CyLFClk.c ****     {
 372:Generated_Source\PSoC4/CyLFClk.c ****         /* Prohibits writing to WDT registers and ILO/WCO registers when not equal to 0 */
 373:Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_ILO_CONFIG_REG & (uint32)(CY_SYS_CLK_ILO_CONFIG_ENABLE))) ?
 374:Generated_Source\PSoC4/CyLFClk.c ****             (uint32) 1u :
 375:Generated_Source\PSoC4/CyLFClk.c ****             (uint32) 0u);
 376:Generated_Source\PSoC4/CyLFClk.c ****     }
 377:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
 378:Generated_Source\PSoC4/CyLFClk.c **** 
 379:Generated_Source\PSoC4/CyLFClk.c **** 
 380:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!CY_IP_CPUSS))
 381:Generated_Source\PSoC4/CyLFClk.c **** /********************************************************************************
 382:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloTrim
 383:Generated_Source\PSoC4/CyLFClk.c **** *****************************************************************************//**
 384:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 385:Generated_Source\PSoC4/CyLFClk.c **** * The API trims the ILO frequency to +/- 10% accuracy range using accurate 
 386:Generated_Source\PSoC4/CyLFClk.c **** * SysClk.
 387:Generated_Source\PSoC4/CyLFClk.c **** *
 388:Generated_Source\PSoC4/CyLFClk.c **** * The API can be blocking or non-blocking depending on the value of the mode 
 389:Generated_Source\PSoC4/CyLFClk.c **** * parameter passed. The accuracy of ILO after trimming in parts per thousand 
 390:Generated_Source\PSoC4/CyLFClk.c **** * is returned through the iloAccuracyInPPT pointer. A positive number indicates 
 391:Generated_Source\PSoC4/CyLFClk.c **** * that the ILO is running fast and a negative number indicates that the ILO is 
 392:Generated_Source\PSoC4/CyLFClk.c **** * running slowly. This error is relative to the error in the reference clock 
 393:Generated_Source\PSoC4/CyLFClk.c **** * (SysClk), so the absolute error will be higher and depends on the accuracy 
 394:Generated_Source\PSoC4/CyLFClk.c **** * of the reference.
 395:Generated_Source\PSoC4/CyLFClk.c **** *
 396:Generated_Source\PSoC4/CyLFClk.c **** * The CySysClkIloStartMeasurement() API should be called prior to calling this 
 397:Generated_Source\PSoC4/CyLFClk.c **** * API. Otherwise it will return CYRET_INVALID_STATE as the measurement was not 
 398:Generated_Source\PSoC4/CyLFClk.c **** * started.
 399:Generated_Source\PSoC4/CyLFClk.c **** *
 400:Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 401:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 402:Generated_Source\PSoC4/CyLFClk.c **** *
 403:Generated_Source\PSoC4/CyLFClk.c **** * \note If System clock frequency is changed in runtime, the CyDelayFreq() 
 404:Generated_Source\PSoC4/CyLFClk.c **** * with the appropriate parameter (Frequency of bus clock in Hertz) should be 
 405:Generated_Source\PSoC4/CyLFClk.c **** * called before next CySysClkIloCompensate() usage.
 406:Generated_Source\PSoC4/CyLFClk.c **** *
 407:Generated_Source\PSoC4/CyLFClk.c **** * \warning Do not enter deep sleep mode until the function returns CYRET_SUCCESS
 408:Generated_Source\PSoC4/CyLFClk.c **** * or CYRET_TIMEOUT.
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 15


 409:Generated_Source\PSoC4/CyLFClk.c **** *
 410:Generated_Source\PSoC4/CyLFClk.c **** * Available for all PSoC 4 devices with ILO trim capability. This excludes 
 411:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4000 / PSoC 4100 / PSoC 4200 / PSoC 4000S / PSoC 4100S / PSoC
 412:Generated_Source\PSoC4/CyLFClk.c **** * Analog Coprocessor devices.
 413:Generated_Source\PSoC4/CyLFClk.c **** *
 414:Generated_Source\PSoC4/CyLFClk.c **** * \param mode
 415:Generated_Source\PSoC4/CyLFClk.c **** *  CY_SYS_CLK_BLOCKING -  The function does not return until the ILO is 
 416:Generated_Source\PSoC4/CyLFClk.c **** * within +/-10% accuracy range or time out has occurred.<br>
 417:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_NON_BLOCKING - The function returns immediately after 
 418:Generated_Source\PSoC4/CyLFClk.c **** * performing a single iteration of the trim process. The function should be 
 419:Generated_Source\PSoC4/CyLFClk.c **** * called repeatedly until the trimming is completed successfully.
 420:Generated_Source\PSoC4/CyLFClk.c **** *
 421:Generated_Source\PSoC4/CyLFClk.c **** * \param *iloAccuracyInPPT Pointer to an integer in which the trimmed ILO 
 422:Generated_Source\PSoC4/CyLFClk.c **** * accuracy will be returned.
 423:Generated_Source\PSoC4/CyLFClk.c **** *
 424:Generated_Source\PSoC4/CyLFClk.c **** * \details The value returned in *iloAccuracyInPPT pointer is not valid 
 425:Generated_Source\PSoC4/CyLFClk.c **** * until the function returns CYRET_SUCCESS. ILO accuracy in PPT is given by:
 426:Generated_Source\PSoC4/CyLFClk.c **** *
 427:Generated_Source\PSoC4/CyLFClk.c **** * IloAccuracyInPPT = ((MeasuredIloFreq - DesiredIloFreq) * 
 428:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_PERTHOUSAND) / DesiredIloFreq);
 429:Generated_Source\PSoC4/CyLFClk.c **** *
 430:Generated_Source\PSoC4/CyLFClk.c **** * DesiredIloFreq  = 32000, CY_SYS_CLK_PERTHOUSAND = 1000;
 431:Generated_Source\PSoC4/CyLFClk.c **** *
 432:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Indicates trimming is complete. This value indicates 
 433:Generated_Source\PSoC4/CyLFClk.c **** * trimming is successful and iloAccuracyInPPT is within +/- 10%.
 434:Generated_Source\PSoC4/CyLFClk.c **** *
 435:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_STARTED - Indicates measurement is in progress. This is applicable 
 436:Generated_Source\PSoC4/CyLFClk.c **** * only for non-blocking mode.
 437:Generated_Source\PSoC4/CyLFClk.c **** *
 438:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates trimming was unsuccessful. You should 
 439:Generated_Source\PSoC4/CyLFClk.c **** * call CySysClkIloStartMeasurement() before calling this API.
 440:Generated_Source\PSoC4/CyLFClk.c **** *
 441:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_TIMEOUT - Indicates trimming was unsuccessful. This is applicable 
 442:Generated_Source\PSoC4/CyLFClk.c **** * only for blocking mode. Timeout means the trimming was tried 5 times without 
 443:Generated_Source\PSoC4/CyLFClk.c **** * success (i.e. ILO accuracy > +/- 10%). The user can call the API again for 
 444:Generated_Source\PSoC4/CyLFClk.c **** * another try or wait for some time before calling it again (to let the system 
 445:Generated_Source\PSoC4/CyLFClk.c **** * to settle to another operating point change in temperature etc.) and continue 
 446:Generated_Source\PSoC4/CyLFClk.c **** * using the previous trim value till the next call.
 447:Generated_Source\PSoC4/CyLFClk.c **** *
 448:Generated_Source\PSoC4/CyLFClk.c **** **********************************************************************************/
 449:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloTrim(uint32 mode, int32* iloAccuracyInPPT)
 450:Generated_Source\PSoC4/CyLFClk.c **** {
 451:Generated_Source\PSoC4/CyLFClk.c ****     uint32 timeOutClocks = CY_SYS_CLK_TIMEOUT;
 452:Generated_Source\PSoC4/CyLFClk.c ****     uint32 waitUntilCntr1Stops;
 453:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 454:Generated_Source\PSoC4/CyLFClk.c ****     uint32 checkStatus;
 455:Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus;
 456:Generated_Source\PSoC4/CyLFClk.c **** 
 457:Generated_Source\PSoC4/CyLFClk.c ****     checkStatus = (uint32) (CY_SYS_CLK_DFT_REG & (uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 458:Generated_Source\PSoC4/CyLFClk.c **** 
 459:Generated_Source\PSoC4/CyLFClk.c ****     /* Check if DFT and CTRL registers were configures in CySysStartMeasurement*/
 460:Generated_Source\PSoC4/CyLFClk.c ****     if((checkStatus == CY_SYS_CLK_SEL_ILO_DFT_SOURCE) &&
 461:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 462:Generated_Source\PSoC4/CyLFClk.c ****        (iloAccuracyInPPT != NULL))
 463:Generated_Source\PSoC4/CyLFClk.c ****     {
 464:Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_BLOCKING == mode)
 465:Generated_Source\PSoC4/CyLFClk.c ****         {
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 16


 466:Generated_Source\PSoC4/CyLFClk.c ****             waitUntilCntr1Stops = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER;
 467:Generated_Source\PSoC4/CyLFClk.c ****             do
 468:Generated_Source\PSoC4/CyLFClk.c ****             {
 469:Generated_Source\PSoC4/CyLFClk.c ****                 /* Reload CNTR 1 count value for measuring cycle*/
 470:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CNT_REG1_REG = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER; 
 471:Generated_Source\PSoC4/CyLFClk.c **** 
 472:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait until counter CNTR 1 will finish down-counting */
 473:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u == (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 474:Generated_Source\PSoC4/CyLFClk.c ****                 {
 475:Generated_Source\PSoC4/CyLFClk.c ****                     waitUntilCntr1Stops--;
 476:Generated_Source\PSoC4/CyLFClk.c ****                     if (0u == waitUntilCntr1Stops)
 477:Generated_Source\PSoC4/CyLFClk.c ****                     {
 478:Generated_Source\PSoC4/CyLFClk.c ****                         break;
 479:Generated_Source\PSoC4/CyLFClk.c ****                     }
 480:Generated_Source\PSoC4/CyLFClk.c ****                 }
 481:Generated_Source\PSoC4/CyLFClk.c ****                 trimRunningStatus = CySysClkIloUpdateTrimReg(iloAccuracyInPPT);
 482:Generated_Source\PSoC4/CyLFClk.c ****                 timeOutClocks--;
 483:Generated_Source\PSoC4/CyLFClk.c **** 
 484:Generated_Source\PSoC4/CyLFClk.c ****             /* Untill ILO accuracy will be in range less than +/- 10% or timeout occurs*/
 485:Generated_Source\PSoC4/CyLFClk.c ****             } while((CYRET_SUCCESS != trimRunningStatus) && 
 486:Generated_Source\PSoC4/CyLFClk.c ****               (CYRET_INVALID_STATE != trimRunningStatus) && 
 487:Generated_Source\PSoC4/CyLFClk.c ****                                (0u != timeOutClocks));
 488:Generated_Source\PSoC4/CyLFClk.c **** 
 489:Generated_Source\PSoC4/CyLFClk.c ****             if (CYRET_SUCCESS == trimRunningStatus)
 490:Generated_Source\PSoC4/CyLFClk.c ****             {
 491:Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_SUCCESS;
 492:Generated_Source\PSoC4/CyLFClk.c ****             }
 493:Generated_Source\PSoC4/CyLFClk.c ****             else
 494:Generated_Source\PSoC4/CyLFClk.c ****             {
 495:Generated_Source\PSoC4/CyLFClk.c ****                 if(0u == timeOutClocks)
 496:Generated_Source\PSoC4/CyLFClk.c ****                 {
 497:Generated_Source\PSoC4/CyLFClk.c ****                     trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 498:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_TIMEOUT;
 499:Generated_Source\PSoC4/CyLFClk.c ****                 }
 500:Generated_Source\PSoC4/CyLFClk.c ****                 else
 501:Generated_Source\PSoC4/CyLFClk.c ****                 {
 502:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_INVALID_STATE;
 503:Generated_Source\PSoC4/CyLFClk.c ****                 }
 504:Generated_Source\PSoC4/CyLFClk.c ****             }
 505:Generated_Source\PSoC4/CyLFClk.c ****         }
 506:Generated_Source\PSoC4/CyLFClk.c ****         /* Non - blocking mode */
 507:Generated_Source\PSoC4/CyLFClk.c ****         else
 508:Generated_Source\PSoC4/CyLFClk.c ****         {
 509:Generated_Source\PSoC4/CyLFClk.c ****             if (CY_SYS_CLK_TRIM_OR_COMP_FINISHED != trimRunningStatus)
 510:Generated_Source\PSoC4/CyLFClk.c ****             {
 511:Generated_Source\PSoC4/CyLFClk.c ****                 /* Checking if the counter CNTR 1 finished down-counting */
 512:Generated_Source\PSoC4/CyLFClk.c ****                 if(0u != (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 513:Generated_Source\PSoC4/CyLFClk.c ****                 {
 514:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CySysClkIloUpdateTrimReg(iloAccuracyInPPT);
 515:Generated_Source\PSoC4/CyLFClk.c ****                     trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 516:Generated_Source\PSoC4/CyLFClk.c ****                 }
 517:Generated_Source\PSoC4/CyLFClk.c ****                 else
 518:Generated_Source\PSoC4/CyLFClk.c ****                 {
 519:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_STARTED;
 520:Generated_Source\PSoC4/CyLFClk.c ****                 }
 521:Generated_Source\PSoC4/CyLFClk.c ****             }
 522:Generated_Source\PSoC4/CyLFClk.c ****             else
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 17


 523:Generated_Source\PSoC4/CyLFClk.c ****             {
 524:Generated_Source\PSoC4/CyLFClk.c ****                 /* Reload CNTR 1 count value for next measuring */
 525:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CNT_REG1_REG = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER;
 526:Generated_Source\PSoC4/CyLFClk.c ****                 trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_STARTED;
 527:Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_STARTED;
 528:Generated_Source\PSoC4/CyLFClk.c ****             }
 529:Generated_Source\PSoC4/CyLFClk.c ****         }
 530:Generated_Source\PSoC4/CyLFClk.c ****     }
 531:Generated_Source\PSoC4/CyLFClk.c ****     else
 532:Generated_Source\PSoC4/CyLFClk.c ****     {
 533:Generated_Source\PSoC4/CyLFClk.c ****         returnStatus = CYRET_INVALID_STATE;
 534:Generated_Source\PSoC4/CyLFClk.c ****     }
 535:Generated_Source\PSoC4/CyLFClk.c **** 
 536:Generated_Source\PSoC4/CyLFClk.c ****     return (returnStatus);
 537:Generated_Source\PSoC4/CyLFClk.c **** }
 538:Generated_Source\PSoC4/CyLFClk.c **** 
 539:Generated_Source\PSoC4/CyLFClk.c **** 
 540:Generated_Source\PSoC4/CyLFClk.c **** /********************************************************************************
 541:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloUpdateTrimReg
 542:Generated_Source\PSoC4/CyLFClk.c **** *********************************************************************************
 543:Generated_Source\PSoC4/CyLFClk.c **** *
 544:Generated_Source\PSoC4/CyLFClk.c **** * \internal
 545:Generated_Source\PSoC4/CyLFClk.c **** * Function calculates ILO accuracy and check is error range is higher than 
 546:Generated_Source\PSoC4/CyLFClk.c **** * +/- 10%. If Measured frequency is higher than +/- 10% function updates 
 547:Generated_Source\PSoC4/CyLFClk.c **** * ILO Trim register.
 548:Generated_Source\PSoC4/CyLFClk.c **** *
 549:Generated_Source\PSoC4/CyLFClk.c **** * \param
 550:Generated_Source\PSoC4/CyLFClk.c **** * iloAccuracyInPPT Pointer to an integer in which the trimmed ILO 
 551:Generated_Source\PSoC4/CyLFClk.c **** * accuracy will be returned. The value returned in this pointer is not valid 
 552:Generated_Source\PSoC4/CyLFClk.c **** * until the function returns CYRET_SUCCESS. If ILO frequency error is lower 
 553:Generated_Source\PSoC4/CyLFClk.c **** * than +/- 10% then the value returned in this pointer will be updated.
 554:Generated_Source\PSoC4/CyLFClk.c **** *
 555:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Indicates that ILO frequency error is lower than 
 556:Generated_Source\PSoC4/CyLFClk.c **** * +/- 10% and no actions are required.
 557:Generated_Source\PSoC4/CyLFClk.c **** *
 558:Generated_Source\PSoC4/CyLFClk.c **** * \return  CYRET_STARTED - Indicates that ILO frequency error is higher than 
 559:Generated_Source\PSoC4/CyLFClk.c **** * +/- 10% and ILO Trim register was updated.
 560:Generated_Source\PSoC4/CyLFClk.c **** *
 561:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates trimming was unsuccessful.
 562:Generated_Source\PSoC4/CyLFClk.c **** *
 563:Generated_Source\PSoC4/CyLFClk.c **** * Post #1 - To obtain 10% ILO accuracy the calculated accuracy should be equal 
 564:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_ERROR_RANGE = 5.6%. Error value should take to account IMO error of 
 565:Generated_Source\PSoC4/CyLFClk.c **** * +/-2% (+/-0.64kHz), trim step of 2.36kHz (+/-1.18kHz) and error while ILO 
 566:Generated_Source\PSoC4/CyLFClk.c **** * frequency measuring.
 567:Generated_Source\PSoC4/CyLFClk.c **** *
 568:Generated_Source\PSoC4/CyLFClk.c **** * \endinternal
 569:Generated_Source\PSoC4/CyLFClk.c **** *
 570:Generated_Source\PSoC4/CyLFClk.c **** **********************************************************************************/
 571:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloUpdateTrimReg(int32* iloAccuracyInPPT)
 572:Generated_Source\PSoC4/CyLFClk.c **** {
 573:Generated_Source\PSoC4/CyLFClk.c ****     uint32 measuredIloFreq;
 574:Generated_Source\PSoC4/CyLFClk.c ****     uint32 currentIloTrimValue;
 575:Generated_Source\PSoC4/CyLFClk.c ****     int32 iloAccuracyValue;
 576:Generated_Source\PSoC4/CyLFClk.c ****     int32 trimStep;
 577:Generated_Source\PSoC4/CyLFClk.c ****     cystatus errorRangeStatus;
 578:Generated_Source\PSoC4/CyLFClk.c **** 
 579:Generated_Source\PSoC4/CyLFClk.c ****     if(0u != CY_SYS_CNT_REG2_REG)
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 18


 580:Generated_Source\PSoC4/CyLFClk.c ****     {
 581:Generated_Source\PSoC4/CyLFClk.c ****         measuredIloFreq = (CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydelayFreqHz >> CY_SYS_CLK_SYS_
 582:Generated_Source\PSoC4/CyLFClk.c **** 
 583:Generated_Source\PSoC4/CyLFClk.c ****         /* Calculate value of error in PPT according to formula - 
 584:Generated_Source\PSoC4/CyLFClk.c ****         *       ((measuredIlofrequency - iloDesired frequency) * 1000 / iloDesired frequency) */
 585:Generated_Source\PSoC4/CyLFClk.c ****         iloAccuracyValue = (((int32) measuredIloFreq - (int32) CY_SYS_CLK_ILO_DESIRED_FREQ_HZ) * \
 586:Generated_Source\PSoC4/CyLFClk.c ****                             ((int32) CY_SYS_CLK_PERTHOUSAND)) / ((int32) CY_SYS_CLK_ILO_DESIRED_FRE
 587:Generated_Source\PSoC4/CyLFClk.c **** 
 588:Generated_Source\PSoC4/CyLFClk.c ****         /* Check if ILO accuracy is more than +/- CY_SYS_CLK_ERROR_RANGE. See post #1 of API descri
 589:Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_ERROR_RANGE < (uint32) (CY_SYS_CLK_ABS_MACRO(iloAccuracyValue)))
 590:Generated_Source\PSoC4/CyLFClk.c ****         {
 591:Generated_Source\PSoC4/CyLFClk.c ****             if (0 < iloAccuracyValue)
 592:Generated_Source\PSoC4/CyLFClk.c ****             {
 593:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = (int32) (((iloAccuracyValue * (int32) CY_SYS_CLK_ERROR_COEF) + 
 594:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_HALF_OF_STEP) / CY_SYS_CLK_ERROR_STEP);
 595:Generated_Source\PSoC4/CyLFClk.c ****             }
 596:Generated_Source\PSoC4/CyLFClk.c ****             else
 597:Generated_Source\PSoC4/CyLFClk.c ****             {
 598:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = (int32) (((iloAccuracyValue * (int32) CY_SYS_CLK_ERROR_COEF) - 
 599:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_HALF_OF_STEP) / CY_SYS_CLK_ERROR_STEP);
 600:Generated_Source\PSoC4/CyLFClk.c ****             }
 601:Generated_Source\PSoC4/CyLFClk.c ****             currentIloTrimValue = (CY_SYS_CLK_ILO_TRIM_REG & CY_SYS_CLK_ILO_TRIM_MASK);
 602:Generated_Source\PSoC4/CyLFClk.c ****             trimStep = (int32) currentIloTrimValue - trimStep;
 603:Generated_Source\PSoC4/CyLFClk.c **** 
 604:Generated_Source\PSoC4/CyLFClk.c ****             if(trimStep > CY_SYS_CLK_FOURBITS_MAX)
 605:Generated_Source\PSoC4/CyLFClk.c ****             {
 606:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = CY_SYS_CLK_FOURBITS_MAX;
 607:Generated_Source\PSoC4/CyLFClk.c ****             }
 608:Generated_Source\PSoC4/CyLFClk.c ****             if(trimStep < 0)
 609:Generated_Source\PSoC4/CyLFClk.c ****             {
 610:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = 0;
 611:Generated_Source\PSoC4/CyLFClk.c ****             }
 612:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CLK_ILO_TRIM_REG = (CY_SYS_CLK_ILO_TRIM_REG & (uint32)(~CY_SYS_CLK_ILO_TRIM_MASK
 613:Generated_Source\PSoC4/CyLFClk.c ****                                                                  ((uint32) trimStep);
 614:Generated_Source\PSoC4/CyLFClk.c ****             errorRangeStatus = CYRET_STARTED;
 615:Generated_Source\PSoC4/CyLFClk.c ****         } /* Else return success because error is in +/- 10% range*/
 616:Generated_Source\PSoC4/CyLFClk.c ****         else
 617:Generated_Source\PSoC4/CyLFClk.c ****         {
 618:Generated_Source\PSoC4/CyLFClk.c ****             /* Write trimmed ILO accuracy through pointer. */
 619:Generated_Source\PSoC4/CyLFClk.c ****             *iloAccuracyInPPT = iloAccuracyValue;
 620:Generated_Source\PSoC4/CyLFClk.c ****             errorRangeStatus = CYRET_SUCCESS;
 621:Generated_Source\PSoC4/CyLFClk.c ****         }
 622:Generated_Source\PSoC4/CyLFClk.c ****     }
 623:Generated_Source\PSoC4/CyLFClk.c ****     else
 624:Generated_Source\PSoC4/CyLFClk.c ****     {
 625:Generated_Source\PSoC4/CyLFClk.c ****         errorRangeStatus = CYRET_INVALID_STATE;
 626:Generated_Source\PSoC4/CyLFClk.c ****     }
 627:Generated_Source\PSoC4/CyLFClk.c **** return (errorRangeStatus);
 628:Generated_Source\PSoC4/CyLFClk.c **** }
 629:Generated_Source\PSoC4/CyLFClk.c **** 
 630:Generated_Source\PSoC4/CyLFClk.c **** 
 631:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
 632:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloRestoreFactoryTrim
 633:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
 634:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 635:Generated_Source\PSoC4/CyLFClk.c **** * Restores the ILO Trim Register to factory value.
 636:Generated_Source\PSoC4/CyLFClk.c **** *
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 19


 637:Generated_Source\PSoC4/CyLFClk.c **** * The CySysClkIloStartMeasurement() API should be called prior to 
 638:Generated_Source\PSoC4/CyLFClk.c **** * calling this API. Otherwise CYRET_UNKNOWN will be returned.
 639:Generated_Source\PSoC4/CyLFClk.c **** *
 640:Generated_Source\PSoC4/CyLFClk.c **** * Available for all PSoC 4 devices except for PSoC 4000 / PSoC 4100 / PSoC 4200 
 641:Generated_Source\PSoC4/CyLFClk.c **** * / PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices.
 642:Generated_Source\PSoC4/CyLFClk.c **** *
 643:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Operation was successful. 
 644:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_UNKNOWN - CySysClkIloStartMeasurement() was not called 
 645:Generated_Source\PSoC4/CyLFClk.c **** * before this API. Hence the trim value cannot be updated.
 646:Generated_Source\PSoC4/CyLFClk.c **** *
 647:Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 648:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloRestoreFactoryTrim(void)
 649:Generated_Source\PSoC4/CyLFClk.c **** {
 650:Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus = CYRET_SUCCESS;
 651:Generated_Source\PSoC4/CyLFClk.c **** 
 652:Generated_Source\PSoC4/CyLFClk.c ****     /* Check was defaultIloTrimRegValue modified in CySysClkIloStartMeasurement */
 653:Generated_Source\PSoC4/CyLFClk.c ****     if(CY_SYS_CLK_ILO_TRIM_DEFAULT_VALUE != defaultIloTrimRegValue)
 654:Generated_Source\PSoC4/CyLFClk.c ****         {
 655:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CLK_ILO_TRIM_REG = ((CY_SYS_CLK_ILO_TRIM_REG & (uint32)(~CY_SYS_CLK_ILO_TRIM_MAS
 656:Generated_Source\PSoC4/CyLFClk.c ****                                        (defaultIloTrimRegValue & CY_SYS_CLK_ILO_TRIM_MASK));
 657:Generated_Source\PSoC4/CyLFClk.c ****         }
 658:Generated_Source\PSoC4/CyLFClk.c ****         else
 659:Generated_Source\PSoC4/CyLFClk.c ****         {
 660:Generated_Source\PSoC4/CyLFClk.c ****             returnStatus = CYRET_UNKNOWN;
 661:Generated_Source\PSoC4/CyLFClk.c ****         }
 662:Generated_Source\PSoC4/CyLFClk.c **** 
 663:Generated_Source\PSoC4/CyLFClk.c ****         return (returnStatus);
 664:Generated_Source\PSoC4/CyLFClk.c **** }
 665:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!CY_IP_CPUSS)) */
 666:Generated_Source\PSoC4/CyLFClk.c **** 
 667:Generated_Source\PSoC4/CyLFClk.c **** 
 668:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO && CY_IP_SRSSV2)
 669:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 670:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkGetLfclkSource
 671:Generated_Source\PSoC4/CyLFClk.c ****     ********************************************************************************
 672:Generated_Source\PSoC4/CyLFClk.c ****     *
 673:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
 674:Generated_Source\PSoC4/CyLFClk.c ****     *  Gets the clock source for the LFCLK clock.
 675:Generated_Source\PSoC4/CyLFClk.c ****     *  The function is applicable only for PSoC 4100 BLE / PSoC 4200 BLE / 
 676:Generated_Source\PSoC4/CyLFClk.c ****     *  PSoC 4100M / PSoC 4200M / PSoC 4200L.
 677:Generated_Source\PSoC4/CyLFClk.c ****     *
 678:Generated_Source\PSoC4/CyLFClk.c ****     * \return The LFCLK source:
 679:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_LFCLK_SRC_ILO Internal Low Frequency (32 kHz) Oscillator (ILO)
 680:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_LFCLK_SRC_WCO Low Frequency Watch Crystal Oscillator (WCO)
 681:Generated_Source\PSoC4/CyLFClk.c ****     *
 682:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 683:Generated_Source\PSoC4/CyLFClk.c ****     *
 684:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 685:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetLfclkSource(void)
 686:Generated_Source\PSoC4/CyLFClk.c ****     {
 687:Generated_Source\PSoC4/CyLFClk.c ****         uint32 lfclkSource;
 688:Generated_Source\PSoC4/CyLFClk.c ****         lfclkSource = CY_SYS_WDT_CONFIG_REG & CY_SYS_CLK_LFCLK_SEL_MASK;
 689:Generated_Source\PSoC4/CyLFClk.c ****         return (lfclkSource);
 690:Generated_Source\PSoC4/CyLFClk.c ****     }
 691:Generated_Source\PSoC4/CyLFClk.c **** 
 692:Generated_Source\PSoC4/CyLFClk.c **** 
 693:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 20


 694:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkSetLfclkSource
 695:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 696:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 697:Generated_Source\PSoC4/CyLFClk.c ****     *  Sets the clock source for the LFCLK clock.
 698:Generated_Source\PSoC4/CyLFClk.c ****     *
 699:Generated_Source\PSoC4/CyLFClk.c ****     * The switch between LFCLK sources must be done between the positive edges of
 700:Generated_Source\PSoC4/CyLFClk.c ****     * LFCLK, because the glitch risk is around the LFCLK positive edge. To ensure
 701:Generated_Source\PSoC4/CyLFClk.c ****     * that the switch can be done safely, the WDT counter value is read until it
 702:Generated_Source\PSoC4/CyLFClk.c ****     * changes.
 703:Generated_Source\PSoC4/CyLFClk.c ****     *
 704:Generated_Source\PSoC4/CyLFClk.c ****     * That means that the positive edge just finished and the switch is performed.
 705:Generated_Source\PSoC4/CyLFClk.c ****     * The enabled WDT counter is used for that purpose. If no counters are enabled,
 706:Generated_Source\PSoC4/CyLFClk.c ****     * counter 0 is enabled. And after the LFCLK source is switched, counter 0
 707:Generated_Source\PSoC4/CyLFClk.c ****     * configuration is restored.
 708:Generated_Source\PSoC4/CyLFClk.c ****     *
 709:Generated_Source\PSoC4/CyLFClk.c ****     *  The function is applicable only for devices with more than one source for 
 710:Generated_Source\PSoC4/CyLFClk.c ****     * LFCLK - PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE / PSoC 4100M / PSoC 4200M / 
 711:Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4200L.
 712:Generated_Source\PSoC4/CyLFClk.c ****     *
 713:Generated_Source\PSoC4/CyLFClk.c ****     * \note For PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices LFCLK can
 714:Generated_Source\PSoC4/CyLFClk.c ****     * only be sourced from ILO even though WCO is available.
 715:Generated_Source\PSoC4/CyLFClk.c ****     *
 716:Generated_Source\PSoC4/CyLFClk.c ****     * \param
 717:Generated_Source\PSoC4/CyLFClk.c ****     * source
 718:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_LFCLK_SRC_ILO - Internal Low Frequency (32 kHz) 
 719:Generated_Source\PSoC4/CyLFClk.c ****     * Oscillator (ILO).<br>
 720:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_LFCLK_SRC_WCO - Low Frequency Watch Crystal Oscillator (WCO).
 721:Generated_Source\PSoC4/CyLFClk.c ****     *
 722:Generated_Source\PSoC4/CyLFClk.c ****     * \details
 723:Generated_Source\PSoC4/CyLFClk.c ****     * This function has no effect if WDT is locked (CySysWdtLock() is called). 
 724:Generated_Source\PSoC4/CyLFClk.c ****     * Call CySysWdtUnlock() to unlock WDT.
 725:Generated_Source\PSoC4/CyLFClk.c ****     *
 726:Generated_Source\PSoC4/CyLFClk.c ****     * Both the current source and the new source must be running and stable before
 727:Generated_Source\PSoC4/CyLFClk.c ****     * calling this function.
 728:Generated_Source\PSoC4/CyLFClk.c ****     *
 729:Generated_Source\PSoC4/CyLFClk.c ****     * Changing the LFCLK clock source may change the LFCLK clock frequency and
 730:Generated_Source\PSoC4/CyLFClk.c ****     * affect the functionality that uses this clock. For example, watchdog timer
 731:Generated_Source\PSoC4/CyLFClk.c ****     * "uses this clock" or "this clock uses" (WDT) is clocked by LFCLK.
 732:Generated_Source\PSoC4/CyLFClk.c ****     *
 733:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 734:Generated_Source\PSoC4/CyLFClk.c ****     void CySysClkSetLfclkSource(uint32 source)
 735:Generated_Source\PSoC4/CyLFClk.c ****     {
 736:Generated_Source\PSoC4/CyLFClk.c ****         uint8  interruptState;
 737:Generated_Source\PSoC4/CyLFClk.c **** 
 738:Generated_Source\PSoC4/CyLFClk.c ****         if (CySysClkGetLfclkSource() != source)
 739:Generated_Source\PSoC4/CyLFClk.c ****         {
 740:Generated_Source\PSoC4/CyLFClk.c ****             interruptState = CyEnterCriticalSection();
 741:Generated_Source\PSoC4/CyLFClk.c ****             CySysClkLfclkPosedgeCatch();
 742:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = (CY_SYS_WDT_CONFIG_REG & (uint32)(~CY_SYS_CLK_LFCLK_SEL_MASK)) 
 743:Generated_Source\PSoC4/CyLFClk.c ****                                     (source & CY_SYS_CLK_LFCLK_SEL_MASK);
 744:Generated_Source\PSoC4/CyLFClk.c ****             CySysClkLfclkPosedgeRestore();
 745:Generated_Source\PSoC4/CyLFClk.c ****             CyExitCriticalSection(interruptState);
 746:Generated_Source\PSoC4/CyLFClk.c ****         }
 747:Generated_Source\PSoC4/CyLFClk.c ****     }
 748:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_WCO && CY_IP_SRSSV2) */
 749:Generated_Source\PSoC4/CyLFClk.c **** 
 750:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 21


 751:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO)
 752:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 753:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoStart
 754:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 755:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 756:Generated_Source\PSoC4/CyLFClk.c ****     *  Enables Watch Crystal Oscillator (WCO).
 757:Generated_Source\PSoC4/CyLFClk.c ****     * 
 758:Generated_Source\PSoC4/CyLFClk.c ****     * This API enables WCO which is used as a source for LFCLK. Similar to ILO, 
 759:Generated_Source\PSoC4/CyLFClk.c ****     * WCO is also available in all modes except Hibernate and Stop modes.
 760:Generated_Source\PSoC4/CyLFClk.c ****     * \note In PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices
 761:Generated_Source\PSoC4/CyLFClk.c ****     * WCO cannot be a source for the LFCLK. 
 762:Generated_Source\PSoC4/CyLFClk.c ****     *
 763:Generated_Source\PSoC4/CyLFClk.c ****     *  WCO is always enabled in High Power Mode (HPM). Refer to the device
 764:Generated_Source\PSoC4/CyLFClk.c ****     *  datasheet for the  WCO startup time. Once WCO becomes stable it can be
 765:Generated_Source\PSoC4/CyLFClk.c ****     *  switched to Low Power Mode (LPM). Note that oscillator can be unstable
 766:Generated_Source\PSoC4/CyLFClk.c ****     *  during a switch and hence its output should not be used at that moment.
 767:Generated_Source\PSoC4/CyLFClk.c ****     *
 768:Generated_Source\PSoC4/CyLFClk.c ****     *  The CySysClkWcoSetPowerMode() function configures the WCO power mode.
 769:Generated_Source\PSoC4/CyLFClk.c ****     *
 770:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 771:Generated_Source\PSoC4/CyLFClk.c ****     void CySysClkWcoStart(void)
 772:Generated_Source\PSoC4/CyLFClk.c ****     {
 773:Generated_Source\PSoC4/CyLFClk.c ****         CySysClkWcoSetHighPowerMode();
 774:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 775:Generated_Source\PSoC4/CyLFClk.c ****     }
 776:Generated_Source\PSoC4/CyLFClk.c **** 
 777:Generated_Source\PSoC4/CyLFClk.c **** 
 778:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 779:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoStop
 780:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 781:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 782:Generated_Source\PSoC4/CyLFClk.c ****     * Disables the 32 KHz Crystal Oscillator.
 783:Generated_Source\PSoC4/CyLFClk.c ****     *
 784:Generated_Source\PSoC4/CyLFClk.c ****     * API switch of WCO.
 785:Generated_Source\PSoC4/CyLFClk.c ****     * \note PSoC 4100S / PSoC Analog Coprocessor: WCO is required for DeepSleep 
 786:Generated_Source\PSoC4/CyLFClk.c ****     * Timer's operation.
 787:Generated_Source\PSoC4/CyLFClk.c ****     *
 788:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 789:Generated_Source\PSoC4/CyLFClk.c ****     void  CySysClkWcoStop(void)
 790:Generated_Source\PSoC4/CyLFClk.c ****     {
 791:Generated_Source\PSoC4/CyLFClk.c ****         #if (CY_IP_SRSSV2)
 792:Generated_Source\PSoC4/CyLFClk.c ****             uint8  interruptState;
 793:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_IP_SRSSV2) */
 794:Generated_Source\PSoC4/CyLFClk.c **** 
 795:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysClkWcoEnabled())
 796:Generated_Source\PSoC4/CyLFClk.c ****         {
 797:Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_SRSSV2)
 798:Generated_Source\PSoC4/CyLFClk.c ****                 if (CY_SYS_CLK_LFCLK_SRC_WCO == CySysClkGetLfclkSource())
 799:Generated_Source\PSoC4/CyLFClk.c ****                 {
 800:Generated_Source\PSoC4/CyLFClk.c ****                     interruptState = CyEnterCriticalSection();
 801:Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkLfclkPosedgeCatch();
 802:Generated_Source\PSoC4/CyLFClk.c ****                     CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 803:Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkLfclkPosedgeRestore();
 804:Generated_Source\PSoC4/CyLFClk.c ****                     CyExitCriticalSection(interruptState);
 805:Generated_Source\PSoC4/CyLFClk.c ****                 }
 806:Generated_Source\PSoC4/CyLFClk.c ****                 else /* Safe to disable - shortened pulse does not impact peripheral */
 807:Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_SRSSV2) */
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 22


 808:Generated_Source\PSoC4/CyLFClk.c ****             {
 809:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 810:Generated_Source\PSoC4/CyLFClk.c ****             }
 811:Generated_Source\PSoC4/CyLFClk.c ****         } /* Otherwise do nothing. WCO configuration cannot be changed. */
 812:Generated_Source\PSoC4/CyLFClk.c ****     }
 813:Generated_Source\PSoC4/CyLFClk.c **** 
 814:Generated_Source\PSoC4/CyLFClk.c **** 
 815:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 816:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoEnabled
 817:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 818:Generated_Source\PSoC4/CyLFClk.c ****     * \internal Reports the WCO enable state.
 819:Generated_Source\PSoC4/CyLFClk.c ****     *
 820:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 if WCO is enabled
 821:Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 if WCO is disabled.
 822:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 823:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 824:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysClkWcoEnabled(void)
 825:Generated_Source\PSoC4/CyLFClk.c ****     {
 826:Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & (uint32)(CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE))) ?
 827:Generated_Source\PSoC4/CyLFClk.c ****                 (uint32) 1u :
 828:Generated_Source\PSoC4/CyLFClk.c ****                 (uint32) 0u);
 829:Generated_Source\PSoC4/CyLFClk.c ****     }
 830:Generated_Source\PSoC4/CyLFClk.c **** 
 831:Generated_Source\PSoC4/CyLFClk.c **** 
 832:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 833:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoSetPowerMode
 834:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 835:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 836:Generated_Source\PSoC4/CyLFClk.c ****     * Sets the power mode for the 32 KHz WCO.
 837:Generated_Source\PSoC4/CyLFClk.c ****     *
 838:Generated_Source\PSoC4/CyLFClk.c ****     * By default (if this function is not called), the WCO is in High power mode 
 839:Generated_Source\PSoC4/CyLFClk.c ****     * during Active and device's low power modes
 840:Generated_Source\PSoC4/CyLFClk.c ****     *
 841:Generated_Source\PSoC4/CyLFClk.c ****     * \param mode
 842:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_HPM - The High Power mode.<br>
 843:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_LPM - The Low Power mode.
 844:Generated_Source\PSoC4/CyLFClk.c ****     *
 845:Generated_Source\PSoC4/CyLFClk.c ****     * \return A previous power mode. The same as the parameters.
 846:Generated_Source\PSoC4/CyLFClk.c ****     *
 847:Generated_Source\PSoC4/CyLFClk.c ****     * \note
 848:Generated_Source\PSoC4/CyLFClk.c ****     * The WCO Low Power mode is applicable for PSoC 4100 BLE / PSoC 4200 BLE devices.
 849:Generated_Source\PSoC4/CyLFClk.c ****     *
 850:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 851:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysClkWcoSetPowerMode(uint32 mode)
 852:Generated_Source\PSoC4/CyLFClk.c ****     {
 853:Generated_Source\PSoC4/CyLFClk.c ****         uint32 powerModeStatus;
 854:Generated_Source\PSoC4/CyLFClk.c **** 
 855:Generated_Source\PSoC4/CyLFClk.c ****         powerModeStatus = CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_LPM_EN;
 856:Generated_Source\PSoC4/CyLFClk.c **** 
 857:Generated_Source\PSoC4/CyLFClk.c ****         switch(mode)
 858:Generated_Source\PSoC4/CyLFClk.c ****         {
 859:Generated_Source\PSoC4/CyLFClk.c ****         case CY_SYS_CLK_WCO_HPM:
 860:Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkWcoSetHighPowerMode();
 861:Generated_Source\PSoC4/CyLFClk.c ****             break;
 862:Generated_Source\PSoC4/CyLFClk.c **** 
 863:Generated_Source\PSoC4/CyLFClk.c ****         #if(CY_IP_BLESS)
 864:Generated_Source\PSoC4/CyLFClk.c ****             case CY_SYS_CLK_WCO_LPM:
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 23


 865:Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkWcoSetLowPowerMode();
 866:Generated_Source\PSoC4/CyLFClk.c ****                 break;
 867:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_IP_BLESS) */
 868:Generated_Source\PSoC4/CyLFClk.c **** 
 869:Generated_Source\PSoC4/CyLFClk.c ****         default:
 870:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
 871:Generated_Source\PSoC4/CyLFClk.c ****             break;
 872:Generated_Source\PSoC4/CyLFClk.c ****         }
 873:Generated_Source\PSoC4/CyLFClk.c **** 
 874:Generated_Source\PSoC4/CyLFClk.c ****         return (powerModeStatus);
 875:Generated_Source\PSoC4/CyLFClk.c ****     }
 876:Generated_Source\PSoC4/CyLFClk.c **** 
 877:Generated_Source\PSoC4/CyLFClk.c **** 
 878:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 879:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoClockOutSelect
 880:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 881:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 882:Generated_Source\PSoC4/CyLFClk.c ****     * Selects the WCO block output source.
 883:Generated_Source\PSoC4/CyLFClk.c ****     *
 884:Generated_Source\PSoC4/CyLFClk.c ****     * In addition to generating 32.768 kHz clock from external crystals, WCO 
 885:Generated_Source\PSoC4/CyLFClk.c ****     * can be sourced by external clock source using wco_out pin. The API help to
 886:Generated_Source\PSoC4/CyLFClk.c ****     * lets you select between the sources: External crystal or external pin.
 887:Generated_Source\PSoC4/CyLFClk.c ****     *
 888:Generated_Source\PSoC4/CyLFClk.c ****     * If you want to use external pin to drive WCO the next procedure is required:
 889:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 1) Disable the WCO.
 890:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 2) Drive the wco_out pin to an external signal source.
 891:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 3) Call CySysClkWcoClockOutSelect(CY_SYS_CLK_WCO_SEL_PIN).
 892:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 4) Enable the WCO and wait for 15 us before clocking the XO pad at the high 
 893:Generated_Source\PSoC4/CyLFClk.c ****     * potential. Let's assume you are using the 1.6v clock amplitude, then the
 894:Generated_Source\PSoC4/CyLFClk.c ****     * sequence would start at 1.6v, then 0v, then 1.6v etc at a chosen frequency.
 895:Generated_Source\PSoC4/CyLFClk.c ****     *
 896:Generated_Source\PSoC4/CyLFClk.c ****     * If you want to use WCO after using an external pin source:
 897:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 1) Disable the WCO.
 898:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 2) Drive off wco_out pin with external signal source.
 899:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 3) Call CySysClkWcoClockOutSelect(CY_SYS_CLK_WCO_SEL_CRYSTAL).
 900:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 4) Enable the WCO.
 901:Generated_Source\PSoC4/CyLFClk.c ****     *
 902:Generated_Source\PSoC4/CyLFClk.c ****     * \warning 
 903:Generated_Source\PSoC4/CyLFClk.c ****     * Do not use the oscillator output clock prior to a 15uS delay in your system.
 904:Generated_Source\PSoC4/CyLFClk.c ****     * There are no limitations on the external clock frequency.
 905:Generated_Source\PSoC4/CyLFClk.c ****     * \warning 
 906:Generated_Source\PSoC4/CyLFClk.c ****     * When external clock source was selected to drive WCO block the IMO can be 
 907:Generated_Source\PSoC4/CyLFClk.c ****     * trimmed only when external clock source period is equal to WCO external
 908:Generated_Source\PSoC4/CyLFClk.c ****     * crystal period. Also external clock source accuracy should be higher 
 909:Generated_Source\PSoC4/CyLFClk.c ****     * or equal to WCO external crystal accuracy.
 910:Generated_Source\PSoC4/CyLFClk.c ****     *
 911:Generated_Source\PSoC4/CyLFClk.c ****     * \param clockSel
 912:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_SEL_CRYSTAL - Selects External crystal as clock 
 913:Generated_Source\PSoC4/CyLFClk.c ****     * source of WCO.<br>
 914:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_SEL_PIN - Selects External clock input on wco_in pin as 
 915:Generated_Source\PSoC4/CyLFClk.c ****     * clock source of WCO.
 916:Generated_Source\PSoC4/CyLFClk.c ****     *
 917:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 918:Generated_Source\PSoC4/CyLFClk.c ****     void CySysClkWcoClockOutSelect(uint32 clockSel)
 919:Generated_Source\PSoC4/CyLFClk.c ****     {
 920:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysClkWcoEnabled())
 921:Generated_Source\PSoC4/CyLFClk.c ****         {
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 24


 922:Generated_Source\PSoC4/CyLFClk.c ****             if (1u >= clockSel)
 923:Generated_Source\PSoC4/CyLFClk.c ****             {
 924:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_WCO_CONFIG_REG = (CY_SYS_CLK_WCO_CONFIG_REG & (uint32)(~CY_SYS_CLK_WCO_S
 925:Generated_Source\PSoC4/CyLFClk.c ****                                         (clockSel << CY_SYS_CLK_WCO_SELECT_PIN_OFFSET);
 926:Generated_Source\PSoC4/CyLFClk.c ****             }
 927:Generated_Source\PSoC4/CyLFClk.c ****             else
 928:Generated_Source\PSoC4/CyLFClk.c ****             {
 929:Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
 930:Generated_Source\PSoC4/CyLFClk.c ****             }
 931:Generated_Source\PSoC4/CyLFClk.c ****         }
 932:Generated_Source\PSoC4/CyLFClk.c ****     }
 933:Generated_Source\PSoC4/CyLFClk.c **** #endif  /* (CY_IP_WCO) */
 934:Generated_Source\PSoC4/CyLFClk.c **** 
 935:Generated_Source\PSoC4/CyLFClk.c **** 
 936:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
 937:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 938:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtLock
 939:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 940:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 941:Generated_Source\PSoC4/CyLFClk.c ****     * Locks out configuration changes to the Watchdog timer registers and ILO
 942:Generated_Source\PSoC4/CyLFClk.c ****     * configuration register.
 943:Generated_Source\PSoC4/CyLFClk.c ****     *
 944:Generated_Source\PSoC4/CyLFClk.c ****     * After this function is called, ILO clock can't be disabled until
 945:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtUnlock() is called.
 946:Generated_Source\PSoC4/CyLFClk.c ****     *
 947:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 948:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtLock(void)
 949:Generated_Source\PSoC4/CyLFClk.c ****     {
 950:Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
 951:Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
 952:Generated_Source\PSoC4/CyLFClk.c **** 
 953:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = (CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK)) 
 954:Generated_Source\PSoC4/CyLFClk.c ****                  CY_SYS_WDT_CLK_LOCK_BITS_MASK;
 955:Generated_Source\PSoC4/CyLFClk.c **** 
 956:Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
 957:Generated_Source\PSoC4/CyLFClk.c ****     }
 958:Generated_Source\PSoC4/CyLFClk.c **** 
 959:Generated_Source\PSoC4/CyLFClk.c **** 
 960:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 961:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtLocked
 962:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 963:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
 964:Generated_Source\PSoC4/CyLFClk.c ****     * Reports the WDT lock state.
 965:Generated_Source\PSoC4/CyLFClk.c ****     *
 966:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - WDT is locked, and 0 - WDT is unlocked.
 967:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 968:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 969:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysWdtLocked(void)
 970:Generated_Source\PSoC4/CyLFClk.c ****     {
 971:Generated_Source\PSoC4/CyLFClk.c ****         /* Prohibits writing to WDT registers and ILO/WCO registers when not equal 0 */
 972:Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_SELECT_REG & (uint32)(CY_SYS_WDT_CLK_LOCK_BITS_MASK))) ? (uint32
 973:Generated_Source\PSoC4/CyLFClk.c ****     }
 974:Generated_Source\PSoC4/CyLFClk.c **** 
 975:Generated_Source\PSoC4/CyLFClk.c **** 
 976:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 977:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtUnlock
 978:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 25


 979:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 980:Generated_Source\PSoC4/CyLFClk.c ****     *  Unlocks the Watchdog Timer configuration register.
 981:Generated_Source\PSoC4/CyLFClk.c ****     *
 982:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 983:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtUnlock(void)
 984:Generated_Source\PSoC4/CyLFClk.c ****     {
 985:Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
 986:Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
 987:Generated_Source\PSoC4/CyLFClk.c **** 
 988:Generated_Source\PSoC4/CyLFClk.c ****         /* Removing WDT lock requires two writes */
 989:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK))
 990:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_WDT_CLK_LOCK_BIT0);
 991:Generated_Source\PSoC4/CyLFClk.c **** 
 992:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK))
 993:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_WDT_CLK_LOCK_BIT1);
 994:Generated_Source\PSoC4/CyLFClk.c **** 
 995:Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
 996:Generated_Source\PSoC4/CyLFClk.c ****     }
 997:Generated_Source\PSoC4/CyLFClk.c **** 
 998:Generated_Source\PSoC4/CyLFClk.c **** 
 999:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1000:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetEnabledStatus
1001:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1002:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1003:Generated_Source\PSoC4/CyLFClk.c ****     *  Reads the enabled status of one of the three WDT counters.
1004:Generated_Source\PSoC4/CyLFClk.c ****     *
1005:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2].  The number of the WDT counter.
1006:Generated_Source\PSoC4/CyLFClk.c ****     *
1007:Generated_Source\PSoC4/CyLFClk.c ****     * \return The status of the WDT counter:
1008:Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 - If the counter is disabled.
1009:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - If the counter is enabled.
1010:Generated_Source\PSoC4/CyLFClk.c ****     *
1011:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1012:Generated_Source\PSoC4/CyLFClk.c ****     * This function returns an actual WDT counter status from the status register. It may
1013:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles for the WDT status register to contain actual data
1014:Generated_Source\PSoC4/CyLFClk.c ****     * after the WDT counter is enabled.
1015:Generated_Source\PSoC4/CyLFClk.c ****     *
1016:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1017:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetEnabledStatus(uint32 counterNum)
1018:Generated_Source\PSoC4/CyLFClk.c ****     {
1019:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT(counterNum < CY_SYS_WDT_COUNTERS_MAX);
1020:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONTROL_REG >> ((CY_SYS_WDT_CNT_SHIFT * counterNum) + CY_SYS_WDT_CNT_ST
1021:Generated_Source\PSoC4/CyLFClk.c ****     }
1022:Generated_Source\PSoC4/CyLFClk.c **** 
1023:Generated_Source\PSoC4/CyLFClk.c **** 
1024:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1025:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMode
1026:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1027:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1028:Generated_Source\PSoC4/CyLFClk.c ****     * Writes the mode of one of the three WDT counters.
1029:Generated_Source\PSoC4/CyLFClk.c ****     *
1030:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2].  The number of the WDT counter.
1031:Generated_Source\PSoC4/CyLFClk.c ****     *
1032:Generated_Source\PSoC4/CyLFClk.c ****     * \param mode
1033:Generated_Source\PSoC4/CyLFClk.c ****     *  CY_SYS_WDT_MODE_NONE - Free running.<br>
1034:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_INT - The interrupt generated on match for counter 0
1035:Generated_Source\PSoC4/CyLFClk.c ****     * and 1, and on bit toggle for counter 2.<br>
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 26


1036:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_RESET - Reset on match (valid for counter 0 and 1 only).<br>
1037:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_INT_RESET - Generate an interrupt.  Generate a reset on
1038:Generated_Source\PSoC4/CyLFClk.c ****     * the 3rd non-handled interrupt (valid for counter 0 and counter 1 only).
1039:Generated_Source\PSoC4/CyLFClk.c ****     *
1040:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1041:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter counterNum should be disabled to set a mode. Otherwise, this
1042:Generated_Source\PSoC4/CyLFClk.c ****     * function call has no effect. If the specified counter is enabled,
1043:Generated_Source\PSoC4/CyLFClk.c ****     * call the CySysWdtDisable() function with the corresponding parameter to
1044:Generated_Source\PSoC4/CyLFClk.c ****     * disable the specified counter and wait for it to stop.
1045:Generated_Source\PSoC4/CyLFClk.c ****     *
1046:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1047:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMode(uint32 counterNum, uint32 mode)
1048:Generated_Source\PSoC4/CyLFClk.c ****     {
1049:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1050:Generated_Source\PSoC4/CyLFClk.c **** 
1051:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT(counterNum < CY_SYS_WDT_COUNTERS_MAX);
1052:Generated_Source\PSoC4/CyLFClk.c **** 
1053:Generated_Source\PSoC4/CyLFClk.c ****         if(0u == CySysWdtGetEnabledStatus(counterNum))
1054:Generated_Source\PSoC4/CyLFClk.c ****         {
1055:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG &
1056:Generated_Source\PSoC4/CyLFClk.c ****                                 (uint32)~((uint32)(CY_SYS_WDT_MODE_MASK << (counterNum * CY_SYS_WDT
1057:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= (uint32)((mode & CY_SYS_WDT_MODE_MASK) << (counterNum * CY_SYS_WDT_CN
1058:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1059:Generated_Source\PSoC4/CyLFClk.c ****         }
1060:Generated_Source\PSoC4/CyLFClk.c ****     }
1061:Generated_Source\PSoC4/CyLFClk.c **** 
1062:Generated_Source\PSoC4/CyLFClk.c **** 
1063:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1064:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMode
1065:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1066:Generated_Source\PSoC4/CyLFClk.c ****     * 
1067:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the mode of one of the three WDT counters.
1068:Generated_Source\PSoC4/CyLFClk.c ****     *
1069:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1070:Generated_Source\PSoC4/CyLFClk.c ****     *
1071:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mode of the counter. The same enumerated values as the mode 
1072:Generated_Source\PSoC4/CyLFClk.c ****     * parameter used in CySysWdtSetMode().
1073:Generated_Source\PSoC4/CyLFClk.c ****     *
1074:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1075:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMode(uint32 counterNum)
1076:Generated_Source\PSoC4/CyLFClk.c ****     {
1077:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONFIG_REG >> (counterNum * CY_SYS_WDT_CNT_SHIFT)) & CY_SYS_WDT_MODE_MA
1078:Generated_Source\PSoC4/CyLFClk.c ****     }
1079:Generated_Source\PSoC4/CyLFClk.c **** 
1080:Generated_Source\PSoC4/CyLFClk.c **** 
1081:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1082:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetClearOnMatch
1083:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1084:Generated_Source\PSoC4/CyLFClk.c ****     * 
1085:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter "clear on match" setting.
1086:Generated_Source\PSoC4/CyLFClk.c ****     *
1087:Generated_Source\PSoC4/CyLFClk.c ****     * If configured to "clear on match", the counter counts from 0 to MatchValue
1088:Generated_Source\PSoC4/CyLFClk.c ****     * giving it a period of (MatchValue + 1).
1089:Generated_Source\PSoC4/CyLFClk.c ****     *
1090:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1091:Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-1]. The number of the WDT counter. The match values are not
1092:Generated_Source\PSoC4/CyLFClk.c ****     * supported by counter 2.
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 27


1093:Generated_Source\PSoC4/CyLFClk.c ****     *
1094:Generated_Source\PSoC4/CyLFClk.c ****     * \param enable 0 to disable appropriate counter <br>
1095:Generated_Source\PSoC4/CyLFClk.c ****     *  1 to enable appropriate counter
1096:Generated_Source\PSoC4/CyLFClk.c ****     *
1097:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1098:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter counterNum should be disabled. Otherwise this function call
1099:Generated_Source\PSoC4/CyLFClk.c ****     * has no effect. If the specified counter is enabled, call the CySysWdtDisable()
1100:Generated_Source\PSoC4/CyLFClk.c ****     * function with the corresponding parameter to disable the specified counter and
1101:Generated_Source\PSoC4/CyLFClk.c ****     * wait for it to stop. This may take up to three LFCLK cycles.
1102:Generated_Source\PSoC4/CyLFClk.c ****     *
1103:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1104:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetClearOnMatch(uint32 counterNum, uint32 enable)
1105:Generated_Source\PSoC4/CyLFClk.c ****     {
1106:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1107:Generated_Source\PSoC4/CyLFClk.c **** 
1108:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1109:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1110:Generated_Source\PSoC4/CyLFClk.c **** 
1111:Generated_Source\PSoC4/CyLFClk.c ****         if(0u == CySysWdtGetEnabledStatus(counterNum))
1112:Generated_Source\PSoC4/CyLFClk.c ****         {
1113:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG & (uint32)~((uint32)((uint32)1u << 
1114:Generated_Source\PSoC4/CyLFClk.c ****                                      ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_CL
1115:Generated_Source\PSoC4/CyLFClk.c **** 
1116:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue
1117:Generated_Source\PSoC4/CyLFClk.c ****                 |= (uint32)(enable << ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_C
1118:Generated_Source\PSoC4/CyLFClk.c **** 
1119:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1120:Generated_Source\PSoC4/CyLFClk.c ****         }
1121:Generated_Source\PSoC4/CyLFClk.c ****     }
1122:Generated_Source\PSoC4/CyLFClk.c **** 
1123:Generated_Source\PSoC4/CyLFClk.c **** 
1124:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1125:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetClearOnMatch
1126:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1127:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1128:Generated_Source\PSoC4/CyLFClk.c ****     * Reads the "clear on match" setting for the specified counter.
1129:Generated_Source\PSoC4/CyLFClk.c ****     *
1130:Generated_Source\PSoC4/CyLFClk.c ****     * \param
1131:Generated_Source\PSoC4/CyLFClk.c ****     * counterNum Valid range [0-1]. The number of the WDT counter. The match values
1132:Generated_Source\PSoC4/CyLFClk.c ****     * are not supported by counter 2.
1133:Generated_Source\PSoC4/CyLFClk.c ****     *
1134:Generated_Source\PSoC4/CyLFClk.c ****     * \return The "clear on match" status: <br>1 if enabled <br>0 if disabled
1135:Generated_Source\PSoC4/CyLFClk.c ****     *
1136:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1137:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetClearOnMatch(uint32 counterNum)
1138:Generated_Source\PSoC4/CyLFClk.c ****     {
1139:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1140:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1141:Generated_Source\PSoC4/CyLFClk.c **** 
1142:Generated_Source\PSoC4/CyLFClk.c ****         return (uint32)((CY_SYS_WDT_CONFIG_REG >>
1143:Generated_Source\PSoC4/CyLFClk.c ****                         ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_CLR_SHIFT)) & 0
1144:Generated_Source\PSoC4/CyLFClk.c ****     }
1145:Generated_Source\PSoC4/CyLFClk.c **** 
1146:Generated_Source\PSoC4/CyLFClk.c **** 
1147:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1148:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnable
1149:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 28


1150:Generated_Source\PSoC4/CyLFClk.c ****     *
1151:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Enables the specified WDT counters.
1152:Generated_Source\PSoC4/CyLFClk.c ****     *
1153:Generated_Source\PSoC4/CyLFClk.c ****     * All the counters specified in the mask are enabled.
1154:Generated_Source\PSoC4/CyLFClk.c ****     *
1155:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1156:Generated_Source\PSoC4/CyLFClk.c ****     *  CY_SYS_WDT_COUNTER0_MASK - The mask for counter 0 to enable.<br>
1157:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_MASK - The mask for counter 1 to enable.<br>
1158:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_MASK - The mask for counter 2 to enable.
1159:Generated_Source\PSoC4/CyLFClk.c ****     *
1160:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1161:Generated_Source\PSoC4/CyLFClk.c ****     * Enabling or disabling WDT requires 3 LFCLK cycles to come into effect.
1162:Generated_Source\PSoC4/CyLFClk.c ****     * Therefore, the WDT enable state must not be changed more than once in
1163:Generated_Source\PSoC4/CyLFClk.c ****     * that period.
1164:Generated_Source\PSoC4/CyLFClk.c ****     *
1165:Generated_Source\PSoC4/CyLFClk.c ****     * After WDT is enabled, it is illegal to write WDT configuration (WDT_CONFIG)
1166:Generated_Source\PSoC4/CyLFClk.c ****     * and control (WDT_CONTROL) registers. This means that all WDT functions that
1167:Generated_Source\PSoC4/CyLFClk.c ****     * contain 'write' in the name (with the exception of CySysWdtSetMatch()
1168:Generated_Source\PSoC4/CyLFClk.c ****     * function) are illegal to call if WDT is enabled.
1169:Generated_Source\PSoC4/CyLFClk.c ****     *
1170:Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4100 / PSoC 4200: This function enables ILO.
1171:Generated_Source\PSoC4/CyLFClk.c ****     *
1172:Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4100 BLE / PSoC 4200 BLE / PSoC4200L / PSoC 4100M 
1173:Generated_Source\PSoC4/CyLFClk.c ****     * / PSoC 4200M:
1174:Generated_Source\PSoC4/CyLFClk.c ****     * LFLCK should be configured before calling this function. The desired
1175:Generated_Source\PSoC4/CyLFClk.c ****     * source should be enabled and configured to be the source for LFCLK.
1176:Generated_Source\PSoC4/CyLFClk.c ****     *
1177:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1178:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnable(uint32 counterMask)
1179:Generated_Source\PSoC4/CyLFClk.c ****     {
1180:Generated_Source\PSoC4/CyLFClk.c ****         #if (!CY_IP_WCO)
1181:Generated_Source\PSoC4/CyLFClk.c ****             CySysClkIloStart();
1182:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (!CY_IP_WCO) */
1183:Generated_Source\PSoC4/CyLFClk.c **** 
1184:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG |= counterMask;
1185:Generated_Source\PSoC4/CyLFClk.c **** 
1186:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER0_MASK))
1187:Generated_Source\PSoC4/CyLFClk.c ****         {
1188:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
1189:Generated_Source\PSoC4/CyLFClk.c ****             {
1190:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
1191:Generated_Source\PSoC4/CyLFClk.c ****             }
1192:Generated_Source\PSoC4/CyLFClk.c ****         }
1193:Generated_Source\PSoC4/CyLFClk.c **** 
1194:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER1_MASK))
1195:Generated_Source\PSoC4/CyLFClk.c ****         {
1196:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
1197:Generated_Source\PSoC4/CyLFClk.c ****             {
1198:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
1199:Generated_Source\PSoC4/CyLFClk.c ****             }
1200:Generated_Source\PSoC4/CyLFClk.c ****         }
1201:Generated_Source\PSoC4/CyLFClk.c **** 
1202:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER2_MASK))
1203:Generated_Source\PSoC4/CyLFClk.c ****         {
1204:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1205:Generated_Source\PSoC4/CyLFClk.c ****             {
1206:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 29


1207:Generated_Source\PSoC4/CyLFClk.c ****             }
1208:Generated_Source\PSoC4/CyLFClk.c ****         }
1209:Generated_Source\PSoC4/CyLFClk.c ****     }
1210:Generated_Source\PSoC4/CyLFClk.c **** 
1211:Generated_Source\PSoC4/CyLFClk.c **** 
1212:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1213:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisable
1214:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1215:Generated_Source\PSoC4/CyLFClk.c ****     *
1216:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Disables the specified WDT counters.
1217:Generated_Source\PSoC4/CyLFClk.c ****     * All the counters specified in the mask are disabled. The function waits for 
1218:Generated_Source\PSoC4/CyLFClk.c ****     * the changes to come into effect.
1219:Generated_Source\PSoC4/CyLFClk.c ****     *
1220:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1221:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_MASK - The mask for counter 0 to disable. <br>
1222:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_MASK - The mask for counter 1 to disable. <br>
1223:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_MASK - The mask for counter 2 to disable.
1224:Generated_Source\PSoC4/CyLFClk.c ****     *
1225:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1226:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisable(uint32 counterMask)
1227:Generated_Source\PSoC4/CyLFClk.c ****     {
1228:Generated_Source\PSoC4/CyLFClk.c ****         if (0uL == CySysWdtLocked())
1229:Generated_Source\PSoC4/CyLFClk.c ****         {
1230:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONTROL_REG &= ~counterMask;
1231:Generated_Source\PSoC4/CyLFClk.c **** 
1232:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER0_MASK))
1233:Generated_Source\PSoC4/CyLFClk.c ****             {
1234:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
1235:Generated_Source\PSoC4/CyLFClk.c ****                 {
1236:Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1237:Generated_Source\PSoC4/CyLFClk.c ****                 }
1238:Generated_Source\PSoC4/CyLFClk.c ****             }
1239:Generated_Source\PSoC4/CyLFClk.c **** 
1240:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER1_MASK))
1241:Generated_Source\PSoC4/CyLFClk.c ****             {
1242:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
1243:Generated_Source\PSoC4/CyLFClk.c ****                 {
1244:Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1245:Generated_Source\PSoC4/CyLFClk.c ****                 }
1246:Generated_Source\PSoC4/CyLFClk.c ****             }
1247:Generated_Source\PSoC4/CyLFClk.c **** 
1248:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER2_MASK))
1249:Generated_Source\PSoC4/CyLFClk.c ****             {
1250:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1251:Generated_Source\PSoC4/CyLFClk.c ****                 {
1252:Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1253:Generated_Source\PSoC4/CyLFClk.c ****                 }
1254:Generated_Source\PSoC4/CyLFClk.c ****             }
1255:Generated_Source\PSoC4/CyLFClk.c ****         }
1256:Generated_Source\PSoC4/CyLFClk.c ****     }
1257:Generated_Source\PSoC4/CyLFClk.c **** 
1258:Generated_Source\PSoC4/CyLFClk.c **** 
1259:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1260:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetCascade
1261:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1262:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1263:Generated_Source\PSoC4/CyLFClk.c ****     * Writes the two WDT cascade values based on the combination of mask values
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 30


1264:Generated_Source\PSoC4/CyLFClk.c ****     * specified.
1265:Generated_Source\PSoC4/CyLFClk.c ****     *
1266:Generated_Source\PSoC4/CyLFClk.c ****     * \param cascadeMask The mask value used to set or clear the cascade values:
1267:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_NONE - Neither <br>
1268:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_01 - Cascade 01 <br>
1269:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_12 - Cascade 12
1270:Generated_Source\PSoC4/CyLFClk.c ****     *
1271:Generated_Source\PSoC4/CyLFClk.c ****     * If only one cascade mask is specified, the second cascade is disabled.
1272:Generated_Source\PSoC4/CyLFClk.c ****     * To set both cascade modes, two defines should be ORed:
1273:Generated_Source\PSoC4/CyLFClk.c ****     * (CY_SYS_TIMER_CASCADE_01 | CY_SYS_TIMER_CASCADE_12).
1274:Generated_Source\PSoC4/CyLFClk.c ****     * \note If CySysWdtSetCascade() was called with ORed defines it is necessary 
1275:Generated_Source\PSoC4/CyLFClk.c ****     * to call CySysWdtSetClearOnMatch(1,1). It is needed to make sure that 
1276:Generated_Source\PSoC4/CyLFClk.c ****     * Counter 2 will be updated in the expected way.
1277:Generated_Source\PSoC4/CyLFClk.c ****     *
1278:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counters that are part of the specified cascade should be disabled.
1279:Generated_Source\PSoC4/CyLFClk.c ****     * Otherwise this function call has no effect. If the specified
1280:Generated_Source\PSoC4/CyLFClk.c ****     * counter is enabled, call CySysWdtDisable() function with the corresponding
1281:Generated_Source\PSoC4/CyLFClk.c ****     * parameter to disable the specified counter and wait for it to stop. This may
1282:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles.
1283:Generated_Source\PSoC4/CyLFClk.c ****     *
1284:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1285:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetCascade(uint32 cascadeMask)
1286:Generated_Source\PSoC4/CyLFClk.c ****     {
1287:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1288:Generated_Source\PSoC4/CyLFClk.c ****         uint32 countersEnableStatus;
1289:Generated_Source\PSoC4/CyLFClk.c **** 
1290:Generated_Source\PSoC4/CyLFClk.c ****         countersEnableStatus = CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0) |
1291:Generated_Source\PSoC4/CyLFClk.c ****                             CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1) |
1292:Generated_Source\PSoC4/CyLFClk.c ****                             CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2);
1293:Generated_Source\PSoC4/CyLFClk.c **** 
1294:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == countersEnableStatus)
1295:Generated_Source\PSoC4/CyLFClk.c ****         {
1296:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG;
1297:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue &= ((uint32)(~(CY_SYS_WDT_CASCADE_01|CY_SYS_WDT_CASCADE_12)));
1298:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= cascadeMask;
1299:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1300:Generated_Source\PSoC4/CyLFClk.c ****         }
1301:Generated_Source\PSoC4/CyLFClk.c ****     }
1302:Generated_Source\PSoC4/CyLFClk.c **** 
1303:Generated_Source\PSoC4/CyLFClk.c **** 
1304:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1305:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCascade
1306:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1307:Generated_Source\PSoC4/CyLFClk.c ****     *
1308:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the two WDT cascade values returning a mask of the bits set.
1309:Generated_Source\PSoC4/CyLFClk.c ****     *
1310:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mask of the cascade values set.
1311:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_NONE - Neither
1312:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_01 - Cascade 01
1313:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_12 - Cascade 12
1314:Generated_Source\PSoC4/CyLFClk.c ****     *
1315:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1316:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCascade(void)
1317:Generated_Source\PSoC4/CyLFClk.c ****     {
1318:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_CONFIG_REG & (CY_SYS_WDT_CASCADE_01 | CY_SYS_WDT_CASCADE_12));
1319:Generated_Source\PSoC4/CyLFClk.c ****     }
1320:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 31


1321:Generated_Source\PSoC4/CyLFClk.c **** 
1322:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1323:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMatch
1324:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1325:Generated_Source\PSoC4/CyLFClk.c ****     *
1326:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter match comparison value.
1327:Generated_Source\PSoC4/CyLFClk.c ****     *
1328:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1329:Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-1]. The number of the WDT counter. The match values are not
1330:Generated_Source\PSoC4/CyLFClk.c ****     * supported by counter 2.
1331:Generated_Source\PSoC4/CyLFClk.c ****     *
1332:Generated_Source\PSoC4/CyLFClk.c ****     * \param match
1333:Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-65535]. The value to be used to match against the counter.
1334:Generated_Source\PSoC4/CyLFClk.c ****     *
1335:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1336:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMatch(uint32 counterNum, uint32 match)
1337:Generated_Source\PSoC4/CyLFClk.c ****     {
1338:Generated_Source\PSoC4/CyLFClk.c ****         uint32 regValue;
1339:Generated_Source\PSoC4/CyLFClk.c **** 
1340:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1341:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1342:Generated_Source\PSoC4/CyLFClk.c **** 
1343:Generated_Source\PSoC4/CyLFClk.c ****         /* Wait for previous changes to come into effect */
1344:Generated_Source\PSoC4/CyLFClk.c ****         CyDelayUs(CY_SYS_WDT_3LFCLK_DELAY_US);
1345:Generated_Source\PSoC4/CyLFClk.c **** 
1346:Generated_Source\PSoC4/CyLFClk.c ****         regValue = CY_SYS_WDT_MATCH_REG;
1347:Generated_Source\PSoC4/CyLFClk.c ****         regValue &= (uint32)~((uint32)(CY_SYS_WDT_LOWER_16BITS_MASK << (counterNum * CY_SYS_WDT_CNT
1348:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (regValue | (match << (counterNum * CY_SYS_WDT_CNT_MATCH_SHIFT)));
1349:Generated_Source\PSoC4/CyLFClk.c **** 
1350:Generated_Source\PSoC4/CyLFClk.c ****         /* Make sure match synchronization has started */
1351:Generated_Source\PSoC4/CyLFClk.c ****         CyDelayUs(CY_SYS_WDT_1LFCLK_DELAY_US);
1352:Generated_Source\PSoC4/CyLFClk.c ****     }
1353:Generated_Source\PSoC4/CyLFClk.c **** 
1354:Generated_Source\PSoC4/CyLFClk.c **** 
1355:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1356:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetToggleBit
1357:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1358:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1359:Generated_Source\PSoC4/CyLFClk.c ****     * Configures which bit in WDT counter 2 to monitor for a toggle.
1360:Generated_Source\PSoC4/CyLFClk.c ****     *
1361:Generated_Source\PSoC4/CyLFClk.c ****     * When that bit toggles, an interrupt is generated if the mode for counter 2 has
1362:Generated_Source\PSoC4/CyLFClk.c ****     * enabled interrupts.
1363:Generated_Source\PSoC4/CyLFClk.c ****     *
1364:Generated_Source\PSoC4/CyLFClk.c ****     * \param bits Valid range [0-31].  Counter 2 bit to monitor for a toggle.
1365:Generated_Source\PSoC4/CyLFClk.c ****     *
1366:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1367:Generated_Source\PSoC4/CyLFClk.c ****     * WDT Counter 2 should be disabled. Otherwise this function call has no
1368:Generated_Source\PSoC4/CyLFClk.c ****     * effect.
1369:Generated_Source\PSoC4/CyLFClk.c ****     *
1370:Generated_Source\PSoC4/CyLFClk.c ****     * If the specified counter is enabled, call the CySysWdtDisable() function with
1371:Generated_Source\PSoC4/CyLFClk.c ****     * the corresponding parameter to disable the specified counter and wait for it to
1372:Generated_Source\PSoC4/CyLFClk.c ****     * stop. This may take up to 3 LFCLK cycles.
1373:Generated_Source\PSoC4/CyLFClk.c ****     *
1374:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1375:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetToggleBit(uint32 bits)
1376:Generated_Source\PSoC4/CyLFClk.c ****     {
1377:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 32


1378:Generated_Source\PSoC4/CyLFClk.c **** 
1379:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1380:Generated_Source\PSoC4/CyLFClk.c ****         {
1381:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG;
1382:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue &= (uint32)(~((uint32)(CY_SYS_WDT_CONFIG_BITS2_MASK << CY_SYS_WDT_CONFIG
1383:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= ((bits & CY_SYS_WDT_CONFIG_BITS2_MASK) << CY_SYS_WDT_CONFIG_BITS2_POS
1384:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1385:Generated_Source\PSoC4/CyLFClk.c ****         }
1386:Generated_Source\PSoC4/CyLFClk.c ****     }
1387:Generated_Source\PSoC4/CyLFClk.c **** 
1388:Generated_Source\PSoC4/CyLFClk.c **** 
1389:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1390:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetToggleBit
1391:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1392:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1393:Generated_Source\PSoC4/CyLFClk.c ****     * Reads which bit in WDT counter 2 is monitored for a toggle.
1394:Generated_Source\PSoC4/CyLFClk.c ****     *
1395:Generated_Source\PSoC4/CyLFClk.c ****     * \return The bit that is monitored (range of 0 to 31)
1396:Generated_Source\PSoC4/CyLFClk.c ****     *
1397:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1398:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetToggleBit(void)
1399:Generated_Source\PSoC4/CyLFClk.c ****     {
1400:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONFIG_REG >> CY_SYS_WDT_CONFIG_BITS2_POS) & CY_SYS_WDT_CONFIG_BITS2_MA
1401:Generated_Source\PSoC4/CyLFClk.c ****     }
1402:Generated_Source\PSoC4/CyLFClk.c **** 
1403:Generated_Source\PSoC4/CyLFClk.c **** 
1404:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1405:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMatch
1406:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1407:Generated_Source\PSoC4/CyLFClk.c ****     *
1408:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the WDT counter match comparison value.
1409:Generated_Source\PSoC4/CyLFClk.c ****     *
1410:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-1].  The number of the WDT counter. The match
1411:Generated_Source\PSoC4/CyLFClk.c ****     * values are not supported by counter 2.
1412:Generated_Source\PSoC4/CyLFClk.c ****     *
1413:Generated_Source\PSoC4/CyLFClk.c ****     * \return A 16-bit match value.
1414:Generated_Source\PSoC4/CyLFClk.c ****     *
1415:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1416:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMatch(uint32 counterNum)
1417:Generated_Source\PSoC4/CyLFClk.c ****     {
1418:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1419:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1420:Generated_Source\PSoC4/CyLFClk.c **** 
1421:Generated_Source\PSoC4/CyLFClk.c ****         return ((uint32)(CY_SYS_WDT_MATCH_REG >> 
1422:Generated_Source\PSoC4/CyLFClk.c ****                                             (counterNum * CY_SYS_WDT_CNT_MATCH_SHIFT)) & CY_SYS_WDT
1423:Generated_Source\PSoC4/CyLFClk.c ****     }
1424:Generated_Source\PSoC4/CyLFClk.c **** 
1425:Generated_Source\PSoC4/CyLFClk.c **** 
1426:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1427:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCount
1428:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1429:Generated_Source\PSoC4/CyLFClk.c ****     *
1430:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the current WDT counter value.
1431:Generated_Source\PSoC4/CyLFClk.c ****     *
1432:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2]. The number of the WDT counter.
1433:Generated_Source\PSoC4/CyLFClk.c ****     *
1434:Generated_Source\PSoC4/CyLFClk.c ****     * \return A live counter value.  Counter 0 and Counter 1 are 16 bit counters 
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 33


1435:Generated_Source\PSoC4/CyLFClk.c ****     * and counter 2 is a 32 bit counter.
1436:Generated_Source\PSoC4/CyLFClk.c ****     *
1437:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1438:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCount(uint32 counterNum)
1439:Generated_Source\PSoC4/CyLFClk.c ****     {
1440:Generated_Source\PSoC4/CyLFClk.c ****         uint32 regValue = 0u;
1441:Generated_Source\PSoC4/CyLFClk.c **** 
1442:Generated_Source\PSoC4/CyLFClk.c ****         switch(counterNum)
1443:Generated_Source\PSoC4/CyLFClk.c ****         {
1444:Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 0 */
1445:Generated_Source\PSoC4/CyLFClk.c ****             case 0u:
1446:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = CY_SYS_WDT_CTRLOW_REG & CY_SYS_WDT_LOWER_16BITS_MASK;
1447:Generated_Source\PSoC4/CyLFClk.c ****             break;
1448:Generated_Source\PSoC4/CyLFClk.c **** 
1449:Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 1 */
1450:Generated_Source\PSoC4/CyLFClk.c ****             case 1u:
1451:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = (CY_SYS_WDT_CTRLOW_REG >> CY_SYS_WDT_CNT_MATCH_SHIFT) & CY_SYS_WDT_LOWER
1452:Generated_Source\PSoC4/CyLFClk.c ****             break;
1453:Generated_Source\PSoC4/CyLFClk.c **** 
1454:Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 2 */
1455:Generated_Source\PSoC4/CyLFClk.c ****             case 2u:
1456:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = CY_SYS_WDT_CTRHIGH_REG;
1457:Generated_Source\PSoC4/CyLFClk.c ****             break;
1458:Generated_Source\PSoC4/CyLFClk.c **** 
1459:Generated_Source\PSoC4/CyLFClk.c ****             default:
1460:Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
1461:Generated_Source\PSoC4/CyLFClk.c ****             break;
1462:Generated_Source\PSoC4/CyLFClk.c ****         }
1463:Generated_Source\PSoC4/CyLFClk.c **** 
1464:Generated_Source\PSoC4/CyLFClk.c ****         return (regValue);
1465:Generated_Source\PSoC4/CyLFClk.c ****     }
1466:Generated_Source\PSoC4/CyLFClk.c **** 
1467:Generated_Source\PSoC4/CyLFClk.c **** 
1468:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1469:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetInterruptSource
1470:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1471:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1472:Generated_Source\PSoC4/CyLFClk.c ****     * Reads a mask containing all the WDT counters interrupts that are currently
1473:Generated_Source\PSoC4/CyLFClk.c ****     * set by the hardware, if a corresponding mode is selected.
1474:Generated_Source\PSoC4/CyLFClk.c ****     *
1475:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mask of interrupts set
1476:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER0_INT - Counter 0
1477:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER1_INT - Counter 1
1478:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER2_INT - Counter 2
1479:Generated_Source\PSoC4/CyLFClk.c ****     *
1480:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1481:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetInterruptSource(void)
1482:Generated_Source\PSoC4/CyLFClk.c ****     {
1483:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_CONTROL_REG & (CY_SYS_WDT_COUNTER0_INT | CY_SYS_WDT_COUNTER1_INT | CY_SY
1484:Generated_Source\PSoC4/CyLFClk.c ****     }
1485:Generated_Source\PSoC4/CyLFClk.c **** 
1486:Generated_Source\PSoC4/CyLFClk.c **** 
1487:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1488:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtClearInterrupt
1489:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1490:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1491:Generated_Source\PSoC4/CyLFClk.c ****     * Clears all the WDT counter interrupts set in the mask.
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 34


1492:Generated_Source\PSoC4/CyLFClk.c ****     *
1493:Generated_Source\PSoC4/CyLFClk.c ****     * Calling this function also prevents from Reset when the counter mode is set 
1494:Generated_Source\PSoC4/CyLFClk.c ****     * to generate 3 interrupts and then the device resets.
1495:Generated_Source\PSoC4/CyLFClk.c ****     *
1496:Generated_Source\PSoC4/CyLFClk.c ****     * All the WDT interrupts are to be cleared by the firmware, otherwise
1497:Generated_Source\PSoC4/CyLFClk.c ****     * interrupts are generated continuously.
1498:Generated_Source\PSoC4/CyLFClk.c ****     *
1499:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1500:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_INT - Clears counter 0 interrupts <br>
1501:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_INT - Clears counter 1 interrupts <br>
1502:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_INT - Clears counter 2 interrupts
1503:Generated_Source\PSoC4/CyLFClk.c ****     *
1504:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1505:Generated_Source\PSoC4/CyLFClk.c ****     * This function temporary removes the watchdog lock, if it was set, and
1506:Generated_Source\PSoC4/CyLFClk.c ****     * restores the lock state after cleaning the WDT interrupts that are set in
1507:Generated_Source\PSoC4/CyLFClk.c ****     * a mask.
1508:Generated_Source\PSoC4/CyLFClk.c ****     *
1509:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1510:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtClearInterrupt(uint32 counterMask)
1511:Generated_Source\PSoC4/CyLFClk.c ****     {
1512:Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
1513:Generated_Source\PSoC4/CyLFClk.c ****         uint32 wdtLockState;
1514:Generated_Source\PSoC4/CyLFClk.c **** 
1515:Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
1516:Generated_Source\PSoC4/CyLFClk.c **** 
1517:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysWdtLocked())
1518:Generated_Source\PSoC4/CyLFClk.c ****         {
1519:Generated_Source\PSoC4/CyLFClk.c ****             wdtLockState = 1u;
1520:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtUnlock();
1521:Generated_Source\PSoC4/CyLFClk.c ****         }
1522:Generated_Source\PSoC4/CyLFClk.c ****         else
1523:Generated_Source\PSoC4/CyLFClk.c ****         {
1524:Generated_Source\PSoC4/CyLFClk.c ****             wdtLockState = 0u;
1525:Generated_Source\PSoC4/CyLFClk.c ****         }
1526:Generated_Source\PSoC4/CyLFClk.c **** 
1527:Generated_Source\PSoC4/CyLFClk.c ****         /* Set new WDT control register value */
1528:Generated_Source\PSoC4/CyLFClk.c ****         counterMask &= (CY_SYS_WDT_COUNTER0_INT |
1529:Generated_Source\PSoC4/CyLFClk.c ****                         CY_SYS_WDT_COUNTER1_INT |
1530:Generated_Source\PSoC4/CyLFClk.c ****                         CY_SYS_WDT_COUNTER2_INT);
1531:Generated_Source\PSoC4/CyLFClk.c **** 
1532:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG = counterMask | (CY_SYS_WDT_CONTROL_REG & ~(CY_SYS_WDT_COUNTER0_INT 
1533:Generated_Source\PSoC4/CyLFClk.c ****                                                                            CY_SYS_WDT_COUNTER1_INT 
1534:Generated_Source\PSoC4/CyLFClk.c ****                                                                            CY_SYS_WDT_COUNTER2_INT)
1535:Generated_Source\PSoC4/CyLFClk.c **** 
1536:Generated_Source\PSoC4/CyLFClk.c ****         /* Read the CY_SYS_WDT_CONTROL_REG to clear the interrupt request.
1537:Generated_Source\PSoC4/CyLFClk.c ****          * Cypress ID #207093, #206231
1538:Generated_Source\PSoC4/CyLFClk.c ****         */
1539:Generated_Source\PSoC4/CyLFClk.c ****         (void)CY_SYS_WDT_CONTROL_REG;
1540:Generated_Source\PSoC4/CyLFClk.c **** 
1541:Generated_Source\PSoC4/CyLFClk.c ****         if (1u == wdtLockState)
1542:Generated_Source\PSoC4/CyLFClk.c ****         {
1543:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtLock();
1544:Generated_Source\PSoC4/CyLFClk.c ****         }
1545:Generated_Source\PSoC4/CyLFClk.c **** 
1546:Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
1547:Generated_Source\PSoC4/CyLFClk.c ****     }
1548:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 35


1549:Generated_Source\PSoC4/CyLFClk.c **** 
1550:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1551:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtResetCounters
1552:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1553:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1554:Generated_Source\PSoC4/CyLFClk.c ****     * Resets all the WDT counters set in the mask.
1555:Generated_Source\PSoC4/CyLFClk.c ****     *
1556:Generated_Source\PSoC4/CyLFClk.c ****     * \param countersMask
1557:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_RESET - Reset counter 0 <br>
1558:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_RESET - Reset counter 1 <br>
1559:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_RESET - Reset counter 2
1560:Generated_Source\PSoC4/CyLFClk.c ****     *
1561:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1562:Generated_Source\PSoC4/CyLFClk.c ****     * This function does not reset counter values if the Watchdog is locked.
1563:Generated_Source\PSoC4/CyLFClk.c ****     * This function waits while corresponding counters will be reset. This may
1564:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles.
1565:Generated_Source\PSoC4/CyLFClk.c ****     * The LFCLK source must be enabled. Otherwise, the function will never exit.
1566:Generated_Source\PSoC4/CyLFClk.c ****     *
1567:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1568:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtResetCounters(uint32 countersMask)
1569:Generated_Source\PSoC4/CyLFClk.c ****     {
1570:Generated_Source\PSoC4/CyLFClk.c ****         /* Set new WDT reset value */
1571:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG |= (countersMask & CY_SYS_WDT_COUNTERS_RESET);
1572:Generated_Source\PSoC4/CyLFClk.c **** 
1573:Generated_Source\PSoC4/CyLFClk.c ****         while (0uL != (CY_SYS_WDT_CONTROL_REG & CY_SYS_WDT_COUNTERS_RESET))
1574:Generated_Source\PSoC4/CyLFClk.c ****         {
1575:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait for reset to come into effect */
1576:Generated_Source\PSoC4/CyLFClk.c ****         }
1577:Generated_Source\PSoC4/CyLFClk.c ****     }
1578:Generated_Source\PSoC4/CyLFClk.c **** 
1579:Generated_Source\PSoC4/CyLFClk.c **** 
1580:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1581:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetInterruptCallback
1582:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1583:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1584:Generated_Source\PSoC4/CyLFClk.c ****     * Sets the ISR callback function for the particular WDT counter.
1585:Generated_Source\PSoC4/CyLFClk.c ****     * These functions are called on the WDT interrupt.
1586:Generated_Source\PSoC4/CyLFClk.c ****     *
1587:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum The number of the WDT counter.
1588:Generated_Source\PSoC4/CyLFClk.c ****     * \param function The pointer to the callback function.
1589:Generated_Source\PSoC4/CyLFClk.c ****     *
1590:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the previous callback function.
1591:Generated_Source\PSoC4/CyLFClk.c ****     * \return NULL is returned if the specified address is not set.
1592:Generated_Source\PSoC4/CyLFClk.c ****     *
1593:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1594:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtSetInterruptCallback(uint32 counterNum, cyWdtCallback function)
1595:Generated_Source\PSoC4/CyLFClk.c ****     {
1596:Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback prevCallback = (void *)0;
1597:Generated_Source\PSoC4/CyLFClk.c **** 
1598:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum < CY_WDT_NUM_OF_WDT)
1599:Generated_Source\PSoC4/CyLFClk.c ****         {
1600:Generated_Source\PSoC4/CyLFClk.c ****             prevCallback = cySysWdtCallback[counterNum];
1601:Generated_Source\PSoC4/CyLFClk.c ****             cySysWdtCallback[counterNum] = function;
1602:Generated_Source\PSoC4/CyLFClk.c ****         }
1603:Generated_Source\PSoC4/CyLFClk.c ****         else
1604:Generated_Source\PSoC4/CyLFClk.c ****         {
1605:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 36


1606:Generated_Source\PSoC4/CyLFClk.c ****         }
1607:Generated_Source\PSoC4/CyLFClk.c **** 
1608:Generated_Source\PSoC4/CyLFClk.c ****         return((cyWdtCallback)prevCallback);
1609:Generated_Source\PSoC4/CyLFClk.c ****     }
1610:Generated_Source\PSoC4/CyLFClk.c **** 
1611:Generated_Source\PSoC4/CyLFClk.c **** 
1612:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1613:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetInterruptCallback
1614:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1615:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1616:Generated_Source\PSoC4/CyLFClk.c ****     * Gets the ISR callback function for the particular WDT counter.
1617:Generated_Source\PSoC4/CyLFClk.c ****     *
1618:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum The number of the WDT counter.
1619:Generated_Source\PSoC4/CyLFClk.c ****     *
1620:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the callback function registered for a particular WDT by
1621:Generated_Source\PSoC4/CyLFClk.c ****     * a particular address that are passed through arguments.
1622:Generated_Source\PSoC4/CyLFClk.c ****     *
1623:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1624:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtGetInterruptCallback(uint32 counterNum)
1625:Generated_Source\PSoC4/CyLFClk.c ****     {
1626:Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback retCallback = (void *)0;
1627:Generated_Source\PSoC4/CyLFClk.c **** 
1628:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum < CY_WDT_NUM_OF_WDT)
1629:Generated_Source\PSoC4/CyLFClk.c ****         {
1630:Generated_Source\PSoC4/CyLFClk.c ****             retCallback = (cyWdtCallback)cySysWdtCallback[counterNum];
1631:Generated_Source\PSoC4/CyLFClk.c ****         }
1632:Generated_Source\PSoC4/CyLFClk.c ****         else
1633:Generated_Source\PSoC4/CyLFClk.c ****         {
1634:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1635:Generated_Source\PSoC4/CyLFClk.c ****         }
1636:Generated_Source\PSoC4/CyLFClk.c **** 
1637:Generated_Source\PSoC4/CyLFClk.c ****         return(retCallback);
1638:Generated_Source\PSoC4/CyLFClk.c ****     }
1639:Generated_Source\PSoC4/CyLFClk.c **** 
1640:Generated_Source\PSoC4/CyLFClk.c **** 
1641:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1642:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnableCounterIsr
1643:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1644:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1645:Generated_Source\PSoC4/CyLFClk.c ****     * Enables the ISR callback servicing for the particular WDT counter
1646:Generated_Source\PSoC4/CyLFClk.c ****     *
1647:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1648:Generated_Source\PSoC4/CyLFClk.c ****     *
1649:Generated_Source\PSoC4/CyLFClk.c ****     * Value corresponds to appropriate WDT counter. For example value 1 
1650:Generated_Source\PSoC4/CyLFClk.c ****     * corresponds to second WDT counter.
1651:Generated_Source\PSoC4/CyLFClk.c ****     *
1652:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1653:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnableCounterIsr(uint32 counterNum)
1654:Generated_Source\PSoC4/CyLFClk.c ****     {
1655:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum <= CY_SYS_WDT_COUNTER2)
1656:Generated_Source\PSoC4/CyLFClk.c ****         {
1657:Generated_Source\PSoC4/CyLFClk.c ****             disableServicedIsr &= ~counterIntMaskTbl[counterNum];
1658:Generated_Source\PSoC4/CyLFClk.c ****             wdtIsrMask |= counterIntMaskTbl[counterNum];
1659:Generated_Source\PSoC4/CyLFClk.c ****         }
1660:Generated_Source\PSoC4/CyLFClk.c ****         else
1661:Generated_Source\PSoC4/CyLFClk.c ****         {
1662:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 37


1663:Generated_Source\PSoC4/CyLFClk.c ****         }
1664:Generated_Source\PSoC4/CyLFClk.c ****     }
1665:Generated_Source\PSoC4/CyLFClk.c **** 
1666:Generated_Source\PSoC4/CyLFClk.c **** 
1667:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1668:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisableCounterIsr
1669:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1670:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1671:Generated_Source\PSoC4/CyLFClk.c ****     * Disables the ISR callback servicing for the particular WDT counter
1672:Generated_Source\PSoC4/CyLFClk.c ****     *
1673:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1674:Generated_Source\PSoC4/CyLFClk.c ****     *
1675:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1676:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisableCounterIsr(uint32 counterNum)
1677:Generated_Source\PSoC4/CyLFClk.c ****     {
1678:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum <= CY_SYS_WDT_COUNTER2)
1679:Generated_Source\PSoC4/CyLFClk.c ****         {
1680:Generated_Source\PSoC4/CyLFClk.c ****             wdtIsrMask &= ~counterIntMaskTbl[counterNum];
1681:Generated_Source\PSoC4/CyLFClk.c ****         }
1682:Generated_Source\PSoC4/CyLFClk.c ****         else
1683:Generated_Source\PSoC4/CyLFClk.c ****         {
1684:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1685:Generated_Source\PSoC4/CyLFClk.c ****         }
1686:Generated_Source\PSoC4/CyLFClk.c ****     }
1687:Generated_Source\PSoC4/CyLFClk.c **** 
1688:Generated_Source\PSoC4/CyLFClk.c **** 
1689:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1690:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtIsr
1691:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1692:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1693:Generated_Source\PSoC4/CyLFClk.c ****     * This is the handler of the WDT interrupt in CPU NVIC.
1694:Generated_Source\PSoC4/CyLFClk.c ****     *
1695:Generated_Source\PSoC4/CyLFClk.c ****     * The handler checks which WDT triggered in the interrupt and calls the 
1696:Generated_Source\PSoC4/CyLFClk.c ****     * respective callback functions configured by the user by using 
1697:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtSetIsrCallback() API.
1698:Generated_Source\PSoC4/CyLFClk.c ****     *
1699:Generated_Source\PSoC4/CyLFClk.c ****     * The order of the callback execution is incremental. Callback-0 is
1700:Generated_Source\PSoC4/CyLFClk.c ****     * run as the first one and callback-2 is called as the last one.
1701:Generated_Source\PSoC4/CyLFClk.c ****     *
1702:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1703:Generated_Source\PSoC4/CyLFClk.c ****     * This function clears the WDT interrupt every time when it is called.
1704:Generated_Source\PSoC4/CyLFClk.c ****     * Reset after the 3rd interrupt does not happen if this function is registered
1705:Generated_Source\PSoC4/CyLFClk.c ****     * as the interrupt handler even if the "Watchdog with Interrupt" mode is
1706:Generated_Source\PSoC4/CyLFClk.c ****     * selected on the "Low Frequency Clocks" tab.
1707:Generated_Source\PSoC4/CyLFClk.c ****     *
1708:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1709:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtIsr(void)
1710:Generated_Source\PSoC4/CyLFClk.c ****     {
1711:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER0_INT & CY_SYS_WDT_CONTROL_REG))
1712:Generated_Source\PSoC4/CyLFClk.c ****         {
1713:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER0_INT & wdtIsrMask))
1714:Generated_Source\PSoC4/CyLFClk.c ****             {
1715:Generated_Source\PSoC4/CyLFClk.c ****                 wdtIsrMask &= ~(disableServicedIsr & CY_SYS_WDT_COUNTER0_INT);
1716:Generated_Source\PSoC4/CyLFClk.c ****                 disableServicedIsr  &= ~CY_SYS_WDT_COUNTER0_INT;
1717:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER0] != (void *) 0)
1718:Generated_Source\PSoC4/CyLFClk.c ****                 {
1719:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER0])();
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 38


1720:Generated_Source\PSoC4/CyLFClk.c ****                 }
1721:Generated_Source\PSoC4/CyLFClk.c ****             }
1722:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
1723:Generated_Source\PSoC4/CyLFClk.c ****         }
1724:Generated_Source\PSoC4/CyLFClk.c **** 
1725:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER1_INT & CY_SYS_WDT_CONTROL_REG))
1726:Generated_Source\PSoC4/CyLFClk.c ****         {
1727:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER1_INT & wdtIsrMask))
1728:Generated_Source\PSoC4/CyLFClk.c ****             {
1729:Generated_Source\PSoC4/CyLFClk.c ****                 wdtIsrMask &= ~(disableServicedIsr & CY_SYS_WDT_COUNTER1_INT);
1730:Generated_Source\PSoC4/CyLFClk.c ****                 disableServicedIsr  &= ~CY_SYS_WDT_COUNTER1_INT;
1731:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER1] != (void *) 0)
1732:Generated_Source\PSoC4/CyLFClk.c ****                 {
1733:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER1])();
1734:Generated_Source\PSoC4/CyLFClk.c ****                 }
1735:Generated_Source\PSoC4/CyLFClk.c ****             }
1736:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1737:Generated_Source\PSoC4/CyLFClk.c ****         }
1738:Generated_Source\PSoC4/CyLFClk.c **** 
1739:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER2_INT & CY_SYS_WDT_CONTROL_REG))
1740:Generated_Source\PSoC4/CyLFClk.c ****         {
1741:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER2_INT & wdtIsrMask))
1742:Generated_Source\PSoC4/CyLFClk.c ****             {
1743:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER2] != (void *) 0)
1744:Generated_Source\PSoC4/CyLFClk.c ****                 {
1745:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER2])();
1746:Generated_Source\PSoC4/CyLFClk.c ****                 }
1747:Generated_Source\PSoC4/CyLFClk.c ****             }
1748:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER2_INT);
1749:Generated_Source\PSoC4/CyLFClk.c ****         }
1750:Generated_Source\PSoC4/CyLFClk.c ****     }
1751:Generated_Source\PSoC4/CyLFClk.c **** 
1752:Generated_Source\PSoC4/CyLFClk.c **** 
1753:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1754:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWatchdogFeed
1755:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1756:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1757:Generated_Source\PSoC4/CyLFClk.c ****     * Feeds the corresponded Watchdog Counter before it causes the device reset.
1758:Generated_Source\PSoC4/CyLFClk.c ****     *
1759:Generated_Source\PSoC4/CyLFClk.c ****     * Supported only for first WDT0 and second WDT1 counters in the "Watchdog" or 
1760:Generated_Source\PSoC4/CyLFClk.c ****     * "Watchdog w/ Interrupts" modes.
1761:Generated_Source\PSoC4/CyLFClk.c ****     *
1762:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1763:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0 - Feeds the Counter 0 <br>
1764:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1 - Feeds the Counter 1
1765:Generated_Source\PSoC4/CyLFClk.c ****     *
1766:Generated_Source\PSoC4/CyLFClk.c ****     * Value of counterNum corresponds to appropriate counter. For example value 1 
1767:Generated_Source\PSoC4/CyLFClk.c ****     * corresponds to second WDT1 Counter.
1768:Generated_Source\PSoC4/CyLFClk.c ****     *
1769:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1770:Generated_Source\PSoC4/CyLFClk.c ****     * Clears the WDT counter in the "Watchdog" mode or clears the WDT interrupt in
1771:Generated_Source\PSoC4/CyLFClk.c ****     * "Watchdog w/ Interrupts" mode. Does nothing in other modes.
1772:Generated_Source\PSoC4/CyLFClk.c ****     *
1773:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1774:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWatchdogFeed(uint32 counterNum)
1775:Generated_Source\PSoC4/CyLFClk.c ****     {
1776:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum == CY_SYS_WDT_COUNTER0)
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 39


1777:Generated_Source\PSoC4/CyLFClk.c ****         {
1778:Generated_Source\PSoC4/CyLFClk.c ****             if(CY_SYS_WDT_MODE_INT_RESET == CySysWdtGetMode(counterNum))
1779:Generated_Source\PSoC4/CyLFClk.c ****             {
1780:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
1781:Generated_Source\PSoC4/CyLFClk.c ****             }
1782:Generated_Source\PSoC4/CyLFClk.c ****             else if(CY_SYS_WDT_MODE_RESET == CySysWdtGetMode(counterNum))
1783:Generated_Source\PSoC4/CyLFClk.c ****             {
1784:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtResetCounters(CY_SYS_WDT_COUNTER0_RESET);
1785:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
1786:Generated_Source\PSoC4/CyLFClk.c ****             }
1787:Generated_Source\PSoC4/CyLFClk.c ****             else
1788:Generated_Source\PSoC4/CyLFClk.c ****             {
1789:Generated_Source\PSoC4/CyLFClk.c ****                 /* Do nothing. */
1790:Generated_Source\PSoC4/CyLFClk.c ****             }
1791:Generated_Source\PSoC4/CyLFClk.c ****         }
1792:Generated_Source\PSoC4/CyLFClk.c ****         else if(counterNum == CY_SYS_WDT_COUNTER1)
1793:Generated_Source\PSoC4/CyLFClk.c ****         {
1794:Generated_Source\PSoC4/CyLFClk.c ****             if(CY_SYS_WDT_MODE_INT_RESET == CySysWdtGetMode(counterNum))
1795:Generated_Source\PSoC4/CyLFClk.c ****             {
1796:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1797:Generated_Source\PSoC4/CyLFClk.c ****             }
1798:Generated_Source\PSoC4/CyLFClk.c ****             else if(CY_SYS_WDT_MODE_RESET == CySysWdtGetMode(counterNum))
1799:Generated_Source\PSoC4/CyLFClk.c ****             {
1800:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtResetCounters(CY_SYS_WDT_COUNTER1_RESET);
1801:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1802:Generated_Source\PSoC4/CyLFClk.c ****             }
1803:Generated_Source\PSoC4/CyLFClk.c ****             else
1804:Generated_Source\PSoC4/CyLFClk.c ****             {
1805:Generated_Source\PSoC4/CyLFClk.c ****                 /* Do nothing. */
1806:Generated_Source\PSoC4/CyLFClk.c ****             }
1807:Generated_Source\PSoC4/CyLFClk.c ****         }
1808:Generated_Source\PSoC4/CyLFClk.c ****         else
1809:Generated_Source\PSoC4/CyLFClk.c ****         {
1810:Generated_Source\PSoC4/CyLFClk.c ****             /* Do nothing. */
1811:Generated_Source\PSoC4/CyLFClk.c ****         }
1812:Generated_Source\PSoC4/CyLFClk.c ****     }
1813:Generated_Source\PSoC4/CyLFClk.c **** 
1814:Generated_Source\PSoC4/CyLFClk.c **** 
1815:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1816:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkLfclkPosedgeCatch
1817:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1818:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
1819:Generated_Source\PSoC4/CyLFClk.c ****     * Returns once the LFCLK positive edge occurred.
1820:Generated_Source\PSoC4/CyLFClk.c ****     *
1821:Generated_Source\PSoC4/CyLFClk.c ****     * CySysClkLfclkPosedgeRestore() should be called after this function
1822:Generated_Source\PSoC4/CyLFClk.c ****     * to restore the WDT configuration.
1823:Generated_Source\PSoC4/CyLFClk.c ****     *
1824:Generated_Source\PSoC4/CyLFClk.c ****     * A pair of the CySysClkLfclkPosedgeCatch() and CySysClkLfclkPosedgeRestore()
1825:Generated_Source\PSoC4/CyLFClk.c ****     * functions is expected to be called inside a critical section.
1826:Generated_Source\PSoC4/CyLFClk.c ****     *
1827:Generated_Source\PSoC4/CyLFClk.c ****     * To ensure that the WDT counter value is read until it changes, the enabled
1828:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter is used. If no counter is enabled, counter 0 is enabled.
1829:Generated_Source\PSoC4/CyLFClk.c ****     * And after the LFCLK source is switched, the counter 0 configuration
1830:Generated_Source\PSoC4/CyLFClk.c ****     * is restored.
1831:Generated_Source\PSoC4/CyLFClk.c ****     *
1832:Generated_Source\PSoC4/CyLFClk.c ****     * Not applicable for the PSoC 4000 / PSoC 4000S / PSoC 4100S / PSoC Analog 
1833:Generated_Source\PSoC4/CyLFClk.c ****     * Coprocessor devices.
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 40


1834:Generated_Source\PSoC4/CyLFClk.c ****     *
1835:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1836:Generated_Source\PSoC4/CyLFClk.c ****     * This function has no effect if WDT is locked (CySysWdtLock() is
1837:Generated_Source\PSoC4/CyLFClk.c ****     * called). Call CySysWdtUnlock() to unlock WDT.
1838:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
1839:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1840:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeCatch(void)
1841:Generated_Source\PSoC4/CyLFClk.c ****     {
1842:Generated_Source\PSoC4/CyLFClk.c ****         uint32 firstCount;
1843:Generated_Source\PSoC4/CyLFClk.c ****         static uint32 lfclkPosedgeEnabledWdtCounter = 0u;
1844:Generated_Source\PSoC4/CyLFClk.c **** 
1845:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
1846:Generated_Source\PSoC4/CyLFClk.c ****         {
1847:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER0;
1848:Generated_Source\PSoC4/CyLFClk.c ****         }
1849:Generated_Source\PSoC4/CyLFClk.c ****         else if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
1850:Generated_Source\PSoC4/CyLFClk.c ****         {
1851:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER1;
1852:Generated_Source\PSoC4/CyLFClk.c ****         }
1853:Generated_Source\PSoC4/CyLFClk.c ****         else if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1854:Generated_Source\PSoC4/CyLFClk.c ****         {
1855:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER2;
1856:Generated_Source\PSoC4/CyLFClk.c ****         }
1857:Generated_Source\PSoC4/CyLFClk.c ****         else /* All WDT counters are disabled */
1858:Generated_Source\PSoC4/CyLFClk.c ****         {
1859:Generated_Source\PSoC4/CyLFClk.c ****             /* Configure WDT counter # 0 */
1860:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Enabled = 1u;
1861:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER0;
1862:Generated_Source\PSoC4/CyLFClk.c **** 
1863:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Mode = CySysWdtGetMode(CY_SYS_WDT_COUNTER0);
1864:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtSetMode(CY_SYS_WDT_COUNTER0, CY_SYS_WDT_MODE_NONE);
1865:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtEnable(CY_SYS_WDT_COUNTER0_MASK);
1866:Generated_Source\PSoC4/CyLFClk.c ****         }
1867:Generated_Source\PSoC4/CyLFClk.c **** 
1868:Generated_Source\PSoC4/CyLFClk.c ****         firstCount = CySysWdtGetCount(lfclkPosedgeEnabledWdtCounter);
1869:Generated_Source\PSoC4/CyLFClk.c ****         while (CySysWdtGetCount(lfclkPosedgeEnabledWdtCounter) == firstCount)
1870:Generated_Source\PSoC4/CyLFClk.c ****         {
1871:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait for counter to increment */
1872:Generated_Source\PSoC4/CyLFClk.c ****         }
1873:Generated_Source\PSoC4/CyLFClk.c ****     }
1874:Generated_Source\PSoC4/CyLFClk.c **** 
1875:Generated_Source\PSoC4/CyLFClk.c **** 
1876:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1877:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkLfclkPosedgeRestore
1878:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1879:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
1880:Generated_Source\PSoC4/CyLFClk.c ****     *  Restores the WDT configuration after a CySysClkLfclkPosedgeCatch() call.
1881:Generated_Source\PSoC4/CyLFClk.c ****     *
1882:Generated_Source\PSoC4/CyLFClk.c ****     *  A pair of the CySysClkLfclkPosedgeCatch() and CySysClkLfclkPosedgeRestore()
1883:Generated_Source\PSoC4/CyLFClk.c ****     *  functions is expected to be called inside a critical section.
1884:Generated_Source\PSoC4/CyLFClk.c ****     *
1885:Generated_Source\PSoC4/CyLFClk.c ****     * Not applicable for the PSoC 4000/PSoC 4000S / PSoC 4100S / PSoC Analog 
1886:Generated_Source\PSoC4/CyLFClk.c ****     * Coprocessor devices.
1887:Generated_Source\PSoC4/CyLFClk.c ****     *
1888:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1889:Generated_Source\PSoC4/CyLFClk.c ****     *  This function has no effect if WDT is locked (CySysWdtLock() is
1890:Generated_Source\PSoC4/CyLFClk.c ****     *  called). Call CySysWdtUnlock() to unlock WDT.
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 41


1891:Generated_Source\PSoC4/CyLFClk.c ****     *
1892:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
1893:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1894:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeRestore(void)
1895:Generated_Source\PSoC4/CyLFClk.c ****     {
1896:Generated_Source\PSoC4/CyLFClk.c ****         if (lfclkPosedgeWdtCounter0Enabled != 0u)
1897:Generated_Source\PSoC4/CyLFClk.c ****         {
1898:Generated_Source\PSoC4/CyLFClk.c ****             /* Restore counter # 0 configuration and force its shutdown */
1899:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONTROL_REG &= (uint32)(~CY_SYS_WDT_COUNTER0_MASK);
1900:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtSetMode(CY_SYS_WDT_COUNTER0, lfclkPosedgeWdtCounter0Mode);
1901:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Enabled = 0u;
1902:Generated_Source\PSoC4/CyLFClk.c ****         }
1903:Generated_Source\PSoC4/CyLFClk.c ****     }
1904:Generated_Source\PSoC4/CyLFClk.c **** 
1905:Generated_Source\PSoC4/CyLFClk.c **** #else
1906:Generated_Source\PSoC4/CyLFClk.c **** 
1907:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1908:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetEnabledStatus
1909:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1910:Generated_Source\PSoC4/CyLFClk.c ****     *
1911:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the enabled status of the WDT counter.
1912:Generated_Source\PSoC4/CyLFClk.c ****     *
1913:Generated_Source\PSoC4/CyLFClk.c ****     * \return The status of the WDT counter:
1914:Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 - Counter is disabled
1915:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - Counter is enabled
1916:Generated_Source\PSoC4/CyLFClk.c ****     *
1917:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1918:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetEnabledStatus(void)
1919:Generated_Source\PSoC4/CyLFClk.c ****     {
 385              		.loc 1 1919 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389              		@ link register save eliminated.
1920:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_DISABLE_KEY_REG == CY_SYS_WDT_KEY) ? (uint32) 0u : (uint32) 1u);
 390              		.loc 1 1920 0
 391 0000 044B     		ldr	r3, .L28
 392 0002 1868     		ldr	r0, [r3]
 393 0004 044B     		ldr	r3, .L28+4
 394 0006 9C46     		mov	ip, r3
 395 0008 6044     		add	r0, r0, ip
 396 000a 431E     		subs	r3, r0, #1
 397 000c 9841     		sbcs	r0, r0, r3
 398 000e C0B2     		uxtb	r0, r0
1921:Generated_Source\PSoC4/CyLFClk.c ****     }
 399              		.loc 1 1921 0
 400              		@ sp needed
 401 0010 7047     		bx	lr
 402              	.L29:
 403 0012 C046     		.align	2
 404              	.L28:
 405 0014 38000340 		.word	1073938488
 406 0018 9B771253 		.word	1393719195
 407              		.cfi_endproc
 408              	.LFE5:
 409              		.size	CySysWdtGetEnabledStatus, .-CySysWdtGetEnabledStatus
 410              		.section	.text.CySysWdtEnable,"ax",%progbits
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 42


 411              		.align	2
 412              		.global	CySysWdtEnable
 413              		.code	16
 414              		.thumb_func
 415              		.type	CySysWdtEnable, %function
 416              	CySysWdtEnable:
 417              	.LFB6:
1922:Generated_Source\PSoC4/CyLFClk.c **** 
1923:Generated_Source\PSoC4/CyLFClk.c **** 
1924:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1925:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnable
1926:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1927:Generated_Source\PSoC4/CyLFClk.c ****     *
1928:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1929:Generated_Source\PSoC4/CyLFClk.c ****     * Enables watchdog timer reset generation.
1930:Generated_Source\PSoC4/CyLFClk.c ****     *
1931:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtClearInterrupt() feeds the watchdog. Two unserviced interrupts lead 
1932:Generated_Source\PSoC4/CyLFClk.c ****     * to a system reset (i.e. at the third match).
1933:Generated_Source\PSoC4/CyLFClk.c ****     *
1934:Generated_Source\PSoC4/CyLFClk.c ****     * ILO is enabled by the hardware once WDT is started.
1935:Generated_Source\PSoC4/CyLFClk.c ****     *
1936:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1937:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnable(void)
1938:Generated_Source\PSoC4/CyLFClk.c ****     {
 418              		.loc 1 1938 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422              		@ link register save eliminated.
1939:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = 0u;
 423              		.loc 1 1939 0
 424 0000 0022     		movs	r2, #0
 425 0002 014B     		ldr	r3, .L31
 426 0004 1A60     		str	r2, [r3]
1940:Generated_Source\PSoC4/CyLFClk.c ****     }
 427              		.loc 1 1940 0
 428              		@ sp needed
 429 0006 7047     		bx	lr
 430              	.L32:
 431              		.align	2
 432              	.L31:
 433 0008 38000340 		.word	1073938488
 434              		.cfi_endproc
 435              	.LFE6:
 436              		.size	CySysWdtEnable, .-CySysWdtEnable
 437              		.section	.text.CySysWdtDisable,"ax",%progbits
 438              		.align	2
 439              		.global	CySysWdtDisable
 440              		.code	16
 441              		.thumb_func
 442              		.type	CySysWdtDisable, %function
 443              	CySysWdtDisable:
 444              	.LFB7:
1941:Generated_Source\PSoC4/CyLFClk.c **** 
1942:Generated_Source\PSoC4/CyLFClk.c **** 
1943:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1944:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisable
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 43


1945:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1946:Generated_Source\PSoC4/CyLFClk.c ****     *
1947:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Disables the WDT reset generation.
1948:Generated_Source\PSoC4/CyLFClk.c ****     *
1949:Generated_Source\PSoC4/CyLFClk.c ****     * This function unlocks the ENABLE bit in the CLK_ILO_CONFIG registers and
1950:Generated_Source\PSoC4/CyLFClk.c ****     * enables the user to disable ILO.
1951:Generated_Source\PSoC4/CyLFClk.c ****     *
1952:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1953:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisable(void)
1954:Generated_Source\PSoC4/CyLFClk.c ****     {
 445              		.loc 1 1954 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              		@ link register save eliminated.
1955:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = CY_SYS_WDT_KEY;
 450              		.loc 1 1955 0
 451 0000 014A     		ldr	r2, .L34
 452 0002 024B     		ldr	r3, .L34+4
 453 0004 1A60     		str	r2, [r3]
1956:Generated_Source\PSoC4/CyLFClk.c ****     }
 454              		.loc 1 1956 0
 455              		@ sp needed
 456 0006 7047     		bx	lr
 457              	.L35:
 458              		.align	2
 459              	.L34:
 460 0008 6588EDAC 		.word	-1393719195
 461 000c 38000340 		.word	1073938488
 462              		.cfi_endproc
 463              	.LFE7:
 464              		.size	CySysWdtDisable, .-CySysWdtDisable
 465              		.section	.text.CySysWdtSetMatch,"ax",%progbits
 466              		.align	2
 467              		.global	CySysWdtSetMatch
 468              		.code	16
 469              		.thumb_func
 470              		.type	CySysWdtSetMatch, %function
 471              	CySysWdtSetMatch:
 472              	.LFB8:
1957:Generated_Source\PSoC4/CyLFClk.c **** 
1958:Generated_Source\PSoC4/CyLFClk.c **** 
1959:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1960:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMatch
1961:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1962:Generated_Source\PSoC4/CyLFClk.c ****     *
1963:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter match comparison value.
1964:Generated_Source\PSoC4/CyLFClk.c ****     *
1965:Generated_Source\PSoC4/CyLFClk.c ****     * \param match Valid range [0-65535]. The value to be used to match against 
1966:Generated_Source\PSoC4/CyLFClk.c ****     * the counter.
1967:Generated_Source\PSoC4/CyLFClk.c ****     *
1968:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1969:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMatch(uint32 match)
1970:Generated_Source\PSoC4/CyLFClk.c ****     {
 473              		.loc 1 1970 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 44


 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 478              	.LVL37:
1971:Generated_Source\PSoC4/CyLFClk.c ****         match &= CY_SYS_WDT_MATCH_MASK;
 479              		.loc 1 1971 0
 480 0000 0004     		lsls	r0, r0, #16
 481              	.LVL38:
 482 0002 000C     		lsrs	r0, r0, #16
 483              	.LVL39:
1972:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (CY_SYS_WDT_MATCH_REG & (uint32)(~CY_SYS_WDT_MATCH_MASK)) | match;
 484              		.loc 1 1972 0
 485 0004 034A     		ldr	r2, .L37
 486 0006 1368     		ldr	r3, [r2]
 487 0008 1B0C     		lsrs	r3, r3, #16
 488 000a 1B04     		lsls	r3, r3, #16
 489 000c 1843     		orrs	r0, r3
 490              	.LVL40:
 491 000e 1060     		str	r0, [r2]
1973:Generated_Source\PSoC4/CyLFClk.c ****     }
 492              		.loc 1 1973 0
 493              		@ sp needed
 494 0010 7047     		bx	lr
 495              	.L38:
 496 0012 C046     		.align	2
 497              	.L37:
 498 0014 40000340 		.word	1073938496
 499              		.cfi_endproc
 500              	.LFE8:
 501              		.size	CySysWdtSetMatch, .-CySysWdtSetMatch
 502              		.section	.text.CySysWdtGetMatch,"ax",%progbits
 503              		.align	2
 504              		.global	CySysWdtGetMatch
 505              		.code	16
 506              		.thumb_func
 507              		.type	CySysWdtGetMatch, %function
 508              	CySysWdtGetMatch:
 509              	.LFB9:
1974:Generated_Source\PSoC4/CyLFClk.c **** 
1975:Generated_Source\PSoC4/CyLFClk.c **** 
1976:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1977:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMatch
1978:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1979:Generated_Source\PSoC4/CyLFClk.c ****     *
1980:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the WDT counter match comparison value.
1981:Generated_Source\PSoC4/CyLFClk.c ****     *
1982:Generated_Source\PSoC4/CyLFClk.c ****     * \return The counter match value.
1983:Generated_Source\PSoC4/CyLFClk.c ****     *
1984:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1985:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMatch(void)
1986:Generated_Source\PSoC4/CyLFClk.c ****     {
 510              		.loc 1 1986 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514              		@ link register save eliminated.
1987:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_MATCH_MASK);
 515              		.loc 1 1987 0
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 45


 516 0000 024B     		ldr	r3, .L40
 517 0002 1868     		ldr	r0, [r3]
 518 0004 0004     		lsls	r0, r0, #16
 519 0006 000C     		lsrs	r0, r0, #16
1988:Generated_Source\PSoC4/CyLFClk.c ****     }
 520              		.loc 1 1988 0
 521              		@ sp needed
 522 0008 7047     		bx	lr
 523              	.L41:
 524 000a C046     		.align	2
 525              	.L40:
 526 000c 40000340 		.word	1073938496
 527              		.cfi_endproc
 528              	.LFE9:
 529              		.size	CySysWdtGetMatch, .-CySysWdtGetMatch
 530              		.section	.text.CySysWdtGetCount,"ax",%progbits
 531              		.align	2
 532              		.global	CySysWdtGetCount
 533              		.code	16
 534              		.thumb_func
 535              		.type	CySysWdtGetCount, %function
 536              	CySysWdtGetCount:
 537              	.LFB10:
1989:Generated_Source\PSoC4/CyLFClk.c **** 
1990:Generated_Source\PSoC4/CyLFClk.c **** 
1991:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1992:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCount
1993:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1994:Generated_Source\PSoC4/CyLFClk.c ****     *
1995:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the current WDT counter value.
1996:Generated_Source\PSoC4/CyLFClk.c ****     *
1997:Generated_Source\PSoC4/CyLFClk.c ****     * \return A live counter value.
1998:Generated_Source\PSoC4/CyLFClk.c ****     *
1999:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2000:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCount(void)
2001:Generated_Source\PSoC4/CyLFClk.c ****     {
 538              		.loc 1 2001 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              		@ link register save eliminated.
2002:Generated_Source\PSoC4/CyLFClk.c ****         return ((uint32)CY_SYS_WDT_COUNTER_REG);
 543              		.loc 1 2002 0
 544 0000 014B     		ldr	r3, .L43
 545 0002 1868     		ldr	r0, [r3]
2003:Generated_Source\PSoC4/CyLFClk.c ****     }
 546              		.loc 1 2003 0
 547              		@ sp needed
 548 0004 7047     		bx	lr
 549              	.L44:
 550 0006 C046     		.align	2
 551              	.L43:
 552 0008 3C000340 		.word	1073938492
 553              		.cfi_endproc
 554              	.LFE10:
 555              		.size	CySysWdtGetCount, .-CySysWdtGetCount
 556              		.section	.text.CySysWdtSetIgnoreBits,"ax",%progbits
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 46


 557              		.align	2
 558              		.global	CySysWdtSetIgnoreBits
 559              		.code	16
 560              		.thumb_func
 561              		.type	CySysWdtSetIgnoreBits, %function
 562              	CySysWdtSetIgnoreBits:
 563              	.LFB11:
2004:Generated_Source\PSoC4/CyLFClk.c **** 
2005:Generated_Source\PSoC4/CyLFClk.c **** 
2006:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2007:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetIgnoreBits
2008:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2009:Generated_Source\PSoC4/CyLFClk.c ****     *
2010:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2011:Generated_Source\PSoC4/CyLFClk.c ****     * Configures the number of the MSB bits of the watchdog timer that are not
2012:Generated_Source\PSoC4/CyLFClk.c ****     * checked against the match.
2013:Generated_Source\PSoC4/CyLFClk.c ****     *
2014:Generated_Source\PSoC4/CyLFClk.c ****     * \param bitsNum Valid range [0-15]. The number of the MSB bits.
2015:Generated_Source\PSoC4/CyLFClk.c ****     *
2016:Generated_Source\PSoC4/CyLFClk.c ****     * \details The value of bitsNum controls the time-to-reset of the watchdog
2017:Generated_Source\PSoC4/CyLFClk.c ****     * (which happens after 3 successive matches).
2018:Generated_Source\PSoC4/CyLFClk.c ****     *
2019:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2020:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetIgnoreBits(uint32 bitsNum)
2021:Generated_Source\PSoC4/CyLFClk.c ****     {
 564              		.loc 1 2021 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              		@ link register save eliminated.
 569              	.LVL41:
2022:Generated_Source\PSoC4/CyLFClk.c ****         bitsNum = ((uint32)(bitsNum << CY_SYS_WDT_IGNORE_BITS_SHIFT) & CY_SYS_WDT_IGNORE_BITS_MASK)
 570              		.loc 1 2022 0
 571 0000 0004     		lsls	r0, r0, #16
 572              	.LVL42:
 573 0002 F023     		movs	r3, #240
 574 0004 1B03     		lsls	r3, r3, #12
 575 0006 0200     		movs	r2, r0
 576 0008 1A40     		ands	r2, r3
 577              	.LVL43:
2023:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (CY_SYS_WDT_MATCH_REG & (uint32)(~CY_SYS_WDT_IGNORE_BITS_MASK)) | bi
 578              		.loc 1 2023 0
 579 000a 0349     		ldr	r1, .L46
 580 000c 0868     		ldr	r0, [r1]
 581 000e 034B     		ldr	r3, .L46+4
 582 0010 0340     		ands	r3, r0
 583 0012 1A43     		orrs	r2, r3
 584              	.LVL44:
 585 0014 0A60     		str	r2, [r1]
2024:Generated_Source\PSoC4/CyLFClk.c ****     }
 586              		.loc 1 2024 0
 587              		@ sp needed
 588 0016 7047     		bx	lr
 589              	.L47:
 590              		.align	2
 591              	.L46:
 592 0018 40000340 		.word	1073938496
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 47


 593 001c FFFFF0FF 		.word	-983041
 594              		.cfi_endproc
 595              	.LFE11:
 596              		.size	CySysWdtSetIgnoreBits, .-CySysWdtSetIgnoreBits
 597              		.section	.text.CySysWdtGetIgnoreBits,"ax",%progbits
 598              		.align	2
 599              		.global	CySysWdtGetIgnoreBits
 600              		.code	16
 601              		.thumb_func
 602              		.type	CySysWdtGetIgnoreBits, %function
 603              	CySysWdtGetIgnoreBits:
 604              	.LFB12:
2025:Generated_Source\PSoC4/CyLFClk.c **** 
2026:Generated_Source\PSoC4/CyLFClk.c **** 
2027:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2028:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetIgnoreBits
2029:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2030:Generated_Source\PSoC4/CyLFClk.c ****     *
2031:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2032:Generated_Source\PSoC4/CyLFClk.c ****     * Reads the number of the  MSB bits of the watchdog timer that are not
2033:Generated_Source\PSoC4/CyLFClk.c ****     * checked against the match.
2034:Generated_Source\PSoC4/CyLFClk.c ****     *
2035:Generated_Source\PSoC4/CyLFClk.c ****     * \return The number of the MSB bits.
2036:Generated_Source\PSoC4/CyLFClk.c ****     *
2037:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2038:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetIgnoreBits(void)
2039:Generated_Source\PSoC4/CyLFClk.c ****     {
 605              		.loc 1 2039 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609              		@ link register save eliminated.
2040:Generated_Source\PSoC4/CyLFClk.c ****         return((uint32)((CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_IGNORE_BITS_MASK) >> CY_SYS_WDT_IGNORE_B
 610              		.loc 1 2040 0
 611 0000 024B     		ldr	r3, .L49
 612 0002 1868     		ldr	r0, [r3]
 613 0004 000C     		lsrs	r0, r0, #16
 614 0006 0F23     		movs	r3, #15
 615 0008 1840     		ands	r0, r3
2041:Generated_Source\PSoC4/CyLFClk.c ****     }
 616              		.loc 1 2041 0
 617              		@ sp needed
 618 000a 7047     		bx	lr
 619              	.L50:
 620              		.align	2
 621              	.L49:
 622 000c 40000340 		.word	1073938496
 623              		.cfi_endproc
 624              	.LFE12:
 625              		.size	CySysWdtGetIgnoreBits, .-CySysWdtGetIgnoreBits
 626              		.section	.text.CySysWdtClearInterrupt,"ax",%progbits
 627              		.align	2
 628              		.global	CySysWdtClearInterrupt
 629              		.code	16
 630              		.thumb_func
 631              		.type	CySysWdtClearInterrupt, %function
 632              	CySysWdtClearInterrupt:
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 48


 633              	.LFB13:
2042:Generated_Source\PSoC4/CyLFClk.c **** 
2043:Generated_Source\PSoC4/CyLFClk.c **** 
2044:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2045:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtClearInterrupt
2046:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2047:Generated_Source\PSoC4/CyLFClk.c ****     *
2048:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2049:Generated_Source\PSoC4/CyLFClk.c ****     * Feeds the watchdog.
2050:Generated_Source\PSoC4/CyLFClk.c ****     * Cleans the WDT match flag which is set every time the WDT counter reaches a 
2051:Generated_Source\PSoC4/CyLFClk.c ****     * WDT match value. Two unserviced interrupts lead to a system reset 
2052:Generated_Source\PSoC4/CyLFClk.c ****     * (i.e. at the third match).
2053:Generated_Source\PSoC4/CyLFClk.c ****     *
2054:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2055:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtClearInterrupt(void)
2056:Generated_Source\PSoC4/CyLFClk.c ****     {
 634              		.loc 1 2056 0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 0
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 638              		@ link register save eliminated.
2057:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
 639              		.loc 1 2057 0
 640 0000 024A     		ldr	r2, .L52
 641 0002 1168     		ldr	r1, [r2]
 642 0004 0123     		movs	r3, #1
 643 0006 0B43     		orrs	r3, r1
 644 0008 1360     		str	r3, [r2]
2058:Generated_Source\PSoC4/CyLFClk.c ****     }
 645              		.loc 1 2058 0
 646              		@ sp needed
 647 000a 7047     		bx	lr
 648              	.L53:
 649              		.align	2
 650              	.L52:
 651 000c 44000340 		.word	1073938500
 652              		.cfi_endproc
 653              	.LFE13:
 654              		.size	CySysWdtClearInterrupt, .-CySysWdtClearInterrupt
 655              		.section	.text.CySysWdtMaskInterrupt,"ax",%progbits
 656              		.align	2
 657              		.global	CySysWdtMaskInterrupt
 658              		.code	16
 659              		.thumb_func
 660              		.type	CySysWdtMaskInterrupt, %function
 661              	CySysWdtMaskInterrupt:
 662              	.LFB14:
2059:Generated_Source\PSoC4/CyLFClk.c **** 
2060:Generated_Source\PSoC4/CyLFClk.c **** 
2061:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2062:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtMaskInterrupt
2063:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2064:Generated_Source\PSoC4/CyLFClk.c ****     *
2065:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2066:Generated_Source\PSoC4/CyLFClk.c ****     * After masking interrupts from WDT, they are not passed to CPU.
2067:Generated_Source\PSoC4/CyLFClk.c ****     * This function does not disable WDT reset generation.
2068:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 49


2069:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2070:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtMaskInterrupt(void)
2071:Generated_Source\PSoC4/CyLFClk.c ****     {
 663              		.loc 1 2071 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 0
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 667              		@ link register save eliminated.
2072:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG &= (uint32)(~ (uint32)CY_SYS_WDT_LOWER_BIT_MASK);
 668              		.loc 1 2072 0
 669 0000 024A     		ldr	r2, .L55
 670 0002 1368     		ldr	r3, [r2]
 671 0004 0121     		movs	r1, #1
 672 0006 8B43     		bics	r3, r1
 673 0008 1360     		str	r3, [r2]
2073:Generated_Source\PSoC4/CyLFClk.c ****     }
 674              		.loc 1 2073 0
 675              		@ sp needed
 676 000a 7047     		bx	lr
 677              	.L56:
 678              		.align	2
 679              	.L55:
 680 000c 4C000340 		.word	1073938508
 681              		.cfi_endproc
 682              	.LFE14:
 683              		.size	CySysWdtMaskInterrupt, .-CySysWdtMaskInterrupt
 684              		.section	.text.CySysWdtUnmaskInterrupt,"ax",%progbits
 685              		.align	2
 686              		.global	CySysWdtUnmaskInterrupt
 687              		.code	16
 688              		.thumb_func
 689              		.type	CySysWdtUnmaskInterrupt, %function
 690              	CySysWdtUnmaskInterrupt:
 691              	.LFB15:
2074:Generated_Source\PSoC4/CyLFClk.c **** 
2075:Generated_Source\PSoC4/CyLFClk.c **** 
2076:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2077:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtUnmaskInterrupt
2078:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2079:Generated_Source\PSoC4/CyLFClk.c ****     *
2080:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2081:Generated_Source\PSoC4/CyLFClk.c ****     * After unmasking interrupts from WDT, they are passed to CPU.
2082:Generated_Source\PSoC4/CyLFClk.c ****     * This function does not impact the reset generation.
2083:Generated_Source\PSoC4/CyLFClk.c ****     *
2084:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2085:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtUnmaskInterrupt(void)
2086:Generated_Source\PSoC4/CyLFClk.c ****     {
 692              		.loc 1 2086 0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 0
 695              		@ frame_needed = 0, uses_anonymous_args = 0
 696              		@ link register save eliminated.
2087:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
 697              		.loc 1 2087 0
 698 0000 024A     		ldr	r2, .L58
 699 0002 1168     		ldr	r1, [r2]
 700 0004 0123     		movs	r3, #1
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 50


 701 0006 0B43     		orrs	r3, r1
 702 0008 1360     		str	r3, [r2]
2088:Generated_Source\PSoC4/CyLFClk.c ****     }
 703              		.loc 1 2088 0
 704              		@ sp needed
 705 000a 7047     		bx	lr
 706              	.L59:
 707              		.align	2
 708              	.L58:
 709 000c 4C000340 		.word	1073938508
 710              		.cfi_endproc
 711              	.LFE15:
 712              		.size	CySysWdtUnmaskInterrupt, .-CySysWdtUnmaskInterrupt
 713              		.section	.text.CySysWdtSetInterruptCallback,"ax",%progbits
 714              		.align	2
 715              		.global	CySysWdtSetInterruptCallback
 716              		.code	16
 717              		.thumb_func
 718              		.type	CySysWdtSetInterruptCallback, %function
 719              	CySysWdtSetInterruptCallback:
 720              	.LFB16:
2089:Generated_Source\PSoC4/CyLFClk.c **** 
2090:Generated_Source\PSoC4/CyLFClk.c **** 
2091:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2092:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetIsrCallback
2093:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2094:Generated_Source\PSoC4/CyLFClk.c ****     *
2095:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2096:Generated_Source\PSoC4/CyLFClk.c ****     * Sets the ISR callback function for the WDT counter
2097:Generated_Source\PSoC4/CyLFClk.c ****     *
2098:Generated_Source\PSoC4/CyLFClk.c ****     * \param function The pointer to the callback function.
2099:Generated_Source\PSoC4/CyLFClk.c ****     *
2100:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to a previous callback function.
2101:Generated_Source\PSoC4/CyLFClk.c ****     *
2102:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2103:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtSetInterruptCallback(cyWdtCallback function)
2104:Generated_Source\PSoC4/CyLFClk.c ****     {
 721              		.loc 1 2104 0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725              		@ link register save eliminated.
 726              	.LVL45:
2105:Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback prevCallback = (void *)0;
2106:Generated_Source\PSoC4/CyLFClk.c **** 
2107:Generated_Source\PSoC4/CyLFClk.c ****         prevCallback = cySysWdtCallback;
 727              		.loc 1 2107 0
 728 0000 024B     		ldr	r3, .L61
 729 0002 5A68     		ldr	r2, [r3, #4]
 730              	.LVL46:
2108:Generated_Source\PSoC4/CyLFClk.c ****         cySysWdtCallback = function;
 731              		.loc 1 2108 0
 732 0004 5860     		str	r0, [r3, #4]
2109:Generated_Source\PSoC4/CyLFClk.c **** 
2110:Generated_Source\PSoC4/CyLFClk.c ****         return(prevCallback);
2111:Generated_Source\PSoC4/CyLFClk.c ****     }
 733              		.loc 1 2111 0
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 51


 734 0006 1000     		movs	r0, r2
 735              	.LVL47:
 736              		@ sp needed
 737 0008 7047     		bx	lr
 738              	.L62:
 739 000a C046     		.align	2
 740              	.L61:
 741 000c 00000000 		.word	.LANCHOR0
 742              		.cfi_endproc
 743              	.LFE16:
 744              		.size	CySysWdtSetInterruptCallback, .-CySysWdtSetInterruptCallback
 745              		.section	.text.CySysWdtGetInterruptCallback,"ax",%progbits
 746              		.align	2
 747              		.global	CySysWdtGetInterruptCallback
 748              		.code	16
 749              		.thumb_func
 750              		.type	CySysWdtGetInterruptCallback, %function
 751              	CySysWdtGetInterruptCallback:
 752              	.LFB17:
2112:Generated_Source\PSoC4/CyLFClk.c **** 
2113:Generated_Source\PSoC4/CyLFClk.c **** 
2114:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2115:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetIsrCallback
2116:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2117:Generated_Source\PSoC4/CyLFClk.c ****     *
2118:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2119:Generated_Source\PSoC4/CyLFClk.c ****     * Gets the ISR callback function for the WDT counter
2120:Generated_Source\PSoC4/CyLFClk.c ****     *
2121:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the callback function registered for WDT.
2122:Generated_Source\PSoC4/CyLFClk.c ****     *
2123:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2124:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtGetInterruptCallback(void)
2125:Generated_Source\PSoC4/CyLFClk.c ****     {
 753              		.loc 1 2125 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 757              		@ link register save eliminated.
2126:Generated_Source\PSoC4/CyLFClk.c ****         return(cySysWdtCallback);
 758              		.loc 1 2126 0
 759 0000 014B     		ldr	r3, .L64
 760 0002 5868     		ldr	r0, [r3, #4]
2127:Generated_Source\PSoC4/CyLFClk.c ****     }
 761              		.loc 1 2127 0
 762              		@ sp needed
 763 0004 7047     		bx	lr
 764              	.L65:
 765 0006 C046     		.align	2
 766              	.L64:
 767 0008 00000000 		.word	.LANCHOR0
 768              		.cfi_endproc
 769              	.LFE17:
 770              		.size	CySysWdtGetInterruptCallback, .-CySysWdtGetInterruptCallback
 771              		.section	.text.CySysWdtIsr,"ax",%progbits
 772              		.align	2
 773              		.global	CySysWdtIsr
 774              		.code	16
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 52


 775              		.thumb_func
 776              		.type	CySysWdtIsr, %function
 777              	CySysWdtIsr:
 778              	.LFB18:
2128:Generated_Source\PSoC4/CyLFClk.c **** 
2129:Generated_Source\PSoC4/CyLFClk.c **** 
2130:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2131:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtIsr
2132:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2133:Generated_Source\PSoC4/CyLFClk.c ****     *
2134:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2135:Generated_Source\PSoC4/CyLFClk.c ****     * This is the handler of the WDT interrupt in CPU NVIC.
2136:Generated_Source\PSoC4/CyLFClk.c ****     *
2137:Generated_Source\PSoC4/CyLFClk.c ****     * The handler calls the respective callback functions configured by the user 
2138:Generated_Source\PSoC4/CyLFClk.c ****     * by using CySysWdtSetIsrCallback() API.
2139:Generated_Source\PSoC4/CyLFClk.c ****     *
2140:Generated_Source\PSoC4/CyLFClk.c ****     *
2141:Generated_Source\PSoC4/CyLFClk.c ****     * \details
2142:Generated_Source\PSoC4/CyLFClk.c ****     * This function clears the WDT interrupt every time when it is called.
2143:Generated_Source\PSoC4/CyLFClk.c ****     * Reset after the 3rd interrupt does not happen if this function is registered
2144:Generated_Source\PSoC4/CyLFClk.c ****     * as the interrupt handler even if the "Watchdog with Interrupt" mode is
2145:Generated_Source\PSoC4/CyLFClk.c ****     * selected on the "Low Frequency Clocks" tab.
2146:Generated_Source\PSoC4/CyLFClk.c ****     *
2147:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2148:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtIsr(void)
2149:Generated_Source\PSoC4/CyLFClk.c ****     {
 779              		.loc 1 2149 0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 0
 782              		@ frame_needed = 0, uses_anonymous_args = 0
 783 0000 10B5     		push	{r4, lr}
 784              		.cfi_def_cfa_offset 8
 785              		.cfi_offset 4, -8
 786              		.cfi_offset 14, -4
2150:Generated_Source\PSoC4/CyLFClk.c ****         if(cySysWdtCallback != (void *) 0)
 787              		.loc 1 2150 0
 788 0002 044B     		ldr	r3, .L68
 789 0004 5B68     		ldr	r3, [r3, #4]
 790 0006 002B     		cmp	r3, #0
 791 0008 00D0     		beq	.L67
2151:Generated_Source\PSoC4/CyLFClk.c ****         {
2152:Generated_Source\PSoC4/CyLFClk.c ****             (void)(cySysWdtCallback)();
 792              		.loc 1 2152 0
 793 000a 9847     		blx	r3
 794              	.LVL48:
 795              	.L67:
2153:Generated_Source\PSoC4/CyLFClk.c ****         }
2154:Generated_Source\PSoC4/CyLFClk.c **** 
2155:Generated_Source\PSoC4/CyLFClk.c ****         CySysWdtClearInterrupt();
 796              		.loc 1 2155 0
 797 000c FFF7FEFF 		bl	CySysWdtClearInterrupt
 798              	.LVL49:
2156:Generated_Source\PSoC4/CyLFClk.c ****     }
 799              		.loc 1 2156 0
 800              		@ sp needed
 801 0010 10BD     		pop	{r4, pc}
 802              	.L69:
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 53


 803 0012 C046     		.align	2
 804              	.L68:
 805 0014 00000000 		.word	.LANCHOR0
 806              		.cfi_endproc
 807              	.LFE18:
 808              		.size	CySysWdtIsr, .-CySysWdtIsr
 809              		.bss
 810              		.align	2
 811              		.set	.LANCHOR0,. + 0
 812              		.type	compensateRunningStatus.4794, %object
 813              		.size	compensateRunningStatus.4794, 4
 814              	compensateRunningStatus.4794:
 815 0000 00000000 		.space	4
 816              		.type	cySysWdtCallback, %object
 817              		.size	cySysWdtCallback, 4
 818              	cySysWdtCallback:
 819 0004 00000000 		.space	4
 820              		.text
 821              	.Letext0:
 822              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 823              		.file 3 "Generated_Source\\PSoC4\\CyLFClk.h"
 824              		.file 4 "Generated_Source\\PSoC4\\CyLib.h"
 825              		.section	.debug_info,"",%progbits
 826              	.Ldebug_info0:
 827 0000 2A030000 		.4byte	0x32a
 828 0004 0400     		.2byte	0x4
 829 0006 00000000 		.4byte	.Ldebug_abbrev0
 830 000a 04       		.byte	0x4
 831 000b 01       		.uleb128 0x1
 832 000c 30020000 		.4byte	.LASF49
 833 0010 0C       		.byte	0xc
 834 0011 B4000000 		.4byte	.LASF50
 835 0015 6D030000 		.4byte	.LASF51
 836 0019 00000000 		.4byte	.Ldebug_ranges0+0
 837 001d 00000000 		.4byte	0
 838 0021 00000000 		.4byte	.Ldebug_line0
 839 0025 02       		.uleb128 0x2
 840 0026 01       		.byte	0x1
 841 0027 06       		.byte	0x6
 842 0028 E7030000 		.4byte	.LASF0
 843 002c 02       		.uleb128 0x2
 844 002d 01       		.byte	0x1
 845 002e 08       		.byte	0x8
 846 002f D5000000 		.4byte	.LASF1
 847 0033 02       		.uleb128 0x2
 848 0034 02       		.byte	0x2
 849 0035 05       		.byte	0x5
 850 0036 63030000 		.4byte	.LASF2
 851 003a 02       		.uleb128 0x2
 852 003b 02       		.byte	0x2
 853 003c 07       		.byte	0x7
 854 003d 21010000 		.4byte	.LASF3
 855 0041 02       		.uleb128 0x2
 856 0042 04       		.byte	0x4
 857 0043 05       		.byte	0x5
 858 0044 D1030000 		.4byte	.LASF4
 859 0048 02       		.uleb128 0x2
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 54


 860 0049 04       		.byte	0x4
 861 004a 07       		.byte	0x7
 862 004b 07010000 		.4byte	.LASF5
 863 004f 02       		.uleb128 0x2
 864 0050 08       		.byte	0x8
 865 0051 05       		.byte	0x5
 866 0052 1C030000 		.4byte	.LASF6
 867 0056 02       		.uleb128 0x2
 868 0057 08       		.byte	0x8
 869 0058 07       		.byte	0x7
 870 0059 EF010000 		.4byte	.LASF7
 871 005d 03       		.uleb128 0x3
 872 005e 04       		.byte	0x4
 873 005f 05       		.byte	0x5
 874 0060 696E7400 		.ascii	"int\000"
 875 0064 02       		.uleb128 0x2
 876 0065 04       		.byte	0x4
 877 0066 07       		.byte	0x7
 878 0067 CD010000 		.4byte	.LASF8
 879 006b 04       		.uleb128 0x4
 880 006c AE010000 		.4byte	.LASF12
 881 0070 02       		.byte	0x2
 882 0071 FD01     		.2byte	0x1fd
 883 0073 48000000 		.4byte	0x48
 884 0077 02       		.uleb128 0x2
 885 0078 04       		.byte	0x4
 886 0079 04       		.byte	0x4
 887 007a AE000000 		.4byte	.LASF9
 888 007e 02       		.uleb128 0x2
 889 007f 08       		.byte	0x8
 890 0080 04       		.byte	0x4
 891 0081 4F010000 		.4byte	.LASF10
 892 0085 02       		.uleb128 0x2
 893 0086 01       		.byte	0x1
 894 0087 08       		.byte	0x8
 895 0088 37030000 		.4byte	.LASF11
 896 008c 04       		.uleb128 0x4
 897 008d 19000000 		.4byte	.LASF13
 898 0091 02       		.byte	0x2
 899 0092 9D02     		.2byte	0x29d
 900 0094 48000000 		.4byte	0x48
 901 0098 04       		.uleb128 0x4
 902 0099 22000000 		.4byte	.LASF14
 903 009d 02       		.byte	0x2
 904 009e A702     		.2byte	0x2a7
 905 00a0 A4000000 		.4byte	0xa4
 906 00a4 05       		.uleb128 0x5
 907 00a5 6B000000 		.4byte	0x6b
 908 00a9 06       		.uleb128 0x6
 909 00aa 04       		.byte	0x4
 910 00ab AF000000 		.4byte	0xaf
 911 00af 07       		.uleb128 0x7
 912 00b0 08       		.uleb128 0x8
 913 00b1 E9000000 		.4byte	.LASF15
 914 00b5 03       		.byte	0x3
 915 00b6 58       		.byte	0x58
 916 00b7 A9000000 		.4byte	0xa9
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 55


 917 00bb 02       		.uleb128 0x2
 918 00bc 08       		.byte	0x8
 919 00bd 04       		.byte	0x4
 920 00be 66010000 		.4byte	.LASF16
 921 00c2 02       		.uleb128 0x2
 922 00c3 04       		.byte	0x4
 923 00c4 07       		.byte	0x7
 924 00c5 F1020000 		.4byte	.LASF17
 925 00c9 09       		.uleb128 0x9
 926 00ca 5C000000 		.4byte	.LASF18
 927 00ce 01       		.byte	0x1
 928 00cf 53       		.byte	0x53
 929 00d0 00000000 		.4byte	.LFB0
 930 00d4 14000000 		.4byte	.LFE0-.LFB0
 931 00d8 01       		.uleb128 0x1
 932 00d9 9C       		.byte	0x9c
 933 00da 09       		.uleb128 0x9
 934 00db F7000000 		.4byte	.LASF19
 935 00df 01       		.byte	0x1
 936 00e0 6C       		.byte	0x6c
 937 00e1 00000000 		.4byte	.LFB1
 938 00e5 10000000 		.4byte	.LFE1-.LFB1
 939 00e9 01       		.uleb128 0x1
 940 00ea 9C       		.byte	0x9c
 941 00eb 09       		.uleb128 0x9
 942 00ec 72010000 		.4byte	.LASF20
 943 00f0 01       		.byte	0x1
 944 00f1 A8       		.byte	0xa8
 945 00f2 00000000 		.4byte	.LFB2
 946 00f6 34000000 		.4byte	.LFE2-.LFB2
 947 00fa 01       		.uleb128 0x1
 948 00fb 9C       		.byte	0x9c
 949 00fc 09       		.uleb128 0x9
 950 00fd 34010000 		.4byte	.LASF21
 951 0101 01       		.byte	0x1
 952 0102 C9       		.byte	0xc9
 953 0103 00000000 		.4byte	.LFB3
 954 0107 28000000 		.4byte	.LFE3-.LFB3
 955 010b 01       		.uleb128 0x1
 956 010c 9C       		.byte	0x9c
 957 010d 0A       		.uleb128 0xa
 958 010e 10040000 		.4byte	.LASF42
 959 0112 01       		.byte	0x1
 960 0113 0B01     		.2byte	0x10b
 961 0115 8C000000 		.4byte	0x8c
 962 0119 00000000 		.4byte	.LFB4
 963 011d 0C010000 		.4byte	.LFE4-.LFB4
 964 0121 01       		.uleb128 0x1
 965 0122 9C       		.byte	0x9c
 966 0123 9A010000 		.4byte	0x19a
 967 0127 0B       		.uleb128 0xb
 968 0128 2A030000 		.4byte	.LASF22
 969 012c 01       		.byte	0x1
 970 012d 0B01     		.2byte	0x10b
 971 012f 6B000000 		.4byte	0x6b
 972 0133 00000000 		.4byte	.LLST0
 973 0137 0B       		.uleb128 0xb
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 56


 974 0138 1E020000 		.4byte	.LASF23
 975 013c 01       		.byte	0x1
 976 013d 0B01     		.2byte	0x10b
 977 013f 9A010000 		.4byte	0x19a
 978 0143 E9000000 		.4byte	.LLST1
 979 0147 0C       		.uleb128 0xc
 980 0148 47000000 		.4byte	.LASF24
 981 014c 01       		.byte	0x1
 982 014d 0D01     		.2byte	0x10d
 983 014f 6B000000 		.4byte	0x6b
 984 0153 2B010000 		.4byte	.LLST2
 985 0157 0C       		.uleb128 0xc
 986 0158 DA010000 		.4byte	.LASF25
 987 015c 01       		.byte	0x1
 988 015d 0E01     		.2byte	0x10e
 989 015f 6B000000 		.4byte	0x6b
 990 0163 55010000 		.4byte	.LLST3
 991 0167 0D       		.uleb128 0xd
 992 0168 B5010000 		.4byte	.LASF26
 993 016c 01       		.byte	0x1
 994 016d 0F01     		.2byte	0x10f
 995 016f 6B000000 		.4byte	0x6b
 996 0173 05       		.uleb128 0x5
 997 0174 03       		.byte	0x3
 998 0175 00000000 		.4byte	compensateRunningStatus.4794
 999 0179 0C       		.uleb128 0xc
 1000 017a 6D000000 		.4byte	.LASF27
 1001 017e 01       		.byte	0x1
 1002 017f 1001     		.2byte	0x110
 1003 0181 6B000000 		.4byte	0x6b
 1004 0185 89010000 		.4byte	.LLST4
 1005 0189 0C       		.uleb128 0xc
 1006 018a DA030000 		.4byte	.LASF28
 1007 018e 01       		.byte	0x1
 1008 018f 1101     		.2byte	0x111
 1009 0191 8C000000 		.4byte	0x8c
 1010 0195 A7010000 		.4byte	.LLST5
 1011 0199 00       		.byte	0
 1012 019a 06       		.uleb128 0x6
 1013 019b 04       		.byte	0x4
 1014 019c 6B000000 		.4byte	0x6b
 1015 01a0 0E       		.uleb128 0xe
 1016 01a1 00000000 		.4byte	.LASF32
 1017 01a5 01       		.byte	0x1
 1018 01a6 7E07     		.2byte	0x77e
 1019 01a8 6B000000 		.4byte	0x6b
 1020 01ac 00000000 		.4byte	.LFB5
 1021 01b0 1C000000 		.4byte	.LFE5-.LFB5
 1022 01b4 01       		.uleb128 0x1
 1023 01b5 9C       		.byte	0x9c
 1024 01b6 0F       		.uleb128 0xf
 1025 01b7 8E010000 		.4byte	.LASF29
 1026 01bb 01       		.byte	0x1
 1027 01bc 9107     		.2byte	0x791
 1028 01be 00000000 		.4byte	.LFB6
 1029 01c2 0C000000 		.4byte	.LFE6-.LFB6
 1030 01c6 01       		.uleb128 0x1
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 57


 1031 01c7 9C       		.byte	0x9c
 1032 01c8 0F       		.uleb128 0xf
 1033 01c9 56010000 		.4byte	.LASF30
 1034 01cd 01       		.byte	0x1
 1035 01ce A107     		.2byte	0x7a1
 1036 01d0 00000000 		.4byte	.LFB7
 1037 01d4 10000000 		.4byte	.LFE7-.LFB7
 1038 01d8 01       		.uleb128 0x1
 1039 01d9 9C       		.byte	0x9c
 1040 01da 10       		.uleb128 0x10
 1041 01db 28000000 		.4byte	.LASF35
 1042 01df 01       		.byte	0x1
 1043 01e0 B107     		.2byte	0x7b1
 1044 01e2 00000000 		.4byte	.LFB8
 1045 01e6 18000000 		.4byte	.LFE8-.LFB8
 1046 01ea 01       		.uleb128 0x1
 1047 01eb 9C       		.byte	0x9c
 1048 01ec 01020000 		.4byte	0x201
 1049 01f0 0B       		.uleb128 0xb
 1050 01f1 E3000000 		.4byte	.LASF31
 1051 01f5 01       		.byte	0x1
 1052 01f6 B107     		.2byte	0x7b1
 1053 01f8 6B000000 		.4byte	0x6b
 1054 01fc D2010000 		.4byte	.LLST6
 1055 0200 00       		.byte	0
 1056 0201 0E       		.uleb128 0xe
 1057 0202 3C030000 		.4byte	.LASF33
 1058 0206 01       		.byte	0x1
 1059 0207 C107     		.2byte	0x7c1
 1060 0209 6B000000 		.4byte	0x6b
 1061 020d 00000000 		.4byte	.LFB9
 1062 0211 10000000 		.4byte	.LFE9-.LFB9
 1063 0215 01       		.uleb128 0x1
 1064 0216 9C       		.byte	0x9c
 1065 0217 0E       		.uleb128 0xe
 1066 0218 9D010000 		.4byte	.LASF34
 1067 021c 01       		.byte	0x1
 1068 021d D007     		.2byte	0x7d0
 1069 021f 6B000000 		.4byte	0x6b
 1070 0223 00000000 		.4byte	.LFB10
 1071 0227 0C000000 		.4byte	.LFE10-.LFB10
 1072 022b 01       		.uleb128 0x1
 1073 022c 9C       		.byte	0x9c
 1074 022d 10       		.uleb128 0x10
 1075 022e 4D030000 		.4byte	.LASF36
 1076 0232 01       		.byte	0x1
 1077 0233 E407     		.2byte	0x7e4
 1078 0235 00000000 		.4byte	.LFB11
 1079 0239 20000000 		.4byte	.LFE11-.LFB11
 1080 023d 01       		.uleb128 0x1
 1081 023e 9C       		.byte	0x9c
 1082 023f 54020000 		.4byte	0x254
 1083 0243 0B       		.uleb128 0xb
 1084 0244 19010000 		.4byte	.LASF37
 1085 0248 01       		.byte	0x1
 1086 0249 E407     		.2byte	0x7e4
 1087 024b 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 58


 1088 024f 10020000 		.4byte	.LLST7
 1089 0253 00       		.byte	0
 1090 0254 0E       		.uleb128 0xe
 1091 0255 06030000 		.4byte	.LASF38
 1092 0259 01       		.byte	0x1
 1093 025a F607     		.2byte	0x7f6
 1094 025c 6B000000 		.4byte	0x6b
 1095 0260 00000000 		.4byte	.LFB12
 1096 0264 10000000 		.4byte	.LFE12-.LFB12
 1097 0268 01       		.uleb128 0x1
 1098 0269 9C       		.byte	0x9c
 1099 026a 0F       		.uleb128 0xf
 1100 026b 86000000 		.4byte	.LASF39
 1101 026f 01       		.byte	0x1
 1102 0270 0708     		.2byte	0x807
 1103 0272 00000000 		.4byte	.LFB13
 1104 0276 10000000 		.4byte	.LFE13-.LFB13
 1105 027a 01       		.uleb128 0x1
 1106 027b 9C       		.byte	0x9c
 1107 027c 0F       		.uleb128 0xf
 1108 027d DB020000 		.4byte	.LASF40
 1109 0281 01       		.byte	0x1
 1110 0282 1608     		.2byte	0x816
 1111 0284 00000000 		.4byte	.LFB14
 1112 0288 10000000 		.4byte	.LFE14-.LFB14
 1113 028c 01       		.uleb128 0x1
 1114 028d 9C       		.byte	0x9c
 1115 028e 0F       		.uleb128 0xf
 1116 028f 06020000 		.4byte	.LASF41
 1117 0293 01       		.byte	0x1
 1118 0294 2508     		.2byte	0x825
 1119 0296 00000000 		.4byte	.LFB15
 1120 029a 10000000 		.4byte	.LFE15-.LFB15
 1121 029e 01       		.uleb128 0x1
 1122 029f 9C       		.byte	0x9c
 1123 02a0 11       		.uleb128 0x11
 1124 02a1 BE020000 		.4byte	.LASF43
 1125 02a5 01       		.byte	0x1
 1126 02a6 3708     		.2byte	0x837
 1127 02a8 B0000000 		.4byte	0xb0
 1128 02ac 00000000 		.4byte	.LFB16
 1129 02b0 10000000 		.4byte	.LFE16-.LFB16
 1130 02b4 01       		.uleb128 0x1
 1131 02b5 9C       		.byte	0x9c
 1132 02b6 DB020000 		.4byte	0x2db
 1133 02ba 0B       		.uleb128 0xb
 1134 02bb 26040000 		.4byte	.LASF44
 1135 02bf 01       		.byte	0x1
 1136 02c0 3708     		.2byte	0x837
 1137 02c2 B0000000 		.4byte	0xb0
 1138 02c6 50020000 		.4byte	.LLST8
 1139 02ca 0C       		.uleb128 0xc
 1140 02cb 79000000 		.4byte	.LASF45
 1141 02cf 01       		.byte	0x1
 1142 02d0 3908     		.2byte	0x839
 1143 02d2 B0000000 		.4byte	0xb0
 1144 02d6 72020000 		.4byte	.LLST9
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 59


 1145 02da 00       		.byte	0
 1146 02db 0E       		.uleb128 0xe
 1147 02dc F3030000 		.4byte	.LASF46
 1148 02e0 01       		.byte	0x1
 1149 02e1 4C08     		.2byte	0x84c
 1150 02e3 B0000000 		.4byte	0xb0
 1151 02e7 00000000 		.4byte	.LFB17
 1152 02eb 0C000000 		.4byte	.LFE17-.LFB17
 1153 02ef 01       		.uleb128 0x1
 1154 02f0 9C       		.byte	0x9c
 1155 02f1 12       		.uleb128 0x12
 1156 02f2 FA020000 		.4byte	.LASF47
 1157 02f6 01       		.byte	0x1
 1158 02f7 6408     		.2byte	0x864
 1159 02f9 00000000 		.4byte	.LFB18
 1160 02fd 18000000 		.4byte	.LFE18-.LFB18
 1161 0301 01       		.uleb128 0x1
 1162 0302 9C       		.byte	0x9c
 1163 0303 11030000 		.4byte	0x311
 1164 0307 13       		.uleb128 0x13
 1165 0308 10000000 		.4byte	.LVL49
 1166 030c 6A020000 		.4byte	0x26a
 1167 0310 00       		.byte	0
 1168 0311 14       		.uleb128 0x14
 1169 0312 9D000000 		.4byte	.LASF48
 1170 0316 01       		.byte	0x1
 1171 0317 46       		.byte	0x46
 1172 0318 B0000000 		.4byte	0xb0
 1173 031c 05       		.uleb128 0x5
 1174 031d 03       		.byte	0x3
 1175 031e 04000000 		.4byte	cySysWdtCallback
 1176 0322 15       		.uleb128 0x15
 1177 0323 39000000 		.4byte	.LASF52
 1178 0327 04       		.byte	0x4
 1179 0328 E7       		.byte	0xe7
 1180 0329 6B000000 		.4byte	0x6b
 1181 032d 00       		.byte	0
 1182              		.section	.debug_abbrev,"",%progbits
 1183              	.Ldebug_abbrev0:
 1184 0000 01       		.uleb128 0x1
 1185 0001 11       		.uleb128 0x11
 1186 0002 01       		.byte	0x1
 1187 0003 25       		.uleb128 0x25
 1188 0004 0E       		.uleb128 0xe
 1189 0005 13       		.uleb128 0x13
 1190 0006 0B       		.uleb128 0xb
 1191 0007 03       		.uleb128 0x3
 1192 0008 0E       		.uleb128 0xe
 1193 0009 1B       		.uleb128 0x1b
 1194 000a 0E       		.uleb128 0xe
 1195 000b 55       		.uleb128 0x55
 1196 000c 17       		.uleb128 0x17
 1197 000d 11       		.uleb128 0x11
 1198 000e 01       		.uleb128 0x1
 1199 000f 10       		.uleb128 0x10
 1200 0010 17       		.uleb128 0x17
 1201 0011 00       		.byte	0
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 60


 1202 0012 00       		.byte	0
 1203 0013 02       		.uleb128 0x2
 1204 0014 24       		.uleb128 0x24
 1205 0015 00       		.byte	0
 1206 0016 0B       		.uleb128 0xb
 1207 0017 0B       		.uleb128 0xb
 1208 0018 3E       		.uleb128 0x3e
 1209 0019 0B       		.uleb128 0xb
 1210 001a 03       		.uleb128 0x3
 1211 001b 0E       		.uleb128 0xe
 1212 001c 00       		.byte	0
 1213 001d 00       		.byte	0
 1214 001e 03       		.uleb128 0x3
 1215 001f 24       		.uleb128 0x24
 1216 0020 00       		.byte	0
 1217 0021 0B       		.uleb128 0xb
 1218 0022 0B       		.uleb128 0xb
 1219 0023 3E       		.uleb128 0x3e
 1220 0024 0B       		.uleb128 0xb
 1221 0025 03       		.uleb128 0x3
 1222 0026 08       		.uleb128 0x8
 1223 0027 00       		.byte	0
 1224 0028 00       		.byte	0
 1225 0029 04       		.uleb128 0x4
 1226 002a 16       		.uleb128 0x16
 1227 002b 00       		.byte	0
 1228 002c 03       		.uleb128 0x3
 1229 002d 0E       		.uleb128 0xe
 1230 002e 3A       		.uleb128 0x3a
 1231 002f 0B       		.uleb128 0xb
 1232 0030 3B       		.uleb128 0x3b
 1233 0031 05       		.uleb128 0x5
 1234 0032 49       		.uleb128 0x49
 1235 0033 13       		.uleb128 0x13
 1236 0034 00       		.byte	0
 1237 0035 00       		.byte	0
 1238 0036 05       		.uleb128 0x5
 1239 0037 35       		.uleb128 0x35
 1240 0038 00       		.byte	0
 1241 0039 49       		.uleb128 0x49
 1242 003a 13       		.uleb128 0x13
 1243 003b 00       		.byte	0
 1244 003c 00       		.byte	0
 1245 003d 06       		.uleb128 0x6
 1246 003e 0F       		.uleb128 0xf
 1247 003f 00       		.byte	0
 1248 0040 0B       		.uleb128 0xb
 1249 0041 0B       		.uleb128 0xb
 1250 0042 49       		.uleb128 0x49
 1251 0043 13       		.uleb128 0x13
 1252 0044 00       		.byte	0
 1253 0045 00       		.byte	0
 1254 0046 07       		.uleb128 0x7
 1255 0047 15       		.uleb128 0x15
 1256 0048 00       		.byte	0
 1257 0049 27       		.uleb128 0x27
 1258 004a 19       		.uleb128 0x19
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 61


 1259 004b 00       		.byte	0
 1260 004c 00       		.byte	0
 1261 004d 08       		.uleb128 0x8
 1262 004e 16       		.uleb128 0x16
 1263 004f 00       		.byte	0
 1264 0050 03       		.uleb128 0x3
 1265 0051 0E       		.uleb128 0xe
 1266 0052 3A       		.uleb128 0x3a
 1267 0053 0B       		.uleb128 0xb
 1268 0054 3B       		.uleb128 0x3b
 1269 0055 0B       		.uleb128 0xb
 1270 0056 49       		.uleb128 0x49
 1271 0057 13       		.uleb128 0x13
 1272 0058 00       		.byte	0
 1273 0059 00       		.byte	0
 1274 005a 09       		.uleb128 0x9
 1275 005b 2E       		.uleb128 0x2e
 1276 005c 00       		.byte	0
 1277 005d 3F       		.uleb128 0x3f
 1278 005e 19       		.uleb128 0x19
 1279 005f 03       		.uleb128 0x3
 1280 0060 0E       		.uleb128 0xe
 1281 0061 3A       		.uleb128 0x3a
 1282 0062 0B       		.uleb128 0xb
 1283 0063 3B       		.uleb128 0x3b
 1284 0064 0B       		.uleb128 0xb
 1285 0065 27       		.uleb128 0x27
 1286 0066 19       		.uleb128 0x19
 1287 0067 11       		.uleb128 0x11
 1288 0068 01       		.uleb128 0x1
 1289 0069 12       		.uleb128 0x12
 1290 006a 06       		.uleb128 0x6
 1291 006b 40       		.uleb128 0x40
 1292 006c 18       		.uleb128 0x18
 1293 006d 9742     		.uleb128 0x2117
 1294 006f 19       		.uleb128 0x19
 1295 0070 00       		.byte	0
 1296 0071 00       		.byte	0
 1297 0072 0A       		.uleb128 0xa
 1298 0073 2E       		.uleb128 0x2e
 1299 0074 01       		.byte	0x1
 1300 0075 3F       		.uleb128 0x3f
 1301 0076 19       		.uleb128 0x19
 1302 0077 03       		.uleb128 0x3
 1303 0078 0E       		.uleb128 0xe
 1304 0079 3A       		.uleb128 0x3a
 1305 007a 0B       		.uleb128 0xb
 1306 007b 3B       		.uleb128 0x3b
 1307 007c 05       		.uleb128 0x5
 1308 007d 27       		.uleb128 0x27
 1309 007e 19       		.uleb128 0x19
 1310 007f 49       		.uleb128 0x49
 1311 0080 13       		.uleb128 0x13
 1312 0081 11       		.uleb128 0x11
 1313 0082 01       		.uleb128 0x1
 1314 0083 12       		.uleb128 0x12
 1315 0084 06       		.uleb128 0x6
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 62


 1316 0085 40       		.uleb128 0x40
 1317 0086 18       		.uleb128 0x18
 1318 0087 9642     		.uleb128 0x2116
 1319 0089 19       		.uleb128 0x19
 1320 008a 01       		.uleb128 0x1
 1321 008b 13       		.uleb128 0x13
 1322 008c 00       		.byte	0
 1323 008d 00       		.byte	0
 1324 008e 0B       		.uleb128 0xb
 1325 008f 05       		.uleb128 0x5
 1326 0090 00       		.byte	0
 1327 0091 03       		.uleb128 0x3
 1328 0092 0E       		.uleb128 0xe
 1329 0093 3A       		.uleb128 0x3a
 1330 0094 0B       		.uleb128 0xb
 1331 0095 3B       		.uleb128 0x3b
 1332 0096 05       		.uleb128 0x5
 1333 0097 49       		.uleb128 0x49
 1334 0098 13       		.uleb128 0x13
 1335 0099 02       		.uleb128 0x2
 1336 009a 17       		.uleb128 0x17
 1337 009b 00       		.byte	0
 1338 009c 00       		.byte	0
 1339 009d 0C       		.uleb128 0xc
 1340 009e 34       		.uleb128 0x34
 1341 009f 00       		.byte	0
 1342 00a0 03       		.uleb128 0x3
 1343 00a1 0E       		.uleb128 0xe
 1344 00a2 3A       		.uleb128 0x3a
 1345 00a3 0B       		.uleb128 0xb
 1346 00a4 3B       		.uleb128 0x3b
 1347 00a5 05       		.uleb128 0x5
 1348 00a6 49       		.uleb128 0x49
 1349 00a7 13       		.uleb128 0x13
 1350 00a8 02       		.uleb128 0x2
 1351 00a9 17       		.uleb128 0x17
 1352 00aa 00       		.byte	0
 1353 00ab 00       		.byte	0
 1354 00ac 0D       		.uleb128 0xd
 1355 00ad 34       		.uleb128 0x34
 1356 00ae 00       		.byte	0
 1357 00af 03       		.uleb128 0x3
 1358 00b0 0E       		.uleb128 0xe
 1359 00b1 3A       		.uleb128 0x3a
 1360 00b2 0B       		.uleb128 0xb
 1361 00b3 3B       		.uleb128 0x3b
 1362 00b4 05       		.uleb128 0x5
 1363 00b5 49       		.uleb128 0x49
 1364 00b6 13       		.uleb128 0x13
 1365 00b7 02       		.uleb128 0x2
 1366 00b8 18       		.uleb128 0x18
 1367 00b9 00       		.byte	0
 1368 00ba 00       		.byte	0
 1369 00bb 0E       		.uleb128 0xe
 1370 00bc 2E       		.uleb128 0x2e
 1371 00bd 00       		.byte	0
 1372 00be 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 63


 1373 00bf 19       		.uleb128 0x19
 1374 00c0 03       		.uleb128 0x3
 1375 00c1 0E       		.uleb128 0xe
 1376 00c2 3A       		.uleb128 0x3a
 1377 00c3 0B       		.uleb128 0xb
 1378 00c4 3B       		.uleb128 0x3b
 1379 00c5 05       		.uleb128 0x5
 1380 00c6 27       		.uleb128 0x27
 1381 00c7 19       		.uleb128 0x19
 1382 00c8 49       		.uleb128 0x49
 1383 00c9 13       		.uleb128 0x13
 1384 00ca 11       		.uleb128 0x11
 1385 00cb 01       		.uleb128 0x1
 1386 00cc 12       		.uleb128 0x12
 1387 00cd 06       		.uleb128 0x6
 1388 00ce 40       		.uleb128 0x40
 1389 00cf 18       		.uleb128 0x18
 1390 00d0 9742     		.uleb128 0x2117
 1391 00d2 19       		.uleb128 0x19
 1392 00d3 00       		.byte	0
 1393 00d4 00       		.byte	0
 1394 00d5 0F       		.uleb128 0xf
 1395 00d6 2E       		.uleb128 0x2e
 1396 00d7 00       		.byte	0
 1397 00d8 3F       		.uleb128 0x3f
 1398 00d9 19       		.uleb128 0x19
 1399 00da 03       		.uleb128 0x3
 1400 00db 0E       		.uleb128 0xe
 1401 00dc 3A       		.uleb128 0x3a
 1402 00dd 0B       		.uleb128 0xb
 1403 00de 3B       		.uleb128 0x3b
 1404 00df 05       		.uleb128 0x5
 1405 00e0 27       		.uleb128 0x27
 1406 00e1 19       		.uleb128 0x19
 1407 00e2 11       		.uleb128 0x11
 1408 00e3 01       		.uleb128 0x1
 1409 00e4 12       		.uleb128 0x12
 1410 00e5 06       		.uleb128 0x6
 1411 00e6 40       		.uleb128 0x40
 1412 00e7 18       		.uleb128 0x18
 1413 00e8 9742     		.uleb128 0x2117
 1414 00ea 19       		.uleb128 0x19
 1415 00eb 00       		.byte	0
 1416 00ec 00       		.byte	0
 1417 00ed 10       		.uleb128 0x10
 1418 00ee 2E       		.uleb128 0x2e
 1419 00ef 01       		.byte	0x1
 1420 00f0 3F       		.uleb128 0x3f
 1421 00f1 19       		.uleb128 0x19
 1422 00f2 03       		.uleb128 0x3
 1423 00f3 0E       		.uleb128 0xe
 1424 00f4 3A       		.uleb128 0x3a
 1425 00f5 0B       		.uleb128 0xb
 1426 00f6 3B       		.uleb128 0x3b
 1427 00f7 05       		.uleb128 0x5
 1428 00f8 27       		.uleb128 0x27
 1429 00f9 19       		.uleb128 0x19
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 64


 1430 00fa 11       		.uleb128 0x11
 1431 00fb 01       		.uleb128 0x1
 1432 00fc 12       		.uleb128 0x12
 1433 00fd 06       		.uleb128 0x6
 1434 00fe 40       		.uleb128 0x40
 1435 00ff 18       		.uleb128 0x18
 1436 0100 9742     		.uleb128 0x2117
 1437 0102 19       		.uleb128 0x19
 1438 0103 01       		.uleb128 0x1
 1439 0104 13       		.uleb128 0x13
 1440 0105 00       		.byte	0
 1441 0106 00       		.byte	0
 1442 0107 11       		.uleb128 0x11
 1443 0108 2E       		.uleb128 0x2e
 1444 0109 01       		.byte	0x1
 1445 010a 3F       		.uleb128 0x3f
 1446 010b 19       		.uleb128 0x19
 1447 010c 03       		.uleb128 0x3
 1448 010d 0E       		.uleb128 0xe
 1449 010e 3A       		.uleb128 0x3a
 1450 010f 0B       		.uleb128 0xb
 1451 0110 3B       		.uleb128 0x3b
 1452 0111 05       		.uleb128 0x5
 1453 0112 27       		.uleb128 0x27
 1454 0113 19       		.uleb128 0x19
 1455 0114 49       		.uleb128 0x49
 1456 0115 13       		.uleb128 0x13
 1457 0116 11       		.uleb128 0x11
 1458 0117 01       		.uleb128 0x1
 1459 0118 12       		.uleb128 0x12
 1460 0119 06       		.uleb128 0x6
 1461 011a 40       		.uleb128 0x40
 1462 011b 18       		.uleb128 0x18
 1463 011c 9742     		.uleb128 0x2117
 1464 011e 19       		.uleb128 0x19
 1465 011f 01       		.uleb128 0x1
 1466 0120 13       		.uleb128 0x13
 1467 0121 00       		.byte	0
 1468 0122 00       		.byte	0
 1469 0123 12       		.uleb128 0x12
 1470 0124 2E       		.uleb128 0x2e
 1471 0125 01       		.byte	0x1
 1472 0126 3F       		.uleb128 0x3f
 1473 0127 19       		.uleb128 0x19
 1474 0128 03       		.uleb128 0x3
 1475 0129 0E       		.uleb128 0xe
 1476 012a 3A       		.uleb128 0x3a
 1477 012b 0B       		.uleb128 0xb
 1478 012c 3B       		.uleb128 0x3b
 1479 012d 05       		.uleb128 0x5
 1480 012e 27       		.uleb128 0x27
 1481 012f 19       		.uleb128 0x19
 1482 0130 11       		.uleb128 0x11
 1483 0131 01       		.uleb128 0x1
 1484 0132 12       		.uleb128 0x12
 1485 0133 06       		.uleb128 0x6
 1486 0134 40       		.uleb128 0x40
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 65


 1487 0135 18       		.uleb128 0x18
 1488 0136 9642     		.uleb128 0x2116
 1489 0138 19       		.uleb128 0x19
 1490 0139 01       		.uleb128 0x1
 1491 013a 13       		.uleb128 0x13
 1492 013b 00       		.byte	0
 1493 013c 00       		.byte	0
 1494 013d 13       		.uleb128 0x13
 1495 013e 898201   		.uleb128 0x4109
 1496 0141 00       		.byte	0
 1497 0142 11       		.uleb128 0x11
 1498 0143 01       		.uleb128 0x1
 1499 0144 31       		.uleb128 0x31
 1500 0145 13       		.uleb128 0x13
 1501 0146 00       		.byte	0
 1502 0147 00       		.byte	0
 1503 0148 14       		.uleb128 0x14
 1504 0149 34       		.uleb128 0x34
 1505 014a 00       		.byte	0
 1506 014b 03       		.uleb128 0x3
 1507 014c 0E       		.uleb128 0xe
 1508 014d 3A       		.uleb128 0x3a
 1509 014e 0B       		.uleb128 0xb
 1510 014f 3B       		.uleb128 0x3b
 1511 0150 0B       		.uleb128 0xb
 1512 0151 49       		.uleb128 0x49
 1513 0152 13       		.uleb128 0x13
 1514 0153 02       		.uleb128 0x2
 1515 0154 18       		.uleb128 0x18
 1516 0155 00       		.byte	0
 1517 0156 00       		.byte	0
 1518 0157 15       		.uleb128 0x15
 1519 0158 34       		.uleb128 0x34
 1520 0159 00       		.byte	0
 1521 015a 03       		.uleb128 0x3
 1522 015b 0E       		.uleb128 0xe
 1523 015c 3A       		.uleb128 0x3a
 1524 015d 0B       		.uleb128 0xb
 1525 015e 3B       		.uleb128 0x3b
 1526 015f 0B       		.uleb128 0xb
 1527 0160 49       		.uleb128 0x49
 1528 0161 13       		.uleb128 0x13
 1529 0162 3F       		.uleb128 0x3f
 1530 0163 19       		.uleb128 0x19
 1531 0164 3C       		.uleb128 0x3c
 1532 0165 19       		.uleb128 0x19
 1533 0166 00       		.byte	0
 1534 0167 00       		.byte	0
 1535 0168 00       		.byte	0
 1536              		.section	.debug_loc,"",%progbits
 1537              	.Ldebug_loc0:
 1538              	.LLST0:
 1539 0000 00000000 		.4byte	.LVL0
 1540 0004 48000000 		.4byte	.LVL3
 1541 0008 0100     		.2byte	0x1
 1542 000a 50       		.byte	0x50
 1543 000b 48000000 		.4byte	.LVL3
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 66


 1544 000f A2000000 		.4byte	.LVL19
 1545 0013 0400     		.2byte	0x4
 1546 0015 F3       		.byte	0xf3
 1547 0016 01       		.uleb128 0x1
 1548 0017 50       		.byte	0x50
 1549 0018 9F       		.byte	0x9f
 1550 0019 A2000000 		.4byte	.LVL19
 1551 001d B4000000 		.4byte	.LVL21
 1552 0021 0100     		.2byte	0x1
 1553 0023 50       		.byte	0x50
 1554 0024 B4000000 		.4byte	.LVL21
 1555 0028 B6000000 		.4byte	.LVL22
 1556 002c 0400     		.2byte	0x4
 1557 002e F3       		.byte	0xf3
 1558 002f 01       		.uleb128 0x1
 1559 0030 50       		.byte	0x50
 1560 0031 9F       		.byte	0x9f
 1561 0032 B6000000 		.4byte	.LVL22
 1562 0036 B8000000 		.4byte	.LVL23
 1563 003a 0100     		.2byte	0x1
 1564 003c 50       		.byte	0x50
 1565 003d B8000000 		.4byte	.LVL23
 1566 0041 BA000000 		.4byte	.LVL24
 1567 0045 0400     		.2byte	0x4
 1568 0047 F3       		.byte	0xf3
 1569 0048 01       		.uleb128 0x1
 1570 0049 50       		.byte	0x50
 1571 004a 9F       		.byte	0x9f
 1572 004b BA000000 		.4byte	.LVL24
 1573 004f BC000000 		.4byte	.LVL25
 1574 0053 0100     		.2byte	0x1
 1575 0055 50       		.byte	0x50
 1576 0056 BC000000 		.4byte	.LVL25
 1577 005a BE000000 		.4byte	.LVL26
 1578 005e 0400     		.2byte	0x4
 1579 0060 F3       		.byte	0xf3
 1580 0061 01       		.uleb128 0x1
 1581 0062 50       		.byte	0x50
 1582 0063 9F       		.byte	0x9f
 1583 0064 BE000000 		.4byte	.LVL26
 1584 0068 C0000000 		.4byte	.LVL27
 1585 006c 0100     		.2byte	0x1
 1586 006e 50       		.byte	0x50
 1587 006f C0000000 		.4byte	.LVL27
 1588 0073 C2000000 		.4byte	.LVL28
 1589 0077 0400     		.2byte	0x4
 1590 0079 F3       		.byte	0xf3
 1591 007a 01       		.uleb128 0x1
 1592 007b 50       		.byte	0x50
 1593 007c 9F       		.byte	0x9f
 1594 007d C2000000 		.4byte	.LVL28
 1595 0081 C4000000 		.4byte	.LVL29
 1596 0085 0100     		.2byte	0x1
 1597 0087 50       		.byte	0x50
 1598 0088 C4000000 		.4byte	.LVL29
 1599 008c C6000000 		.4byte	.LVL30
 1600 0090 0400     		.2byte	0x4
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 67


 1601 0092 F3       		.byte	0xf3
 1602 0093 01       		.uleb128 0x1
 1603 0094 50       		.byte	0x50
 1604 0095 9F       		.byte	0x9f
 1605 0096 C6000000 		.4byte	.LVL30
 1606 009a C8000000 		.4byte	.LVL31
 1607 009e 0100     		.2byte	0x1
 1608 00a0 50       		.byte	0x50
 1609 00a1 C8000000 		.4byte	.LVL31
 1610 00a5 CA000000 		.4byte	.LVL32
 1611 00a9 0400     		.2byte	0x4
 1612 00ab F3       		.byte	0xf3
 1613 00ac 01       		.uleb128 0x1
 1614 00ad 50       		.byte	0x50
 1615 00ae 9F       		.byte	0x9f
 1616 00af CA000000 		.4byte	.LVL32
 1617 00b3 CC000000 		.4byte	.LVL33
 1618 00b7 0100     		.2byte	0x1
 1619 00b9 50       		.byte	0x50
 1620 00ba CC000000 		.4byte	.LVL33
 1621 00be CE000000 		.4byte	.LVL34
 1622 00c2 0400     		.2byte	0x4
 1623 00c4 F3       		.byte	0xf3
 1624 00c5 01       		.uleb128 0x1
 1625 00c6 50       		.byte	0x50
 1626 00c7 9F       		.byte	0x9f
 1627 00c8 CE000000 		.4byte	.LVL34
 1628 00cc D0000000 		.4byte	.LVL35
 1629 00d0 0100     		.2byte	0x1
 1630 00d2 50       		.byte	0x50
 1631 00d3 D0000000 		.4byte	.LVL35
 1632 00d7 0C010000 		.4byte	.LFE4
 1633 00db 0400     		.2byte	0x4
 1634 00dd F3       		.byte	0xf3
 1635 00de 01       		.uleb128 0x1
 1636 00df 50       		.byte	0x50
 1637 00e0 9F       		.byte	0x9f
 1638 00e1 00000000 		.4byte	0
 1639 00e5 00000000 		.4byte	0
 1640              	.LLST1:
 1641 00e9 00000000 		.4byte	.LVL0
 1642 00ed 4E000000 		.4byte	.LVL4
 1643 00f1 0100     		.2byte	0x1
 1644 00f3 51       		.byte	0x51
 1645 00f4 4E000000 		.4byte	.LVL4
 1646 00f8 A2000000 		.4byte	.LVL19
 1647 00fc 0100     		.2byte	0x1
 1648 00fe 54       		.byte	0x54
 1649 00ff A2000000 		.4byte	.LVL19
 1650 0103 D0000000 		.4byte	.LVL35
 1651 0107 0100     		.2byte	0x1
 1652 0109 51       		.byte	0x51
 1653 010a D0000000 		.4byte	.LVL35
 1654 010e D0000000 		.4byte	.LVL36
 1655 0112 0100     		.2byte	0x1
 1656 0114 54       		.byte	0x54
 1657 0115 D0000000 		.4byte	.LVL36
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 68


 1658 0119 0C010000 		.4byte	.LFE4
 1659 011d 0400     		.2byte	0x4
 1660 011f F3       		.byte	0xf3
 1661 0120 01       		.uleb128 0x1
 1662 0121 51       		.byte	0x51
 1663 0122 9F       		.byte	0x9f
 1664 0123 00000000 		.4byte	0
 1665 0127 00000000 		.4byte	0
 1666              	.LLST2:
 1667 012b 7E000000 		.4byte	.LVL12
 1668 012f 80000000 		.4byte	.LVL13
 1669 0133 0100     		.2byte	0x1
 1670 0135 50       		.byte	0x50
 1671 0136 98000000 		.4byte	.LVL16
 1672 013a 9C000000 		.4byte	.LVL17
 1673 013e 0100     		.2byte	0x1
 1674 0140 50       		.byte	0x50
 1675 0141 9C000000 		.4byte	.LVL17
 1676 0145 A2000000 		.4byte	.LVL19
 1677 0149 0200     		.2byte	0x2
 1678 014b 74       		.byte	0x74
 1679 014c 00       		.sleb128 0
 1680 014d 00000000 		.4byte	0
 1681 0151 00000000 		.4byte	0
 1682              	.LLST3:
 1683 0155 56000000 		.4byte	.LVL6
 1684 0159 60000000 		.4byte	.LVL7
 1685 015d 0100     		.2byte	0x1
 1686 015f 50       		.byte	0x50
 1687 0160 60000000 		.4byte	.LVL7
 1688 0164 74000000 		.4byte	.LVL10
 1689 0168 0100     		.2byte	0x1
 1690 016a 56       		.byte	0x56
 1691 016b 80000000 		.4byte	.LVL13
 1692 016f 84000000 		.4byte	.LVL14
 1693 0173 0100     		.2byte	0x1
 1694 0175 50       		.byte	0x50
 1695 0176 84000000 		.4byte	.LVL14
 1696 017a 98000000 		.4byte	.LVL16
 1697 017e 0100     		.2byte	0x1
 1698 0180 56       		.byte	0x56
 1699 0181 00000000 		.4byte	0
 1700 0185 00000000 		.4byte	0
 1701              	.LLST4:
 1702 0189 0C000000 		.4byte	.LVL1
 1703 018d 16000000 		.4byte	.LVL2
 1704 0191 0100     		.2byte	0x1
 1705 0193 53       		.byte	0x53
 1706 0194 B6000000 		.4byte	.LVL22
 1707 0198 BA000000 		.4byte	.LVL24
 1708 019c 0100     		.2byte	0x1
 1709 019e 53       		.byte	0x53
 1710 019f 00000000 		.4byte	0
 1711 01a3 00000000 		.4byte	0
 1712              	.LLST5:
 1713 01a7 A0000000 		.4byte	.LVL18
 1714 01ab A2000000 		.4byte	.LVL19
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 69


 1715 01af 0200     		.2byte	0x2
 1716 01b1 30       		.byte	0x30
 1717 01b2 9F       		.byte	0x9f
 1718 01b3 B2000000 		.4byte	.LVL20
 1719 01b7 B6000000 		.4byte	.LVL22
 1720 01bb 0200     		.2byte	0x2
 1721 01bd 37       		.byte	0x37
 1722 01be 9F       		.byte	0x9f
 1723 01bf D0000000 		.4byte	.LVL35
 1724 01c3 0C010000 		.4byte	.LFE4
 1725 01c7 0100     		.2byte	0x1
 1726 01c9 50       		.byte	0x50
 1727 01ca 00000000 		.4byte	0
 1728 01ce 00000000 		.4byte	0
 1729              	.LLST6:
 1730 01d2 00000000 		.4byte	.LVL37
 1731 01d6 02000000 		.4byte	.LVL38
 1732 01da 0100     		.2byte	0x1
 1733 01dc 50       		.byte	0x50
 1734 01dd 02000000 		.4byte	.LVL38
 1735 01e1 04000000 		.4byte	.LVL39
 1736 01e5 0400     		.2byte	0x4
 1737 01e7 F3       		.byte	0xf3
 1738 01e8 01       		.uleb128 0x1
 1739 01e9 50       		.byte	0x50
 1740 01ea 9F       		.byte	0x9f
 1741 01eb 04000000 		.4byte	.LVL39
 1742 01ef 0E000000 		.4byte	.LVL40
 1743 01f3 0100     		.2byte	0x1
 1744 01f5 50       		.byte	0x50
 1745 01f6 0E000000 		.4byte	.LVL40
 1746 01fa 18000000 		.4byte	.LFE8
 1747 01fe 0800     		.2byte	0x8
 1748 0200 F3       		.byte	0xf3
 1749 0201 01       		.uleb128 0x1
 1750 0202 50       		.byte	0x50
 1751 0203 40       		.byte	0x40
 1752 0204 24       		.byte	0x24
 1753 0205 40       		.byte	0x40
 1754 0206 25       		.byte	0x25
 1755 0207 9F       		.byte	0x9f
 1756 0208 00000000 		.4byte	0
 1757 020c 00000000 		.4byte	0
 1758              	.LLST7:
 1759 0210 00000000 		.4byte	.LVL41
 1760 0214 02000000 		.4byte	.LVL42
 1761 0218 0100     		.2byte	0x1
 1762 021a 50       		.byte	0x50
 1763 021b 02000000 		.4byte	.LVL42
 1764 021f 0A000000 		.4byte	.LVL43
 1765 0223 0400     		.2byte	0x4
 1766 0225 F3       		.byte	0xf3
 1767 0226 01       		.uleb128 0x1
 1768 0227 50       		.byte	0x50
 1769 0228 9F       		.byte	0x9f
 1770 0229 0A000000 		.4byte	.LVL43
 1771 022d 14000000 		.4byte	.LVL44
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 70


 1772 0231 0100     		.2byte	0x1
 1773 0233 52       		.byte	0x52
 1774 0234 14000000 		.4byte	.LVL44
 1775 0238 20000000 		.4byte	.LFE11
 1776 023c 0A00     		.2byte	0xa
 1777 023e F3       		.byte	0xf3
 1778 023f 01       		.uleb128 0x1
 1779 0240 50       		.byte	0x50
 1780 0241 40       		.byte	0x40
 1781 0242 24       		.byte	0x24
 1782 0243 4E       		.byte	0x4e
 1783 0244 3F       		.byte	0x3f
 1784 0245 24       		.byte	0x24
 1785 0246 1A       		.byte	0x1a
 1786 0247 9F       		.byte	0x9f
 1787 0248 00000000 		.4byte	0
 1788 024c 00000000 		.4byte	0
 1789              	.LLST8:
 1790 0250 00000000 		.4byte	.LVL45
 1791 0254 08000000 		.4byte	.LVL47
 1792 0258 0100     		.2byte	0x1
 1793 025a 50       		.byte	0x50
 1794 025b 08000000 		.4byte	.LVL47
 1795 025f 10000000 		.4byte	.LFE16
 1796 0263 0500     		.2byte	0x5
 1797 0265 03       		.byte	0x3
 1798 0266 04000000 		.4byte	cySysWdtCallback
 1799 026a 00000000 		.4byte	0
 1800 026e 00000000 		.4byte	0
 1801              	.LLST9:
 1802 0272 00000000 		.4byte	.LVL45
 1803 0276 04000000 		.4byte	.LVL46
 1804 027a 0200     		.2byte	0x2
 1805 027c 30       		.byte	0x30
 1806 027d 9F       		.byte	0x9f
 1807 027e 04000000 		.4byte	.LVL46
 1808 0282 10000000 		.4byte	.LFE16
 1809 0286 0100     		.2byte	0x1
 1810 0288 52       		.byte	0x52
 1811 0289 00000000 		.4byte	0
 1812 028d 00000000 		.4byte	0
 1813              		.section	.debug_aranges,"",%progbits
 1814 0000 AC000000 		.4byte	0xac
 1815 0004 0200     		.2byte	0x2
 1816 0006 00000000 		.4byte	.Ldebug_info0
 1817 000a 04       		.byte	0x4
 1818 000b 00       		.byte	0
 1819 000c 0000     		.2byte	0
 1820 000e 0000     		.2byte	0
 1821 0010 00000000 		.4byte	.LFB0
 1822 0014 14000000 		.4byte	.LFE0-.LFB0
 1823 0018 00000000 		.4byte	.LFB1
 1824 001c 10000000 		.4byte	.LFE1-.LFB1
 1825 0020 00000000 		.4byte	.LFB2
 1826 0024 34000000 		.4byte	.LFE2-.LFB2
 1827 0028 00000000 		.4byte	.LFB3
 1828 002c 28000000 		.4byte	.LFE3-.LFB3
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 71


 1829 0030 00000000 		.4byte	.LFB4
 1830 0034 0C010000 		.4byte	.LFE4-.LFB4
 1831 0038 00000000 		.4byte	.LFB5
 1832 003c 1C000000 		.4byte	.LFE5-.LFB5
 1833 0040 00000000 		.4byte	.LFB6
 1834 0044 0C000000 		.4byte	.LFE6-.LFB6
 1835 0048 00000000 		.4byte	.LFB7
 1836 004c 10000000 		.4byte	.LFE7-.LFB7
 1837 0050 00000000 		.4byte	.LFB8
 1838 0054 18000000 		.4byte	.LFE8-.LFB8
 1839 0058 00000000 		.4byte	.LFB9
 1840 005c 10000000 		.4byte	.LFE9-.LFB9
 1841 0060 00000000 		.4byte	.LFB10
 1842 0064 0C000000 		.4byte	.LFE10-.LFB10
 1843 0068 00000000 		.4byte	.LFB11
 1844 006c 20000000 		.4byte	.LFE11-.LFB11
 1845 0070 00000000 		.4byte	.LFB12
 1846 0074 10000000 		.4byte	.LFE12-.LFB12
 1847 0078 00000000 		.4byte	.LFB13
 1848 007c 10000000 		.4byte	.LFE13-.LFB13
 1849 0080 00000000 		.4byte	.LFB14
 1850 0084 10000000 		.4byte	.LFE14-.LFB14
 1851 0088 00000000 		.4byte	.LFB15
 1852 008c 10000000 		.4byte	.LFE15-.LFB15
 1853 0090 00000000 		.4byte	.LFB16
 1854 0094 10000000 		.4byte	.LFE16-.LFB16
 1855 0098 00000000 		.4byte	.LFB17
 1856 009c 0C000000 		.4byte	.LFE17-.LFB17
 1857 00a0 00000000 		.4byte	.LFB18
 1858 00a4 18000000 		.4byte	.LFE18-.LFB18
 1859 00a8 00000000 		.4byte	0
 1860 00ac 00000000 		.4byte	0
 1861              		.section	.debug_ranges,"",%progbits
 1862              	.Ldebug_ranges0:
 1863 0000 00000000 		.4byte	.LFB0
 1864 0004 14000000 		.4byte	.LFE0
 1865 0008 00000000 		.4byte	.LFB1
 1866 000c 10000000 		.4byte	.LFE1
 1867 0010 00000000 		.4byte	.LFB2
 1868 0014 34000000 		.4byte	.LFE2
 1869 0018 00000000 		.4byte	.LFB3
 1870 001c 28000000 		.4byte	.LFE3
 1871 0020 00000000 		.4byte	.LFB4
 1872 0024 0C010000 		.4byte	.LFE4
 1873 0028 00000000 		.4byte	.LFB5
 1874 002c 1C000000 		.4byte	.LFE5
 1875 0030 00000000 		.4byte	.LFB6
 1876 0034 0C000000 		.4byte	.LFE6
 1877 0038 00000000 		.4byte	.LFB7
 1878 003c 10000000 		.4byte	.LFE7
 1879 0040 00000000 		.4byte	.LFB8
 1880 0044 18000000 		.4byte	.LFE8
 1881 0048 00000000 		.4byte	.LFB9
 1882 004c 10000000 		.4byte	.LFE9
 1883 0050 00000000 		.4byte	.LFB10
 1884 0054 0C000000 		.4byte	.LFE10
 1885 0058 00000000 		.4byte	.LFB11
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 72


 1886 005c 20000000 		.4byte	.LFE11
 1887 0060 00000000 		.4byte	.LFB12
 1888 0064 10000000 		.4byte	.LFE12
 1889 0068 00000000 		.4byte	.LFB13
 1890 006c 10000000 		.4byte	.LFE13
 1891 0070 00000000 		.4byte	.LFB14
 1892 0074 10000000 		.4byte	.LFE14
 1893 0078 00000000 		.4byte	.LFB15
 1894 007c 10000000 		.4byte	.LFE15
 1895 0080 00000000 		.4byte	.LFB16
 1896 0084 10000000 		.4byte	.LFE16
 1897 0088 00000000 		.4byte	.LFB17
 1898 008c 0C000000 		.4byte	.LFE17
 1899 0090 00000000 		.4byte	.LFB18
 1900 0094 18000000 		.4byte	.LFE18
 1901 0098 00000000 		.4byte	0
 1902 009c 00000000 		.4byte	0
 1903              		.section	.debug_line,"",%progbits
 1904              	.Ldebug_line0:
 1905 0000 EF010000 		.section	.debug_str,"MS",%progbits,1
 1905      02005C00 
 1905      00000201 
 1905      FB0E0D00 
 1905      01010101 
 1906              	.LASF32:
 1907 0000 43795379 		.ascii	"CySysWdtGetEnabledStatus\000"
 1907      73576474 
 1907      47657445 
 1907      6E61626C 
 1907      65645374 
 1908              	.LASF13:
 1909 0019 63797374 		.ascii	"cystatus\000"
 1909      61747573 
 1909      00
 1910              	.LASF14:
 1911 0022 72656733 		.ascii	"reg32\000"
 1911      3200
 1912              	.LASF35:
 1913 0028 43795379 		.ascii	"CySysWdtSetMatch\000"
 1913      73576474 
 1913      5365744D 
 1913      61746368 
 1913      00
 1914              	.LASF52:
 1915 0039 63796465 		.ascii	"cydelayFreqHz\000"
 1915      6C617946 
 1915      72657148 
 1915      7A00
 1916              	.LASF24:
 1917 0047 696C6F43 		.ascii	"iloCompensatedCycles\000"
 1917      6F6D7065 
 1917      6E736174 
 1917      65644379 
 1917      636C6573 
 1918              	.LASF18:
 1919 005c 43795379 		.ascii	"CySysClkIloStart\000"
 1919      73436C6B 
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 73


 1919      496C6F53 
 1919      74617274 
 1919      00
 1920              	.LASF27:
 1921 006d 63686563 		.ascii	"checkStatus\000"
 1921      6B537461 
 1921      74757300 
 1922              	.LASF45:
 1923 0079 70726576 		.ascii	"prevCallback\000"
 1923      43616C6C 
 1923      6261636B 
 1923      00
 1924              	.LASF39:
 1925 0086 43795379 		.ascii	"CySysWdtClearInterrupt\000"
 1925      73576474 
 1925      436C6561 
 1925      72496E74 
 1925      65727275 
 1926              	.LASF48:
 1927 009d 63795379 		.ascii	"cySysWdtCallback\000"
 1927      73576474 
 1927      43616C6C 
 1927      6261636B 
 1927      00
 1928              	.LASF9:
 1929 00ae 666C6F61 		.ascii	"float\000"
 1929      7400
 1930              	.LASF50:
 1931 00b4 47656E65 		.ascii	"Generated_Source\\PSoC4\\CyLFClk.c\000"
 1931      72617465 
 1931      645F536F 
 1931      75726365 
 1931      5C50536F 
 1932              	.LASF1:
 1933 00d5 756E7369 		.ascii	"unsigned char\000"
 1933      676E6564 
 1933      20636861 
 1933      7200
 1934              	.LASF31:
 1935 00e3 6D617463 		.ascii	"match\000"
 1935      6800
 1936              	.LASF15:
 1937 00e9 63795764 		.ascii	"cyWdtCallback\000"
 1937      7443616C 
 1937      6C626163 
 1937      6B00
 1938              	.LASF19:
 1939 00f7 43795379 		.ascii	"CySysClkIloStop\000"
 1939      73436C6B 
 1939      496C6F53 
 1939      746F7000 
 1940              	.LASF5:
 1941 0107 6C6F6E67 		.ascii	"long unsigned int\000"
 1941      20756E73 
 1941      69676E65 
 1941      6420696E 
 1941      7400
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 74


 1942              	.LASF37:
 1943 0119 62697473 		.ascii	"bitsNum\000"
 1943      4E756D00 
 1944              	.LASF3:
 1945 0121 73686F72 		.ascii	"short unsigned int\000"
 1945      7420756E 
 1945      7369676E 
 1945      65642069 
 1945      6E7400
 1946              	.LASF21:
 1947 0134 43795379 		.ascii	"CySysClkIloStopMeasurement\000"
 1947      73436C6B 
 1947      496C6F53 
 1947      746F704D 
 1947      65617375 
 1948              	.LASF10:
 1949 014f 646F7562 		.ascii	"double\000"
 1949      6C6500
 1950              	.LASF30:
 1951 0156 43795379 		.ascii	"CySysWdtDisable\000"
 1951      73576474 
 1951      44697361 
 1951      626C6500 
 1952              	.LASF16:
 1953 0166 6C6F6E67 		.ascii	"long double\000"
 1953      20646F75 
 1953      626C6500 
 1954              	.LASF20:
 1955 0172 43795379 		.ascii	"CySysClkIloStartMeasurement\000"
 1955      73436C6B 
 1955      496C6F53 
 1955      74617274 
 1955      4D656173 
 1956              	.LASF29:
 1957 018e 43795379 		.ascii	"CySysWdtEnable\000"
 1957      73576474 
 1957      456E6162 
 1957      6C6500
 1958              	.LASF34:
 1959 019d 43795379 		.ascii	"CySysWdtGetCount\000"
 1959      73576474 
 1959      47657443 
 1959      6F756E74 
 1959      00
 1960              	.LASF12:
 1961 01ae 75696E74 		.ascii	"uint32\000"
 1961      333200
 1962              	.LASF26:
 1963 01b5 636F6D70 		.ascii	"compensateRunningStatus\000"
 1963      656E7361 
 1963      74655275 
 1963      6E6E696E 
 1963      67537461 
 1964              	.LASF8:
 1965 01cd 756E7369 		.ascii	"unsigned int\000"
 1965      676E6564 
 1965      20696E74 
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 75


 1965      00
 1966              	.LASF25:
 1967 01da 64657369 		.ascii	"desiredDelayInCounts\000"
 1967      72656444 
 1967      656C6179 
 1967      496E436F 
 1967      756E7473 
 1968              	.LASF7:
 1969 01ef 6C6F6E67 		.ascii	"long long unsigned int\000"
 1969      206C6F6E 
 1969      6720756E 
 1969      7369676E 
 1969      65642069 
 1970              	.LASF41:
 1971 0206 43795379 		.ascii	"CySysWdtUnmaskInterrupt\000"
 1971      73576474 
 1971      556E6D61 
 1971      736B496E 
 1971      74657272 
 1972              	.LASF23:
 1973 021e 636F6D70 		.ascii	"compensatedCycles\000"
 1973      656E7361 
 1973      74656443 
 1973      79636C65 
 1973      7300
 1974              	.LASF49:
 1975 0230 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1975      43313120 
 1975      352E342E 
 1975      31203230 
 1975      31363036 
 1976 0263 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 1976      20726576 
 1976      6973696F 
 1976      6E203233 
 1976      37373135 
 1977 0296 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1977      66756E63 
 1977      74696F6E 
 1977      2D736563 
 1977      74696F6E 
 1978              	.LASF43:
 1979 02be 43795379 		.ascii	"CySysWdtSetInterruptCallback\000"
 1979      73576474 
 1979      53657449 
 1979      6E746572 
 1979      72757074 
 1980              	.LASF40:
 1981 02db 43795379 		.ascii	"CySysWdtMaskInterrupt\000"
 1981      73576474 
 1981      4D61736B 
 1981      496E7465 
 1981      72727570 
 1982              	.LASF17:
 1983 02f1 73697A65 		.ascii	"sizetype\000"
 1983      74797065 
 1983      00
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 76


 1984              	.LASF47:
 1985 02fa 43795379 		.ascii	"CySysWdtIsr\000"
 1985      73576474 
 1985      49737200 
 1986              	.LASF38:
 1987 0306 43795379 		.ascii	"CySysWdtGetIgnoreBits\000"
 1987      73576474 
 1987      47657449 
 1987      676E6F72 
 1987      65426974 
 1988              	.LASF6:
 1989 031c 6C6F6E67 		.ascii	"long long int\000"
 1989      206C6F6E 
 1989      6720696E 
 1989      7400
 1990              	.LASF22:
 1991 032a 64657369 		.ascii	"desiredDelay\000"
 1991      72656444 
 1991      656C6179 
 1991      00
 1992              	.LASF11:
 1993 0337 63686172 		.ascii	"char\000"
 1993      00
 1994              	.LASF33:
 1995 033c 43795379 		.ascii	"CySysWdtGetMatch\000"
 1995      73576474 
 1995      4765744D 
 1995      61746368 
 1995      00
 1996              	.LASF36:
 1997 034d 43795379 		.ascii	"CySysWdtSetIgnoreBits\000"
 1997      73576474 
 1997      53657449 
 1997      676E6F72 
 1997      65426974 
 1998              	.LASF2:
 1999 0363 73686F72 		.ascii	"short int\000"
 1999      7420696E 
 1999      7400
 2000              	.LASF51:
 2001 036d 433A5C55 		.ascii	"C:\\Users\\Ryan\\ownCloud\\Projects\\EEforEveryone\\"
 2001      73657273 
 2001      5C527961 
 2001      6E5C6F77 
 2001      6E436C6F 
 2002 039b 32303232 		.ascii	"2022\\2201_MOTOR\\sw\\4_PSoC\\2201_Motor\\2201_Moto"
 2002      5C323230 
 2002      315F4D4F 
 2002      544F525C 
 2002      73775C34 
 2003 03c9 722E6379 		.ascii	"r.cydsn\000"
 2003      64736E00 
 2004              	.LASF4:
 2005 03d1 6C6F6E67 		.ascii	"long int\000"
 2005      20696E74 
 2005      00
 2006              	.LASF28:
ARM GAS  C:\Users\Ryan\AppData\Local\Temp\ccMMzIqo.s 			page 77


 2007 03da 72657475 		.ascii	"returnStatus\000"
 2007      726E5374 
 2007      61747573 
 2007      00
 2008              	.LASF0:
 2009 03e7 7369676E 		.ascii	"signed char\000"
 2009      65642063 
 2009      68617200 
 2010              	.LASF46:
 2011 03f3 43795379 		.ascii	"CySysWdtGetInterruptCallback\000"
 2011      73576474 
 2011      47657449 
 2011      6E746572 
 2011      72757074 
 2012              	.LASF42:
 2013 0410 43795379 		.ascii	"CySysClkIloCompensate\000"
 2013      73436C6B 
 2013      496C6F43 
 2013      6F6D7065 
 2013      6E736174 
 2014              	.LASF44:
 2015 0426 66756E63 		.ascii	"function\000"
 2015      74696F6E 
 2015      00
 2016              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
